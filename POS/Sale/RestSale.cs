//using Microsoft.PointOfService;

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Drawing.Printing;
using System.IO;
using VIBlend.WinForms.Controls;
using VIBlend;
using VIBlend.Utilities;
using System.Data.SqlClient;
using OposPOSPrinter_CCO;
using System.Threading;
using System.Runtime.InteropServices;
using System.Reflection;
using OposCashDrawer_CCO;
using System.Net;
using System.Web;
using System.IO.Ports;
using ZXing;
using System.Web.Caching;
using System.Net.Http;
using Newtonsoft.Json;
using System.Speech;
using System.Speech.Recognition;
using System.Speech.Synthesis;
namespace POSRestaurant.Sale
{
    public partial class RestSale : Form
    {
        public List<DineInTableModel> tableslist = new List<DineInTableModel>();
        POSRestaurant.classes.Clsdbcon objCore = new classes.Clsdbcon();
        DataSet ds = new DataSet();
        public static string daystatus = "", shiftid = "";
        public static DataTable dt = new DataTable();
        public static int quantity = 0;
        public static float gst = 0, gstvisa = 0, gstcash = 0;
        public float servicecharhes = 0;
        public string userid = "";
        public static string cashr = "", waitername = "", menuid = "", menusize = "";
        public static string saletype = "";
        public string editmode = "";
        public static bool disc = false;
        public string takeawayid = "", carhopeid = "";
        public string deliveryid = "";
        public string tableno = "", waiterid = "", tablettableno = "";
        public string date = "";
        public string redeemcode = "";
        public int saleid;
        public string OldSaleId;
        public string editsale = "";
        public string discountamount = "0";
        public static string DisNarration = "";
        CustomerDisplay obcustomerdisplay;// new CustomerDisplay();
        private TextBox focusedTextbox = null;
        string calculateqty = "";
        public string memberid = "";
        public string complimentryreason = "";
        public string branchid = "";
        string[] tabsarray = new string[25];
        string[] tabsarraysaleid = new string[25];
        public bool attachmenuprice = false;
        public string discountdetailsid = "";
        public static string addon = "";
        public static string Limit ="0";
        SpeechSynthesizer ss = new SpeechSynthesizer();
        PromptBuilder pb = new PromptBuilder();
        SpeechRecognitionEngine sre = new SpeechRecognitionEngine();
        Choices clist=new Choices();
        protected void addgramer()
        {
            //clist.Add(new string[] { "1", "2" });
            //Grammar gr = new Grammar(new GrammarBuilder (clist));

            //sre.RequestRecognizerUpdate();
            //sre.LoadGrammar(gr);
            //sre.SpeechRecognized += sre_SpeechRecognized;
            //sre.SetInputToDefaultAudioDevice();
            //sre.RecognizeAsync(RecognizeMode.Multiple);
        }

        void sre_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)
        {
            //if (e.Result.Text == "1")
            //{
            //    vButton btn = new vButton();
            //    btn.Name = "1";
            //    btn.Text = "Pappu Papri";
            //    clickbuttonevent(btn);
            //}
            //if (e.Result.Text == "2")
            //{
            //    vButton btn = new vButton();
            //    btn.Name = "2";
            //    btn.Text = "Gangster Gurati Puri";
            //    clickbuttonevent(btn);
            //}
        }
        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)
        {
            try
            {
                base.OnPaint(e);
            }
            catch (Exception ex)
            {
                try
                {
                    //string q = "insert into errors (query, date, message) values ('On Paint','" + DateTime.Now + "','" + ex.Message + "')";
                    //objCore.executeQuery(q);
                }
                catch (Exception eex)
                {

                }
                this.Invalidate();
            }
        }

        public bool IsTextBoxEnabled
        {
            get
            {
                return txtdiscount.Enabled;
            }
            set
            {
                txtdiscount.Enabled = value;
            }
        }
        public string Islbldelivery
        {
            get
            {

                return lblordertype.Text;
            }
            set
            {
                newordertype = value;
                lblordertype.Text = "";// value;

            }
        }
        public RestSale()
        {
            InitializeComponent();

        }

        //private void button1_Click(object sender, EventArgs e)
        //{
        //    if (button1.Text != string.Empty)
        //    {
        //        callsubitem(button1);
        //    }
        //}
        private void GenerateMyQCCode(string QCText)
        {


            string baseDir = System.AppDomain.CurrentDomain.BaseDirectory;
            Bitmap bmp = null;
            try
            {
                var QCwriter = new BarcodeWriter();
                QCwriter.Options.Height = 200;
                QCwriter.Options.Width = 200;
                QCwriter.Format = BarcodeFormat.QR_CODE;
                var result = QCwriter.Write(QCText);

                var barcodeBitmap = new Bitmap(result);
                // pictureBox1.Image = barcodeBitmap;
                bmp = barcodeBitmap;
                bmp.Save(@baseDir + "\\pra.bmp");
            }
            catch (Exception ex)
            {


            }

        }
        bool loyality = false;
        public void voucherkeys()
        {
            gettotal();
        }
        public void discountkeys(string val, string name, string limit, string DiscountNaration)
        {
            Limit=limit;
            if(!string.IsNullOrEmpty(DiscountNaration))
            {
                DisNarration=DiscountNaration;
            }

             if(!string.IsNullOrEmpty(DisNarration))
            {
                DiscountNaration=DisNarration;
            }


            try
            {
                if (name.ToLower() == "loyality")
                {
                    loyality = true;

                }

                if (name.ToLower() == "fsc")
                {
                    loyality = false;
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;
                            DataTable tbl = grid.DataSource as DataTable;
                            int indxx = grid.CurrentCell.RowIndex;
                            tbl.Rows[indxx]["price"] = "0";
                        }
                    }
                }
                else
                {
                    try
                    {
                        if (saleid > 0 && DisNarration.Trim().Length>0)
                        {
                            string q = "update Sale set DiscountNaration='" + DisNarration + "' where id='" + saleid + "'";
                            objCore.executeQuery(q);
                            DisNarration = "";
                        }

                    }
                    catch (Exception ex)
                    {


                    }

                    if (saleid > 0 && discountid!="0" && discountid.Length > 0)
                    {
                        string q = "update sale set discountkeyid='" + discountid + "', DiscountNaration='"+DiscountNaration+"'   where id='" + saleid + "'";
                        objCore.executeQuery(q);
                        DiscountNaration="";
                    }
                    if (val == "100")
                    {
                        txtdiscount.Text = val;
                        lblgst.Text = "0";
                        txtnettotal.Text = "0";
                        txtadvanc.Text = "";
                    }
                    else
                    {
                        txtdiscount.Text = val;
                    }
                    
                }
                int indx = tabControl1.SelectedIndex;
                tabsarray[indx] = txtdiscount.Text;

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            gettotal();
        }
        public void arraysalid(string id)
        {
            try
            {
                int indx = 0;
                if (this.tabControl1.InvokeRequired)
                {
                    indx = (int)this.Invoke(new Func<int>(() => tabControl1.SelectedIndex));

                }
                else
                {
                    indx = tabControl1.SelectedIndex;
                }
                tabsarraysaleid[indx] = id;


            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public void chageday(string val)
        {
            daystatus = val;
        }
        public void chageshift(string val)
        {
            shiftid = val;
        }
        public void compdiscount(string val)
        {
            try
            {
                txtdiscount.Text = val;
                complimentryreason = val;
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public void settableno(string tbl)
        {
            //vtableno.Text = tbl;
        }
        string subgroup = "";
        public void callsubitem(Button btn)
        {
            attachmenuprice = false;
            subgroup = "";
            getsubmenuitem(btn.Name, "group");
            menugrpid = btn.Name;
            //try
            //{
            //    objCore = new classes.Clsdbcon();
            //    ds = new DataSet();
            //    string q = "select id from MenuGroup where name='" + btn.Text.Replace("&&", "&").Replace("'", "''") + "'";
            //    ds = objCore.funGetDataSet(q);
            //    if (ds.Tables[0].Rows.Count > 0)
            //    {
            //        getsubmenuitem(ds.Tables[0].Rows[0]["id"].ToString(), "group");
            //        menugrpid = ds.Tables[0].Rows[0]["id"].ToString();
            //       // menugroupfocus(menugrpid);
            //    }
            //}
            //catch (Exception ex)
            //{

            //}
            //finally
            //{
            //    ds.Dispose();
            //}
        }
        protected void menugroupfocus(string id)
        {
            //try
            //{
            //    foreach (Control c in tableLayoutPanelmenugroup.Controls)
            //    {
            //        if (c is Button)
            //        {
            //            Button btn = c as Button;
            //            if (btn.Name == id)
            //            {
            //                btn.BackColor = Color.Green;
            //                //btn.VIBlendTheme = VIBLEND_THEME.METROGREEN;
            //            }
            //            else
            //            {
            //                btn.BackColor = Color.Gray;
            //                //btn.VIBlendTheme = VIBLEND_THEME.METROBLUE;
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{


            //}
        }
        //private void button26_Click(object sender, EventArgs e)
        //{
        //    if (button26.Text != string.Empty)
        //    {
        //        callfillgrid(button26);
        //    }
        //}
        private void AddDisplayControlsorders(string type)
        {
            tblorder2.Controls.Clear();
            return;
            //try
            //{
            //    tblorder.Controls.Clear();
            //    //Clear out the existing row and column styles
            //    tblorder.ColumnStyles.Clear();
            //    tblorder.RowStyles.Clear();
            //    ds = new DataSet();

            //    try
            //    {
            //        ds = objCore.funGetDataSet("select id,Customer from sale where BillStatus='Pending'  and date='" + date + "' order by id");
            //        if (ds.Tables[0].Rows.Count > 0)
            //        {
            //            int count = 0;
            //            count = Convert.ToInt32(ds.Tables[0].Rows.Count.ToString());
            //            if (type == "new")
            //            {
            //                count++;
            //            }
            //            tblorder.ColumnCount = count;
            //            tblorder.RowCount = 1;

            //            //rowsize = Convert.ToInt32(ds.Tables[0].Rows[0]["RowSize"].ToString());
            //        }
            //        else
            //        {
            //            //Assign table no of rows and column
            //            tblorder.ColumnCount = 1;
            //            tblorder.RowCount = 1;
            //        }
            //    }
            //    catch (Exception ex)
            //    {

            //    }
            //    //Assign table no of rows and column            
            //    float cperc = 100 / tblorder.ColumnCount;
            //    float rperc = 100 / tblorder.RowCount;
            //    //tableLayoutPanelmenugroup.Height = Convert.ToInt32(rowsize * tableLayoutPanelmenugroup.RowCount);
            //    for (int i = 0; i < tblorder.ColumnCount; i++)
            //    {
            //        tblorder.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, cperc));
            //        for (int j = 0; j < tblorder.RowCount; j++)
            //        {
            //            if (i == 0)
            //            {
            //                //defining the size of cell
            //                tblorder.RowStyles.Add(new RowStyle(SizeType.Percent, rperc));
            //            }
            //        }
            //    }


            //}
            //catch (Exception ex)
            //{

            //}
            //finally
            //{
            //    ds.Dispose();
            //}
        }
        private void Addbuttonorders(Button btn)
        {

            try
            {
                //btn.Dock = DockStyle.Fill;
                int Height = tblorder2.Size.Height;
                Height =Convert.ToInt32( Height * 0.58);
                btn.Height = Height;
                btn.Margin =new Padding( 5,5,5,5);
                //if (screenheight < 720)
                //{
                //    btn.Height = 20;
                   
                //}
                //if (screenheight >= 720)
                //{
                //    btn.Height = 25;

                //}
                //if (screenheight >= 768)
                //{
                //    btn.Height = 30;

                //}
                //if (screenheight >= 800)
                //{
                //    btn.Height = 35;

                //}
                //if (screenheight >= 1024)
                //{
                //    btn.Height = 45;

                //}
                //if (screenheight >= 1050)
                //{
                //    btn.Height = 50;

                //}
                //if (screenheight >= 1080)
                //{
                //    btn.Height = 50;

                //}
                btn.Width = 100;
               

                tblorder2.Controls.Add(btn);
               // tblorder.Controls.Add(btn, tcolmsorders, 0);
                tcolmsorders++;


            }
            catch (Exception ex)
            {


            }

        }
        int tcolmsorders = 0;
        public void getorders(string type)
        {
            addon = "old";
            SqlDataReader dr = null;
            try
            {
                string value;
                value = CacheClass.Cache[CACHE_date] as string;
                if (null == value)
                {

                }
                else
                {
                    date = value;
                }
            }
            catch (Exception ex)
            {


            }
            try
            {
                string value1;
                value1 = CacheClass.Cache[CACHE_shiftid] as string;
                if (null == value1)
                {

                }
                else
                {
                    shiftid = value1;
                }
            }
            catch (Exception ex)
            {


            }
            if (applydis == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["applydis"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        applydis = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (PrintKitchen == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["PrintKitchen"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        PrintKitchen = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (printernamee == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["printernamee"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        printernamee = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (printernameegeneric == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["printernameegeneric"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        printernameegeneric = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (printtypee == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["printtypee"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        printtypee = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gst.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gst"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gst = float.Parse(value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gstcash.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gstcash"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gstcash = float.Parse(value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gstvisa.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gstvisa"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gstvisa = float.Parse(value);
                    }
                }
                catch (Exception ex)
                {


                }
            }

            if (gsttitle.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gsttitle"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gsttitle = (value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gstperc.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gstperc"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gstperc = (value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gstpercvisa.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gstpercvisa"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gstpercvisa = (value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (gstperccash.ToString() == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["gstperccash"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        gstperccash = (value);
                    }
                }
                catch (Exception ex)
                {


                }
            }
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                }
            }
            catch (Exception ex)
            {


            }
            if (printmain == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["printmain"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        printmain = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            if (kitchenbell == "")
            {
                try
                {
                    string value;
                    value = CacheClass.Cache["kitchenbell"] as string;
                    if (null == value)
                    {

                    }
                    else
                    {
                        kitchenbell = value;
                    }
                }
                catch (Exception ex)
                {


                }
            }

            try
            {
                if (date == "")
                {
                    DataSet dsgst = new DataSet();
                    try
                    {

                        dr = objCore.funGetDataReader1("select top(1) * from DayEnd where DayStatus='open' order by id desc");
                        if (dsgst.Tables[0].Rows.Count > 0)
                        {
                            date = dr["Date"].ToString();
                            DateTime datetemp = Convert.ToDateTime(date);
                            date = datetemp.ToString("yyyy-MM-dd");

                        }

                    }
                    catch (Exception ex)
                    {

                        //  MessageBox.Show(ex.Message);
                    }
                    finally
                    {
                        dsgst.Dispose();
                    }
                }
                tcolmsorders = 0;
                AddDisplayControlsorders(type);
                objCore = new classes.Clsdbcon();
                ds = new DataSet();
                string q = "select id,customer,ordertype from sale where billstatus='Pending' and date='" + date + "' order by id";
                dr = null;
                dr = objCore.funGetDataReader1(q);
                //if (ds.Tables[0].Rows.Count > 0)
                {

                    //for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    while (dr.Read())
                    {
                        // if (i == 0)
                        {
                            Button button = new Button();
                            //button.VIBlendTheme = VIBLEND_THEME.METROBLUE;// "BLACKPEARL";
                            button.Click += new EventHandler(buttonorder_Click);

                            button.Name = dr["id"].ToString();
                            button.BackColor = Color.Gray;
                            button.Font = new Font("", Convert.ToInt32(7), FontStyle.Bold);
                            //Image myImage = POSRestaurant.Properties.Resources.order;
                            string ordertype = dr["ordertype"].ToString();
                            if (ordertype == "Take Away")
                            {
                                button.BackColor = Color.Yellow;
                                button.ForeColor = Color.Black;
                            }
                            if (ordertype == "Dine In")
                            {
                                button.BackColor = Color.Green;
                                button.ForeColor = Color.White;
                            }
                            if (ordertype == "Delivery")
                            {
                                button.BackColor = Color.OrangeRed;
                                button.ForeColor = Color.White;
                            }

                            try
                            {
                                
                                POSRestaurant.classes.Clsdbcon objCore1 = new classes.Clsdbcon();
                                q = "select * from log where name='Bill Print' and Description='" + dr["id"].ToString() + "'";
                                DataSet dss = new DataSet();
                                dss = objCore1.funGetDataSet(q);
                                if (dss.Tables[0].Rows.Count > 0)
                                {
                                    button.BackColor = Color.Red;
                                    button.ForeColor = Color.White;
                                }
                                if (dr["id"].ToString() == saleid.ToString())
                                {
                                    billnobtn = button;
                                }
                            }
                            catch (Exception ex)
                            {

                            }


                            // button.BackgroundImage = myImage;
                            button.Text = dr["customer"].ToString();
                            //changtext(button, ds.Tables[0].Rows[i]["Name"].ToString(), ds.Tables[0].Rows[i]["ColorName"].ToString(), ds.Tables[0].Rows[i]["Image"].ToString(), ds.Tables[0].Rows[i]["FontSize"].ToString(), ds.Tables[0].Rows[i]["Fontcolor"].ToString(), "", ds.Tables[0].Rows[i]["id"].ToString());
                            Addbuttonorders(button);

                        }


                    }
                }
                if (type == "new")
                {
                    Button button = new Button();

                    button.Click += new EventHandler(buttonorder_Click);

                    button.Name = "";
                    button.BackColor = Color.Gray;
                    button.Font = new Font("", Convert.ToInt32(7), FontStyle.Bold);

                    button.Text = "";

                    Addbuttonorders(button);
                }

            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
        }
        protected void buttonorder_Click(object sender, EventArgs e)
        {
            voucheramount = 0;
            voucherid = "0";
            Button button = sender as Button;
            if (button.Name == "")
            {
                tabControl1.TabPages.Clear();
                int count = tabControl1.TabCount;
                if (count < 25)
                {
                    saleid = 0;
                    newordertype = "";
                    neworder(count.ToString());

                }
                return;
            }
            recalsale(button.Name, "no");
            try
            {
                billnobtn = button;
            }
            catch (Exception ex)
            {
                
            }
        }
        string runtimeid = "";
        public static string branchtype = "";
        protected void getbranchtype()
        {
            try
            {
                string q = "select ordertype from sale where id='"+saleid+"'";
                SqlDataReader dr = objCore.funGetDataReader1(q);

                if (dr.Read())
                {
                    branchtype = dr[0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
        }
        int runtimeremaining = 0;
        public void getruntimemodifier(string id, string type)
        {
            if (branchtype == "")
            {
                getbranchtype();
            }

            runtimeid = id;
            DataSet ds1 = new DataSet();
            try
            {

                topcount = (tableLayoutPanelmenuitem.ColumnCount * tableLayoutPanelmenuitem.RowCount);
                

                objCore = new classes.Clsdbcon();

                string q1 = "select * from RuntimeModifier where menuItemid='" + id + "' and type='" + branchtype + "' and status='Active'";

                ds1 = new DataSet();

                {
                    ds1 = new DataSet();
                    //q1 = "SELECT   dbo.MenuItem.Id, dbo.MenuItem.Name, dbo.MenuItem.Code, dbo.MenuItem.BarCode, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.Color.ColorName AS Fontcolor,                       dbo.MenuItem.MenuGroupId, dbo.MenuItem.Image, Color_1.ColorName, dbo.MenuItem.FontSize FROM         dbo.MenuItem LEFT OUTER JOIN                      dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active' order by dbo.MenuItem.id asc";
                    //q1 = "Select top " + topcount + " * from (SELECT dbo.menuitem.Id, dbo.menuitem.Code, dbo.menuitem.Name, dbo.menuitem.MenuGroupId, dbo.menuitem.BarCode, dbo.menuitem.Price, dbo.menuitem.Status, dbo.menuitem.ColorId,                dbo.menuitem.KDSId, dbo.menuitem.Image, dbo.menuitem.FontColorId, dbo.menuitem.FontSize, dbo.menuitem.Minutes, dbo.menuitem.alarmtime, dbo.menuitem.minuteskdscolor,                dbo.menuitem.alarmkdscolor, dbo.menuitem.uploadstatus, dbo.menuitem.branchid, Color_1.ColorName, dbo.Color.ColorName AS Fontcolor,ROW_NUMBER() OVER (ORDER BY dbo.menuitem." + sort + ") as Sno FROM  dbo.menuitem INNER JOIN               dbo.Color AS Color_1 ON dbo.menuitem.ColorId = Color_1.Id INNER JOIN               dbo.Color ON dbo.menuitem.FontColorId = dbo.Color.Id where dbo.MenuItem.submenugroupid='" + id + "' and dbo.MenuItem.status='Active'  ) as t where Sno >" + menuitemsno + " ";

                    q1 = "SELECT    top " + topcount + "  * from  ( select  dbo.MenuItem.Code, dbo.MenuItem.MenuGroupId, dbo.MenuItem.BarCode, dbo.MenuItem.ColorId, dbo.MenuItem.Image, dbo.MenuItem.FontColorId, dbo.MenuItem.FontSize, dbo.MenuItem.Minutes,                          dbo.MenuItem.alarmtime, dbo.MenuItem.minuteskdscolor, dbo.MenuItem.alarmkdscolor, dbo.MenuItem.uploadstatus, dbo.MenuItem.branchid, Color_1.ColorName, dbo.Color.ColorName AS Fontcolor,                          dbo.RuntimeModifier.id, dbo.RuntimeModifier.name, dbo.RuntimeModifier.price, dbo.RuntimeModifier.status, dbo.RuntimeModifier.kdsid,ROW_NUMBER() OVER (ORDER BY dbo.RuntimeModifier.id) as Sno FROM            dbo.MenuItem INNER JOIN                         dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id INNER JOIN                         dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id INNER JOIN                         dbo.RuntimeModifier ON dbo.MenuItem.Id = dbo.RuntimeModifier.menuItemid where dbo.RuntimeModifier.menuItemid='" + id + "'  and dbo.RuntimeModifier.type='" + branchtype + "'  and dbo.RuntimeModifier.status='Active'   or   dbo.RuntimeModifier.menuItemid='" + id + "'  and dbo.RuntimeModifier.type='Both'  and dbo.RuntimeModifier.status='Active' ) as t where Sno >" + runtimesno + " ";
                    // ds1 = objCore.funGetDataSet(q1);


                    cs = objCore.getConnectionString();
                    SqlDataReader dr = null;
                    SqlConnection conn = new SqlConnection(cs);
                    conn.Close();
                    conn.Open();
                    SqlCommand cmd = conn.CreateCommand();
                    cmd.CommandText = "str_GetRuntimeModifierDetails";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("menuItemid", id);
                    cmd.Parameters.AddWithValue("branchtype", branchtype);
                    cmd.Parameters.AddWithValue("Sno", runtimesno);
                    cmd.Parameters.AddWithValue("top", topcount);
                    DataTable dtstr = new DataTable();
                    dtstr.Load(cmd.ExecuteReader());
                    conn.Close();

                    ds1.Tables.AddRange(new DataTable[] { dtstr });


                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        tcolms1 = 0;
                        trows1 = 0;

                        this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                        tableLayoutPanelmenuitem.Controls.Clear();
                        for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                        {
                            // if (j == 0)
                            {
                                Button button1 = new Button();
                                button1.Name = ds1.Tables[0].Rows[j]["id"].ToString();
                                //button1.BackColor = Color.Indigo;
                               // button1.VIBlendTheme = VIBLEND_THEME.ULTRABLUE;
                                button1.Click += new EventHandler(buttonruntime_Click);
                                // button1.TextWrap = true;
                                changtext(button1, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString(), ds1.Tables[0].Rows[j]["Image"].ToString(), ds1.Tables[0].Rows[j]["FontSize"].ToString(), ds1.Tables[0].Rows[j]["Fontcolor"].ToString(), ds1.Tables[0].Rows[j]["id"].ToString(), "");
                                //tcolms1 = 0;
                                //trows1 = 0;
                                Addbuttonmenu(button1);
                                chkruntime = true;
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds1.Dispose();
            }
            //panel7.ResumeLayout(false);
            //tableLayoutPanelmenuitem.ResumeLayout(false);
        }
        protected void buttonruntime_Click(object sender, EventArgs e)
        {
            DataSet dsgetsize = new DataSet();
            try
            {
                Button button = sender as Button;

                if (button.Text != string.Empty)
                {

                    //menuid = button.Name;
                    string i = daystatus;

                    callfillgridruntime(button);
                }
                size = "";
                sizeid = "";
                sizeprice = 0;
                sizechk = "";
            }
            catch (Exception ex)
            {

            }
            finally
            {
                dsgetsize.Dispose();
            }
            // identify which button was clicked and perform necessary actions
        }
        public void callfillgridruntime(Button name)
        {
            if (runtimeremaining >= Convert.ToInt32(modifiercount))
            {
                MessageBox.Show("You Can Not Add More Than " + modifiercount + " Drinks/Modifier");
                return;
            }
            try
            {
                DataSet dsgst = new DataSet();

                objCore = new classes.Clsdbcon();
                ds = new DataSet();
                string q = "select * from RuntimeModifier where id='" + name.Name + "'";
                ds = objCore.funGetDataSet(q);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string temp = ds.Tables[0].Rows[0]["price"].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    float prc = float.Parse(temp);
                    try
                    {
                        if (getpricemethod().ToLower() == "gross")
                        {
                            temp = ds.Tables[0].Rows[0]["GrossPrice"].ToString();
                            if (temp == "")
                            {
                                temp = "0";
                            }
                            prc = float.Parse(temp);

                            float g = float.Parse(gstperc) + 100;
                            g = g / 100;

                            prc = prc / g;
                        }

                    }
                    catch (Exception ex)
                    {


                    }
                    float qntytemp = 1;
                    prc = prc * qntytemp;
                    fillgrid(menuid, "", "    " + ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString(), "New", "", "", "", name.Name, ds.Tables[0].Rows[0]["KDSId"].ToString(), "", "", "", "");
                    runtimeremaining++;
                    try
                    {
                        //obcustomerdisplay.fillgrid(ds.Tables[0].Rows[0]["id"].ToString(), "", ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString());

                    }
                    catch (Exception ex)
                    {
                    }
                    calculateqty = string.Empty;
                    //flavour(ds.Tables[0].Rows[0]["id"].ToString());
                    quantity = 0;
                    //modifier(ds.Tables[0].Rows[0]["id"].ToString());
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            finally
            {
                ds.Dispose();
            }
        }
        public void m(Button name)
        {
            if (runtimeremaining >= Convert.ToInt32(modifiercount))
            {
              MessageBox.Show("You Can Not Add More Than " + modifiercount + " Drinks/Modifier");
              return;
            }
            try
            {
                DataSet dsgst = new DataSet();

                objCore = new classes.Clsdbcon();
                ds = new DataSet();
                string q = "select * from RuntimeModifier where id='" + name.Name + "'";
                ds = objCore.funGetDataSet(q);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string temp = ds.Tables[0].Rows[0]["price"].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    float prc = float.Parse(temp);
                    try
                    {
                        if (getpricemethod().ToLower() == "gross")
                        {
                            temp = ds.Tables[0].Rows[0]["GrossPrice"].ToString();
                            if (temp == "")
                            {
                                temp = "0";
                            }
                            prc = float.Parse(temp);

                            float g = float.Parse(gstperc) + 100;
                            g = g / 100;

                            prc = prc / g;
                        }

                    }
                    catch (Exception ex)
                    {


                    }
                    float qntytemp = 1;
                    prc = prc * qntytemp;
                    fillgrid(menuid, "", "    " + ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString(), "New", "", "", "", name.Name, ds.Tables[0].Rows[0]["KDSId"].ToString(), "", "", "", "");
                    runtimeremaining++;
                    try
                    {
                        //obcustomerdisplay.fillgrid(ds.Tables[0].Rows[0]["id"].ToString(), "", ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString());

                    }
                    catch (Exception ex)
                    {
                    }
                    calculateqty = string.Empty;
                    //flavour(ds.Tables[0].Rows[0]["id"].ToString());
                    quantity = 0;
                    //modifier(ds.Tables[0].Rows[0]["id"].ToString());
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            finally
            {
                ds.Dispose();
            }
        }
        public Bitmap GetBitmapFromByteArray(byte[] bmp)
        {
            System.IO.MemoryStream ms = new System.IO.MemoryStream(bmp);
            Bitmap btMap = (Bitmap)System.Drawing.Image.FromStream(ms);
            ms.Close();

            return btMap;
        }
        public void changtext(Button btn, string text, string color, string img, string fontsize, string fontcolor, string menuid, string grpid)
        {

            try
            {
                btn.Text = text;
               // btn.RoundedCornersRadius = 20;
                btn.Text = text.Replace("&", "&&");
                //btn.TextWrap = true;
                btn.TextAlign = System.Drawing.ContentAlignment.BottomCenter;
                Bitmap imgg = null;
                if (menuid != "")
                {

                    try
                    {
                        //string q = "select image from menuitem where id='" + menuid + "'";
                        //DataSet dsimg = new DataSet();
                        //dsimg = objCore.funGetDataSet(q);
                        //if (dsimg.Tables[0].Rows.Count > 0)
                        //{
                        //    Byte[] data = new Byte[0];
                        //    data = (byte[])(dsimg.Tables[0].Rows[0][0]);

                        //    MemoryStream mem = new MemoryStream(data);
                        //    btn.Image = Image.FromStream(mem);
                        //}
                    }
                    catch (Exception ex)
                    {


                    }
                }
                if (grpid != "")
                {
                    try
                    {
                        //string q = "select image from menugroup where id='" + grpid + "'";
                        //DataSet dsimg = new DataSet();
                        //dsimg = objCore.funGetDataSet(q);
                        //if (dsimg.Tables[0].Rows.Count > 0)
                        //{
                        //    byte[] tempimg = null;
                        //    tempimg = (byte[])(dsimg.Tables[0].Rows[0][0]);

                        //    MemoryStream mem = new MemoryStream(tempimg);
                        //    btn.Image = Image.FromStream(mem);
                        //}
                    }
                    catch (Exception ex)
                    {


                    }
                }
                if (fontsize == "" || fontsize.ToLower() == "please select")
                {
                    fontsize = "10";
                }
                string path = Application.StartupPath + "\\Resources\\ButtonIcons\\";
                btn.Font = new Font("", 12, FontStyle.Bold);
                if (fontcolor != string.Empty)
                {
                    btn.ForeColor = Color.FromArgb(Convert.ToInt32(fontcolor));
                }
                else
                {
                    btn.ForeColor = Color.Black;
                }
                if (fontsize != string.Empty)
                {
                    btn.Font = new Font("", Convert.ToInt32(fontsize), FontStyle.Bold);
                }
                if (imgg != null)
                {
                    //btn.Image = Image.FromFile(path + img);
                    //btn.Image = imgg;
                    // btn.TextAlign = System.Drawing.ContentAlignment.BottomCenter;
                }
                else
                {
                    btn.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                }
                if (color == string.Empty)
                {
                     btn.BackColor = Color.Yellow;
                }
                else
                {
                    btn.BackColor = Color.FromArgb(Convert.ToInt32(color));
                    //if (color.ToLower() == "-16777216")
                    //{
                    //    btn.ForeColor = Color.White;
                    //}
                    //if (color.ToLower() == "-1")
                    //{
                    //    btn.ForeColor = Color.Black;
                    //}
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public string sortby(string type)
        {
            string sort = "";
            DataSet dssort = new DataSet();
            try
            {
                string q = "select sort FROM  sortby where name='" + type + "'";

                dssort = objCore.funGetDataSet(q);
                if (dssort.Tables[0].Rows.Count > 0)
                {
                    sort = dssort.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dssort.Dispose();
            }
            if (sort == "")
            {
                sort = "id";
            }
            return sort;
        }
        public string opendrawer()
        {
            string open = "";
            DataSet dssort = new DataSet();
            try
            {
                string q = "select opendrawer FROM  cashdrawer ";

                dssort = objCore.funGetDataSet(q);
                if (dssort.Tables[0].Rows.Count > 0)
                {
                    open = dssort.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dssort.Dispose();
            }
            if (open == "")
            {
                open = "printer";
            }
            return open;
        }
        public void getmenuitem()
        {
            try
            {

                string sort = "id";// sortby("Menu Group");
                AddDisplayControls();
                objCore = new classes.Clsdbcon();
                ds = new DataSet();
                string q = "SELECT   dbo.MenuGroup.Id, dbo.MenuGroup.Name, dbo.MenuGroup.Description, Color_1.ColorName,  dbo.Color.ColorName AS Fontcolor,                       dbo.MenuGroup.FontSize FROM         dbo.MenuGroup LEFT OUTER JOIN                     dbo.Color ON dbo.MenuGroup.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuGroup.ColorId = Color_1.Id WHERE     (dbo.MenuGroup.Status = 'Active') ORDER BY dbo.MenuGroup.id asc";
               // q = "select id,name,fontsize FROM         MenuGroup where Status = 'Active' order by id";
                SqlDataReader dr = objCore.funGetDataReader1(q);
                //ds = objCore.funGetDataSet(q);
                while (dr.Read())
                {
                    //for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        // if (i == 0)
                        {
                            Button button = new Button();
                           // button.VIBlendTheme = VIBLEND_THEME.METROGREEN;// "BLACKPEARL";
                            button.Click += new EventHandler(button_Click);
                            //button.TextWrap = true;
                            // button.FlatStyle = FlatStyle.Standard;
                            button.Name = dr["id"].ToString();
                            //button.BackColor = Color.Gray;
                            changtext(button, dr["Name"].ToString(), dr["ColorName"].ToString(), "", dr["FontSize"].ToString(), dr["Fontcolor"].ToString(), "", dr["id"].ToString());
                            Addbutton(button);

                            //getsubmenuitem(ds.Tables[0].Rows[i]["id"].ToString());
                        }


                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
        }
        
        protected void button_Click(object sender, EventArgs e)
        {
            if (chkruntime == true)
            {
                if (runtimeremaining < Convert.ToInt32(modifiercount))
                {
                    MessageBox.Show("Please Add Total " + modifiercount + " Drinks/Modifier");
                    return;
                }
            }
            runtimeremaining = 0;
            modifiercount = "0";
            DataSet dssize = new DataSet();
            try
            {
                btnlarge.Visible = false; btnmedium.Visible = false; btnsmall.Visible = false;
                btnxl.Visible = false;
                sizeid = ""; size = "";
                //tableLayoutPanelmenuitem.Location = new Point(0, 0);
                Button button = sender as Button;
                button.FlatStyle = FlatStyle.Flat;
                button.FlatAppearance.BorderSize = 1;
                button.FlatAppearance.BorderColor = Color.Red;

                string q = "select DISTINCT name from ModifierFlavour where MenuGroupId='" + button.Name + "' and Status='Active' or  MenuGroupId='" + button.Name + "' and Status is null  order By name desc";

                dssize = objCore.funGetDataSet(q);
                if (dssize.Tables[0].Rows.Count > 0)
                {
                    //for (int i = 0; i < dssize.Tables[0].Rows.Count; i++)
                    SqlDataReader dr = objCore.funGetDataReader1(q);
                    int i = 0;
                    while (dr.Read())
                    {
                        if (i == 0)
                        {
                            btnsmall.Text = dr["name"].ToString();
                            btnsmall.Visible = true;
                        }
                        if (i == 1)
                        {
                            btnmedium.Text = dr["name"].ToString();
                            btnmedium.Visible = true;
                        }
                        if (i == 2)
                        {
                            btnlarge.Text = dr["name"].ToString();
                            btnlarge.Visible = true;
                        }
                        if (i == 3)
                        {
                            btnxl.Text = dr["name"].ToString();
                            btnxl.Visible = true;
                        }
                        i++;
                    }
                }
                else
                {
                    btnlarge.Visible = false; btnmedium.Visible = false; btnsmall.Visible = false;
                    btnxl.Visible = false;
                    sizeid = ""; size = "";
                }
                if (button.Text != string.Empty)
                {
                    callsubitem(button);
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                dssize.Dispose();
            }
            //foreach (Control c in tableLayoutPanelmenugroup.Controls)
            //{

            //    if (c is Button)
            //    {

            //        if (c.Text == button.Text)
            //        {

            //        }
            //        else
            //        {

            //           ((Button)c).FlatStyle = FlatStyle.Standard;
            //            //button.FlatAppearance.BorderColor = Color.Transparent;
            //        }
            //    }
            //}
            // identify which button was clicked and perform necessary actions
        }
        public string size = "", sizeid = ""; float sizeprice = 0;
        bool flavourcheck = false;

        protected void clickbuttonevent(Button button)
        {
            DataSet dsgetsize = new DataSet();
            try
            {

                sizeprice = 0;
                if (button.Text != string.Empty)
                {
                    if (btnsmall.Visible == true || btnmedium.Visible == true || btnlarge.Visible == true || btnxl.Visible == true)
                    {
                        flavourcheck = true;
                        if (sizechk == "")
                        {
                            //MessageBox.Show("Please Select Size");
                            //return;
                            if (menuid == button.Name)
                            {
                                // menuid = button.Name;
                                sizechk = menusize;
                            }
                        }
                        menusize = sizechk;

                        string q = "select * from ModifierFlavour where name='" + sizechk + "' and MenuItemId='" + button.Name + "'";

                        cs = objCore.getConnectionString();
                        SqlDataReader dr = null;
                        SqlConnection conn = new SqlConnection(cs);
                        conn.Close();
                        conn.Open();
                        SqlCommand cmd = conn.CreateCommand();
                        cmd.CommandText = "str_GetModifierflavour";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("sizechk", sizechk);
                        cmd.Parameters.AddWithValue("MenuItemId", button.Name);

                        DataTable dtstr = new DataTable();
                        dtstr.Load(cmd.ExecuteReader());
                        conn.Close();

                        dsgetsize.Tables.AddRange(new DataTable[] { dtstr });


                        //dsgetsize = objCore.funGetDataSet(q);
                        if (dsgetsize.Tables[0].Rows.Count > 0)
                        {
                            size = sizechk + "'";//sizechk.Substring(0, 1) + "'";
                            sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
                            string val = dsgetsize.Tables[0].Rows[0]["price"].ToString();
                            if (val == "")
                            {
                                val = "0";
                            }

                            sizeprice = float.Parse(val);
                            if (getpricemethod().ToLower() == "gross")
                            {
                                val = dsgetsize.Tables[0].Rows[0]["grossprice"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }

                                sizeprice = float.Parse(val);
                                float g = float.Parse(gstperc) + 100;
                                g = g / 100;
                                sizeprice = sizeprice / g;
                            }
                        }
                        else
                        {
                            if (sizechk == "")
                            {
                                dsgetsize = new DataSet();
                                //q = "select * from ModifierFlavour where name='Regular' and MenuItemId='" + button.Name + "'";
                                //dsgetsize = objCore.funGetDataSet(q);

                                cs = objCore.getConnectionString();
                                dr = null;
                                conn = new SqlConnection(cs);
                                conn.Close();
                                conn.Open();
                                cmd = conn.CreateCommand();
                                cmd.CommandText = "str_GetModifierflavour";
                                cmd.CommandType = CommandType.StoredProcedure;
                                cmd.Parameters.AddWithValue("sizechk", "Regular");
                                cmd.Parameters.AddWithValue("MenuItemId", button.Name);

                                dtstr = new DataTable();
                                dtstr.Load(cmd.ExecuteReader());
                                conn.Close();

                                dsgetsize.Tables.AddRange(new DataTable[] { dtstr });


                                if (dsgetsize.Tables[0].Rows.Count > 0)
                                {
                                    sizechk = "Regular";
                                    size = sizechk + "'";// sizechk.Substring(0, 1) + "'";
                                    sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
                                    string val = dsgetsize.Tables[0].Rows[0]["price"].ToString();
                                    if (val == "")
                                    {
                                        val = "0";
                                    }

                                    sizeprice = float.Parse(val);
                                    if (getpricemethod().ToLower() == "gross")
                                    {
                                        val = dsgetsize.Tables[0].Rows[0]["grossprice"].ToString();
                                        if (val == "")
                                        {
                                            val = "0";
                                        }

                                        sizeprice = float.Parse(val);
                                        float g = float.Parse(gstperc) + 100;
                                        g = g / 100;
                                        sizeprice = sizeprice / g;
                                    }
                                }
                            }
                            //MessageBox.Show("Invalid size for this Menu Item");
                            //return;
                        }
                    }
                    else
                    {
                        flavourcheck = false;
                    }
                    menuid = button.Name;
                    string i = daystatus;
                    if (tabControl1.SelectedTab.Name == "Previous")
                    {
                        // return;
                    }
                    DataSet dsmenu = new DataSet();
                    try
                    {

                        if (CacheClass.Cache["menuitem"] != null)
                        {
                            dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                        }
                        else
                        {
                            getmenuitemname();
                            dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                        }
                    }
                    catch (Exception)
                    {


                    }
                    string manualqty = "no";
                    try
                    {
                        DataTable Result = dsmenu.Tables[0].Select("id = '" + button.Name + "'").CopyToDataTable();
                        manualqty = Result.Rows[0]["ManualQty"].ToString();
                    }
                    catch (Exception ex)
                    {
                        
                    }
                    if (manualqty.ToLower() == "yes")
                    {
                        ManualQty ob = new ManualQty(this, button);
                        ob.Show();
                    }
                    else
                    {
                        callfillgrid(button,1);
                    }
                    
                    
                }
                size = "";
                sizeid = "";
                sizeprice = 0;
                sizechk = "";
            }
            catch (Exception ex)
            {

            }
            finally
            {
                dsgetsize.Dispose();
            }
        }

        protected void buttonmenu_Click(object sender, EventArgs e)
        {
            Button button = sender as Button;
            clickbuttonevent(button);
            ////if (attachmenuprice == true)
            ////{
            ////    string q = "select price,attachmenuid from Attachmenu where id='" + button.Name + "'";
            ////    DataSet dsatach = new DataSet();
            ////    dsatach = objCore.funGetDataSet(q);
            ////    if (dsatach.Tables[0].Rows.Count > 0)
            ////    {
            ////        string temp = dsatach.Tables[0].Rows[0][0].ToString();
            ////        if (temp == "")
            ////        {
            ////            temp = "0";
            ////        }
            ////        atachmenupricee = float.Parse(temp);
            ////        button.Name = dsatach.Tables[0].Rows[0][1].ToString();
            ////    }

            ////}
            //DataSet dsgetsize = new DataSet();
            //try
            //{

            //    sizeprice = 0;
            //    if (button.Text != string.Empty)
            //    {
            //        if (btnsmall.Visible == true || btnmedium.Visible == true || btnlarge.Visible == true || btnxl.Visible == true)
            //        {
            //            flavourcheck = true;
            //            if (sizechk == "")
            //            {
            //                //MessageBox.Show("Please Select Size");
            //                //return;
            //                if (menuid == button.Name)
            //                {
            //                    // menuid = button.Name;
            //                    sizechk = menusize;
            //                }
            //            }
            //            menusize = sizechk;

            //            string q = "select * from ModifierFlavour where name='" + sizechk + "' and MenuItemId='" + button.Name + "'";

            //            cs = objCore.getConnectionString();
            //            SqlDataReader dr = null;
            //            SqlConnection conn = new SqlConnection(cs);
            //            conn.Close();
            //            conn.Open();
            //            SqlCommand cmd = conn.CreateCommand();
            //            cmd.CommandText = "str_GetModifierflavour";
            //            cmd.CommandType = CommandType.StoredProcedure;
            //            cmd.Parameters.AddWithValue("sizechk", sizechk);
            //            cmd.Parameters.AddWithValue("MenuItemId", button.Name);

            //            DataTable dtstr = new DataTable();
            //            dtstr.Load(cmd.ExecuteReader());
            //            conn.Close();

            //            dsgetsize.Tables.AddRange(new DataTable[] { dtstr });


            //            //dsgetsize = objCore.funGetDataSet(q);
            //            if (dsgetsize.Tables[0].Rows.Count > 0)
            //            {
            //                size = sizechk + "'";//sizechk.Substring(0, 1) + "'";
            //                sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
            //                string val = dsgetsize.Tables[0].Rows[0]["price"].ToString();
            //                if (val == "")
            //                {
            //                    val = "0";
            //                }

            //                sizeprice = float.Parse(val);
            //                if (getpricemethod().ToLower() == "gross")
            //                {
            //                    val = dsgetsize.Tables[0].Rows[0]["grossprice"].ToString();
            //                    if (val == "")
            //                    {
            //                        val = "0";
            //                    }

            //                    sizeprice = float.Parse(val);
            //                    float g = float.Parse(gstperc) + 100;
            //                    g = g / 100;
            //                    sizeprice = sizeprice / g;
            //                }
            //            }
            //            else
            //            {
            //                if (sizechk == "")
            //                {
            //                    dsgetsize = new DataSet();
            //                    //q = "select * from ModifierFlavour where name='Regular' and MenuItemId='" + button.Name + "'";
            //                    //dsgetsize = objCore.funGetDataSet(q);

            //                    cs = objCore.getConnectionString();
            //                    dr = null;
            //                    conn = new SqlConnection(cs);
            //                    conn.Close();
            //                    conn.Open();
            //                    cmd = conn.CreateCommand();
            //                    cmd.CommandText = "str_GetModifierflavour";
            //                    cmd.CommandType = CommandType.StoredProcedure;
            //                    cmd.Parameters.AddWithValue("sizechk", "Regular");
            //                    cmd.Parameters.AddWithValue("MenuItemId", button.Name);

            //                    dtstr = new DataTable();
            //                    dtstr.Load(cmd.ExecuteReader());
            //                    conn.Close();

            //                    dsgetsize.Tables.AddRange(new DataTable[] { dtstr });


            //                    if (dsgetsize.Tables[0].Rows.Count > 0)
            //                    {
            //                        sizechk = "Regular";
            //                        size = sizechk + "'";// sizechk.Substring(0, 1) + "'";
            //                        sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
            //                        string val = dsgetsize.Tables[0].Rows[0]["price"].ToString();
            //                        if (val == "")
            //                        {
            //                            val = "0";
            //                        }

            //                        sizeprice = float.Parse(val);
            //                        if (getpricemethod().ToLower() == "gross")
            //                        {
            //                            val = dsgetsize.Tables[0].Rows[0]["grossprice"].ToString();
            //                            if (val == "")
            //                            {
            //                                val = "0";
            //                            }

            //                            sizeprice = float.Parse(val);
            //                            float g = float.Parse(gstperc) + 100;
            //                            g = g / 100;
            //                            sizeprice = sizeprice / g;
            //                        }
            //                    }
            //                }
            //                //MessageBox.Show("Invalid size for this Menu Item");
            //                //return;
            //            }
            //        }
            //        else
            //        {
            //            flavourcheck = false;
            //        }
            //        menuid = button.Name;
            //        string i = daystatus;
            //        if (tabControl1.SelectedTab.Name == "Previous")
            //        {
            //            // return;
            //        }

            //        callfillgrid(button);
            //        //if (attachmenuprice == false)
            //        //{
            //        //    getattachmenuitem(button.Name);
            //        //}
            //    }
            //    size = "";
            //    sizeid = "";
            //    sizeprice = 0;
            //    sizechk = "";
            //}
            //catch (Exception ex)
            //{

            //}
            //finally
            //{
            //    dsgetsize.Dispose();
            //}
            // identify which button was clicked and perform necessary actions
        }
        string atachid = "";
        protected void buttonsubmenu_Click(object sender, EventArgs e)
        {
            DataSet dsgetsize = new DataSet();
            try
            {
                Button button = sender as Button;

                getsubmenuitemsubgroup(button.Name, "group");

            }
            catch (Exception ex)
            {

            }
            finally
            {
                dsgetsize.Dispose();
            }
            // identify which button was clicked and perform necessary actions
        }
        private void AddDisplayControls()
        {
            try
            {
                tableLayoutPanelmenugroup.Controls.Clear();
                //Clear out the existing row and column styles
                tableLayoutPanelmenugroup.ColumnStyles.Clear();
                tableLayoutPanelmenugroup.RowStyles.Clear();
                ds = new DataSet();
                int rowsize = 0;
                try
                {
                    ds = objCore.funGetDataSet("select * from Tablelayout where tablename='Menu Group'");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        tableLayoutPanelmenugroup.ColumnCount = Convert.ToInt32(ds.Tables[0].Rows[0]["Columns"].ToString());
                        tableLayoutPanelmenugroup.RowCount = Convert.ToInt32(ds.Tables[0].Rows[0]["Rows"].ToString());
                        //rowsize = Convert.ToInt32(ds.Tables[0].Rows[0]["RowSize"].ToString());
                    }
                    else
                    {
                        //Assign table no of rows and column
                        tableLayoutPanelmenugroup.ColumnCount = 1;
                        tableLayoutPanelmenugroup.RowCount = 8;
                    }
                }
                catch (Exception ex)
                {

                }
                //Assign table no of rows and column            
                float cperc = 100 / tableLayoutPanelmenugroup.ColumnCount;
                float rperc = 100 / tableLayoutPanelmenugroup.RowCount;
                //tableLayoutPanelmenugroup.Height = Convert.ToInt32(rowsize * tableLayoutPanelmenugroup.RowCount);
                for (int i = 0; i < tableLayoutPanelmenugroup.ColumnCount; i++)
                {
                    tableLayoutPanelmenugroup.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, cperc));
                    for (int j = 0; j < tableLayoutPanelmenugroup.RowCount; j++)
                    {
                        if (i == 0)
                        {
                            //defining the size of cell
                            tableLayoutPanelmenugroup.RowStyles.Add(new RowStyle(SizeType.Percent, rperc));
                        }
                    }
                }
                tableLayoutPanelmenugroup.HorizontalScroll.Enabled = false;
                AddDisplayControlsmenu();
            }
            catch (Exception ex)
            {

            }
            finally
            {
                ds.Dispose();
            }
        }

        private void AddDisplayControlsmenu()
        {
            try
            {
                tableLayoutPanelmenuitem.Controls.Clear();
                //Clear out the existing row and column styles
                tableLayoutPanelmenuitem.ColumnStyles.Clear();
                tableLayoutPanelmenuitem.RowStyles.Clear();
                int rowsize = 0;
                try
                {
                    ds = new DataSet();
                    ds = objCore.funGetDataSet("select * from Tablelayout where tablename='Menu Items'");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        tableLayoutPanelmenuitem.ColumnCount = Convert.ToInt32(ds.Tables[0].Rows[0]["Columns"].ToString());
                        tableLayoutPanelmenuitem.RowCount = Convert.ToInt32(ds.Tables[0].Rows[0]["Rows"].ToString());
                        // rowsize = Convert.ToInt32(ds.Tables[0].Rows[0]["RowSize"].ToString());
                    }
                    else
                    {


                        //Assign table no of rows and column
                        tableLayoutPanelmenuitem.ColumnCount = 5;
                        tableLayoutPanelmenuitem.RowCount = 4;

                    }
                }
                catch (Exception ex)
                {


                }
                //tableLayoutPanelmenuitem.Height = Convert.ToInt32(rowsize * tableLayoutPanelmenuitem.RowCount);
                float cperc = 100 / tableLayoutPanelmenuitem.ColumnCount;
                float rperc = 100 / tableLayoutPanelmenuitem.RowCount;

                for (int i = 0; i < tableLayoutPanelmenuitem.ColumnCount; i++)
                {
                    tableLayoutPanelmenuitem.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, cperc));

                    for (int j = 0; j < tableLayoutPanelmenuitem.RowCount; j++)
                    {
                        if (i == 0)
                        {
                            //defining the size of cell
                            tableLayoutPanelmenuitem.RowStyles.Add(new RowStyle(SizeType.Percent, rperc));
                        }


                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
            //tableLayoutPanelmenuitem.HorizontalScroll.Enabled = false;
        }
        int tcolms = 0;
        int trows = 0;
        private void Addbutton(Button btn)
        {
            //// panel7.SuspendLayout();
            try
            {
                btn.Dock = DockStyle.Fill;


                tableLayoutPanelmenugroup.Controls.Add(btn, tcolms, trows);
                tcolms++;
                //tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 30));
                if (tcolms >= tableLayoutPanelmenugroup.ColumnCount)
                {
                    tcolms = 0;
                    trows++;
                }
            }
            catch (Exception ex)
            {


            }
            // panel7.ResumeLayout(false);
        }
        static int tcolms1 = 0;
        static int trows1 = 0;
        private void Addbuttonmenu(Button btn)
        {
            //tableLayoutPanelmenuitem.SuspendLayout();
            try
            {
                btn.Dock = DockStyle.Fill;


                tableLayoutPanelmenuitem.Controls.Add(btn, tcolms1, trows1);
                tcolms1++;
                //tableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Absolute, 30));
                if (tcolms >= tableLayoutPanelmenuitem.ColumnCount)
                {
                    tcolms1 = 0;
                    trows1++;
                }
            }
            catch (Exception ex)
            {


            }
            //tableLayoutPanelmenuitem.ResumeLayout();
        }
        int menuitemcolumns = 0, menuitemrows = 0;
        int menuitemcount = 0, runtimecount = 0;
        int menuitemsno = 0, runtimesno = 0;
        string menugrpid = "";
        int topcount = 0;
        string menutype = "";
        private void btnup_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (menutype == "runtime")
                {
                    menuitemcolumns = tableLayoutPanelmenuitem.ColumnCount;
                    menuitemrows = tableLayoutPanelmenuitem.RowCount;
                    if (runtimesno > 0)
                    {
                        runtimecount = runtimecount + menuitemcolumns;

                        runtimesno = runtimesno - menuitemcolumns;

                        getruntimemodifier(runtimeid, "scroll");

                    }
                }
                else
                {
                    menuitemcolumns = tableLayoutPanelmenuitem.ColumnCount;
                    menuitemrows = tableLayoutPanelmenuitem.RowCount;
                    if (menuitemsno > 0)
                    {
                        menuitemcount = menuitemcount + menuitemcolumns;
                        menuitemsno = menuitemsno - menuitemcolumns;
                        getsubmenuitem(menugrpid, "scroll");
                    }
                }
            }
            catch (Exception ex)
            {
            }
        }
        private void btndown_Click_1(object sender, EventArgs e)
        {
            try
            {
                if (menutype == "runtime")
                {
                    menuitemcolumns = tableLayoutPanelmenuitem.ColumnCount;
                    menuitemrows = tableLayoutPanelmenuitem.RowCount;
                    if (runtimecount > (menuitemcolumns * menuitemrows))
                    {
                        runtimecount = runtimecount + menuitemcolumns;

                        runtimesno = runtimesno + menuitemcolumns;
                        getruntimemodifier(runtimeid, "scroll");


                    }
                }
                else
                {
                    menuitemcolumns = tableLayoutPanelmenuitem.ColumnCount;
                    menuitemrows = tableLayoutPanelmenuitem.RowCount;
                    if (menuitemcount > (menuitemcolumns * menuitemrows))
                    {
                        menuitemcount = menuitemcount - menuitemcolumns;
                        menuitemsno = menuitemsno + menuitemcolumns;
                        getsubmenuitem(menugrpid, "scroll");
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }
        protected string getstart(string type, string id)
        {
            string datew = "";
            try
            {
                string q = "";

                {
                    q = "select " + type + " from menuitem where id='" + id + "'";
                    SqlDataReader dr = objCore.funGetDataReader1(q);
                    // DataSet dss = new DataSet();
                    //dss = objCore.funGetDataSet(q);
                    if (dr.Read())
                    {
                        datew = Convert.ToDateTime(dr[0].ToString()).ToString("yyyy-MM-dd");
                    }
                }
            }
            catch (Exception ex)
            {


            }

            return datew;

        }
        public static string modifiercount = "0";
        public void getsubmenuitem(string id, string type)
        {
            menutype = "";
            DataSet ds1 = new DataSet();
            try
            {
                string sort = "id";
               sort= sortby("Menu Item");
                topcount = (tableLayoutPanelmenuitem.ColumnCount * tableLayoutPanelmenuitem.RowCount);
                tcolms1 = 0;
                trows1 = 0;

                //tableLayoutPanelmenuitem.SuspendLayout();
                this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                tableLayoutPanelmenuitem.Controls.Clear();
                // panel7.SuspendLayout();
                //tableLayoutPanelmenuitem.SuspendLayout();
                objCore = new classes.Clsdbcon();
                // SqlDataReader dr = null;
                string q1 = "select * from MenuItem where MenuGroupId='" + id + "' and status='Active'";
                if (type == "group")
                {
                    menuitemsno = 0;
                    ds1 = objCore.funGetDataSet(q1);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        menuitemcount = ds1.Tables[0].Rows.Count;
                    }
                }
                ds1 = new DataSet();

                //q1 = "SELECT DISTINCT                          dbo.MenuItem.MenuGroupId, dbo.MenuItem.BarCode, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.MenuItem.ColorId, dbo.MenuItem.KDSId, dbo.MenuItem.Image, dbo.MenuItem.FontColorId,                          dbo.MenuItem.FontSize, dbo.MenuItem.Minutes, dbo.MenuItem.alarmtime, dbo.MenuItem.minuteskdscolor, dbo.MenuItem.alarmkdscolor, dbo.MenuItem.uploadstatus, dbo.MenuItem.branchid, Color_1.ColorName,                          dbo.Color.ColorName AS Fontcolor, dbo.SubMenugroup.id, dbo.SubMenugroup.name FROM            dbo.MenuItem INNER JOIN                          dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id INNER JOIN                         dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id INNER JOIN                         dbo.SubMenugroup ON dbo.MenuItem.submenugroupid = dbo.SubMenugroup.id where dbo.SubMenugroup.MenuGroupId='" + id + "' and dbo.SubMenugroup.status='Active'";
                //ds1 = objCore.funGetDataSet(q1);
                //int count = 0;
                //try
                //{
                //    count = ds1.Tables[0].Rows.Count;
                //}
                //catch (Exception ex)
                //{


                //}
                //if (count > 0)
                //{

                //    for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                //    {
                //        vButton button1 = new vButton();
                //        button1.Name = ds1.Tables[0].Rows[j]["id"].ToString();
                //        button1.BackColor = Color.Indigo;
                //        // button1.VIBlendTheme = VIBLEND_THEME.NERO;
                //        button1.Click += new EventHandler(buttonsubmenu_Click);
                //        // button1.TextWrap = true;
                //        changtext(button1, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString(), ds1.Tables[0].Rows[j]["Image"].ToString(), ds1.Tables[0].Rows[j]["FontSize"].ToString(), ds1.Tables[0].Rows[j]["Fontcolor"].ToString(), ds1.Tables[0].Rows[j]["id"].ToString(), "");
                //        //tcolms1 = 0;
                //        //trows1 = 0;
                //        string startdate = getstart("startdate", ds1.Tables[0].Rows[j]["id"].ToString());
                //        string enddate = getstart("enddate", ds1.Tables[0].Rows[j]["id"].ToString());
                //        if (startdate == "")
                //        {
                //            Addbuttonmenu(button1);
                //        }
                //        else
                //        {
                //            if (Convert.ToDateTime(startdate) <= DateTime.Now)
                //            {
                //                if (enddate == "")
                //                {
                //                    Addbuttonmenu(button1);
                //                }
                //                else
                //                {
                //                    if (Convert.ToDateTime(enddate) >= DateTime.Now)
                //                    {
                //                        Addbuttonmenu(button1);
                //                    }
                //                }
                //            }
                //        }
                //    }
                //}
                //else
                {
                    DataSet dsmenu = new DataSet();
                    try
                    {

                        if (CacheClass.Cache["menuitem"] != null)
                        {
                            dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                        }
                        else
                        {
                            getmenuitemname();
                            dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                        }
                    }
                    catch (Exception)
                    {


                    }





                    //DataRow[] dr = dtt.Select("Id=1");
                    //for (int i = 0; i < dr.Length; i++)
                    //{
                    //    string name = dtt.Rows[i]["Name"].ToString();
                    //}
                    //dr = dtt.Select("Id=2");
                    //for (int i = 0; i < dr.Length; i++)
                    //{
                    //    string name = dtt.Rows[i]["Name"].ToString();
                    //}


                    ds1 = new DataSet();
                    q1 = "SELECT   dbo.MenuItem.Id, dbo.MenuItem.Name, dbo.MenuItem.Code, dbo.MenuItem.BarCode, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.Color.ColorName AS Fontcolor,                       dbo.MenuItem.MenuGroupId, dbo.MenuItem.Image, Color_1.ColorName, dbo.MenuItem.FontSize FROM         dbo.MenuItem LEFT OUTER JOIN                      dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active' order by dbo.MenuItem.id asc";
                    q1 = "Select top " + topcount + " * from (SELECT dbo.menuitem.Id, dbo.menuitem.Code, dbo.menuitem.Name, dbo.menuitem.MenuGroupId, dbo.menuitem.BarCode, dbo.menuitem.Price, dbo.menuitem.Status, dbo.menuitem.ColorId,                dbo.menuitem.KDSId,  dbo.menuitem.FontColorId, dbo.menuitem.FontSize, dbo.menuitem.Minutes, dbo.menuitem.alarmtime, dbo.menuitem.minuteskdscolor,                dbo.menuitem.alarmkdscolor, dbo.menuitem.uploadstatus, dbo.menuitem.branchid, Color_1.ColorName, dbo.Color.ColorName AS Fontcolor,ROW_NUMBER() OVER (ORDER BY dbo.menuitem." + sort + ") as Sno FROM  dbo.menuitem INNER JOIN               dbo.Color AS Color_1 ON dbo.menuitem.ColorId = Color_1.Id INNER JOIN               dbo.Color ON dbo.menuitem.FontColorId = dbo.Color.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active'  ) as t where Sno >" + menuitemsno + " ";

                    if (type != "group")
                    {
                        dsmenu = new DataSet();
                        dsmenu = objCore.funGetDataSet(q1);
                    }

                    DataRow[] dr = dsmenu.Tables[0].Select("menugroupId=" + id);


                    //ds1 = objCore.funGetDataSet(q1);



                    //cs = objCore.getConnectionString();
                    //dr = null;
                    //SqlConnection conn = new SqlConnection(cs);
                    //conn.Close();
                    //conn.Open();
                    //SqlCommand cmd = conn.CreateCommand();// new SqlCommand("str_Getmenuitem", conn);
                    //cmd.CommandText = "str_Getmenuitem";
                    //cmd.CommandType = CommandType.StoredProcedure;
                    //cmd.Parameters.AddWithValue("groupid",id);
                    //cmd.Parameters.AddWithValue("topvalue", topcount);
                    //cmd.Parameters.AddWithValue("sno", menuitemsno);
                    //dr = cmd.ExecuteReader();



                    //if (dr.Read())
                    //{
                    //    string nam = dr.GetString(2);
                    //}
                    //DataTable dtstr = new DataTable();
                    //dtstr.Load(cmd.ExecuteReader());                                        
                    // ds1.Tables.AddRange(new DataTable[] { dtstr });
                    //if (ds1.Tables[0].Rows.Count > 0)
                    {
                        //for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                        //while(dr.Read())
                        for (int i = 0; i < topcount; i++)
                        {
                            // if (j == 0)
                            {
                                Button button1 = new Button();
                                button1.Name = dr[i]["id"].ToString();
                                //button1.BackColor = Color.Indigo;
                               // button1.VIBlendTheme = VIBLEND_THEME.METROBLUE;
                               // button1.FocusColor = Color.Black;
                                button1.Click += new EventHandler(buttonmenu_Click);
                                // button1.TextWrap = true;
                                //changtext(button1, dr["Name"].ToString(), dr["ColorName"].ToString(), "", dr["FontSize"].ToString(), dr["Fontcolor"].ToString(), dr["id"].ToString(), "");
                                changtext(button1, dr[i]["Name"].ToString(), dr[i]["ColorName"].ToString(), "", dr[i]["FontSize"].ToString(), dr[i]["fontcolor"].ToString(), dr[i]["id"].ToString(), "");

                                //tcolms1 = 0;
                                //trows1 = 0;
                                //string startdate = getstart("startdate", dr["id"].ToString());
                                //string enddate = getstart("enddate", dr["id"].ToString());
                                string startdate = getstart("startdate", dr[i]["id"].ToString());
                                string enddate = getstart("enddate", dr[i]["id"].ToString());
                                if (startdate == "")
                                {
                                    Addbuttonmenu(button1);
                                }
                                else
                                {
                                    if (Convert.ToDateTime(startdate) <= DateTime.Now)
                                    {
                                        if (enddate == "")
                                        {
                                            Addbuttonmenu(button1);
                                        }
                                        else
                                        {
                                            if (Convert.ToDateTime(enddate) >= DateTime.Now)
                                            {
                                                Addbuttonmenu(button1);
                                            }
                                        }
                                    }
                                }

                            }
                            #region

                            //if (j == 1)
                            //{
                            //    changtext(button22, ds1.Tables[0].Rows[j]["Name"].ToString() , ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 2)
                            //{
                            //    changtext(button23, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 3)
                            //{
                            //    changtext(button24, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 4)
                            //{
                            //    changtext(button25, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 5)
                            //{
                            //    changtext(button26, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 6)
                            //{
                            //    changtext(button27, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 7)
                            //{
                            //    changtext(button28, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 8)
                            //{
                            //    changtext(button29, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 9)
                            //{
                            //    changtext(button30, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 10)
                            //{
                            //    changtext(button31, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 11)
                            //{
                            //    changtext(button32, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 12)
                            //{
                            //    changtext(button33, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 13)
                            //{
                            //    changtext(button34, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 14)
                            //{
                            //    changtext(button35, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 15)
                            //{
                            //    changtext(button36, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 16)
                            //{
                            //    changtext(button37, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 17)
                            //{
                            //    changtext(button38, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 18)
                            //{
                            //    changtext(button39, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            //if (j == 19)
                            //{
                            //    changtext(button40, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString());
                            //}
                            #endregion
                        }
                    }
                    //conn.Close();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds1.Dispose();
            }
            //panel7.ResumeLayout(false);
            //tableLayoutPanelmenuitem.ResumeLayout(false);
        }

        public void getattachmenuitem(string id)
        {
            DataSet ds1 = new DataSet();
            try
            {


                objCore = new classes.Clsdbcon();



                {
                    ds1 = new DataSet();
                    string q1 = "SELECT   dbo.MenuItem.Id, dbo.MenuItem.Name, dbo.MenuItem.Code, dbo.MenuItem.BarCode, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.Color.ColorName AS Fontcolor,                       dbo.MenuItem.MenuGroupId, dbo.MenuItem.Image, Color_1.ColorName, dbo.MenuItem.FontSize FROM         dbo.MenuItem LEFT OUTER JOIN                      dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active' order by dbo.MenuItem.id asc";
                    //q1 = "Select top " + topcount + " * from (SELECT dbo.menuitem.Id, dbo.menuitem.Code, dbo.menuitem.Name, dbo.menuitem.MenuGroupId, dbo.menuitem.BarCode, dbo.menuitem.Price, dbo.menuitem.Status, dbo.menuitem.ColorId,                dbo.menuitem.KDSId, dbo.menuitem.Image, dbo.menuitem.FontColorId, dbo.menuitem.FontSize, dbo.menuitem.Minutes, dbo.menuitem.alarmtime, dbo.menuitem.minuteskdscolor,                dbo.menuitem.alarmkdscolor, dbo.menuitem.uploadstatus, dbo.menuitem.branchid, Color_1.ColorName, dbo.Color.ColorName AS Fontcolor,ROW_NUMBER() OVER (ORDER BY dbo.menuitem." + sort + ") as Sno FROM  dbo.menuitem INNER JOIN               dbo.Color AS Color_1 ON dbo.menuitem.ColorId = Color_1.Id INNER JOIN               dbo.Color ON dbo.menuitem.FontColorId = dbo.Color.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active'  ) as t where Sno >" + menuitemsno + " ";
                    q1 = "SELECT     top " + topcount + "   dbo.Attachmenu.id, dbo.MenuItem.Name, dbo.Attachmenu.price, dbo.Attachmenu.status, dbo.Attachmenu.MenugroupId, dbo.MenuItem.Image, dbo.Attachmenu.menuitemid, dbo.Attachmenu.attachmenuid, dbo.Color.ColorName, Color_1.ColorName AS fontcolor,                          dbo.MenuItem.FontSize FROM            dbo.MenuItem INNER JOIN                         dbo.Attachmenu ON dbo.MenuItem.Id = dbo.Attachmenu.attachmenuid INNER JOIN                         dbo.Color ON dbo.MenuItem.ColorId = dbo.Color.Id INNER JOIN                         dbo.Color AS Color_1 ON dbo.MenuItem.FontColorId = Color_1.Id where dbo.Attachmenu.menuitemid='" + id + "'";
                    ds1 = objCore.funGetDataSet(q1);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        string sort = sortby("Menu Item");
                        topcount = (tableLayoutPanelmenuitem.ColumnCount * tableLayoutPanelmenuitem.RowCount);
                        tcolms1 = 0;
                        trows1 = 0;


                        this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                        tableLayoutPanelmenuitem.Controls.Clear();
                        attachmenuprice = true;
                        for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                        {
                            // if (j == 0)
                            {
                                vButton button1 = new vButton();
                                button1.Name = ds1.Tables[0].Rows[j]["id"].ToString();
                                button1.BackColor = Color.Indigo;
                                // button1.VIBlendTheme = VIBLEND_THEME.NERO;
                                button1.Click += new EventHandler(buttonmenu_Click);

                                // button1.TextWrap = true;
                                changtext(button1, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString(), ds1.Tables[0].Rows[j]["Image"].ToString(), ds1.Tables[0].Rows[j]["FontSize"].ToString(), ds1.Tables[0].Rows[j]["Fontcolor"].ToString(), ds1.Tables[0].Rows[j]["id"].ToString(), "");
                                //tcolms1 = 0;
                                //trows1 = 0;
                                Addbuttonmenu(button1);
                            }

                        }
                    }
                    else
                    {
                        attachmenuprice = false;
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds1.Dispose();
            }
            //panel7.ResumeLayout(false);
            //tableLayoutPanelmenuitem.ResumeLayout(false);
        }
        public void getsubmenuitemsubgroup(string id, string type)
        {
            DataSet ds1 = new DataSet();
            try
            {
                string sort = sortby("Menu Item");
                topcount = (tableLayoutPanelmenuitem.ColumnCount * tableLayoutPanelmenuitem.RowCount);
                tcolms1 = 0;
                trows1 = 0;

                //tableLayoutPanelmenuitem.SuspendLayout();
                this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
                tableLayoutPanelmenuitem.Controls.Clear();
                // panel7.SuspendLayout();
                //tableLayoutPanelmenuitem.SuspendLayout();
                objCore = new classes.Clsdbcon();

                string q1 = "select * from MenuItem where submenugroupid='" + id + "' and status='Active'";
                if (type == "group")
                {
                    menuitemsno = 0;
                    ds1 = objCore.funGetDataSet(q1);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        menuitemcount = ds1.Tables[0].Rows.Count;
                    }
                }
                ds1 = new DataSet();

                {
                    ds1 = new DataSet();
                    q1 = "SELECT   dbo.MenuItem.Id, dbo.MenuItem.Name, dbo.MenuItem.Code, dbo.MenuItem.BarCode, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.Color.ColorName AS Fontcolor,                       dbo.MenuItem.MenuGroupId, dbo.MenuItem.Image, Color_1.ColorName, dbo.MenuItem.FontSize FROM         dbo.MenuItem LEFT OUTER JOIN                      dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id where dbo.MenuItem.MenuGroupId='" + id + "' and dbo.MenuItem.status='Active' order by dbo.MenuItem.id asc";
                    q1 = "Select top " + topcount + " * from (SELECT dbo.menuitem.Id, dbo.menuitem.Code, dbo.menuitem.Name, dbo.menuitem.MenuGroupId, dbo.menuitem.BarCode, dbo.menuitem.Price, dbo.menuitem.Status, dbo.menuitem.ColorId,                dbo.menuitem.KDSId, dbo.menuitem.Image, dbo.menuitem.FontColorId, dbo.menuitem.FontSize, dbo.menuitem.Minutes, dbo.menuitem.alarmtime, dbo.menuitem.minuteskdscolor,                dbo.menuitem.alarmkdscolor, dbo.menuitem.uploadstatus, dbo.menuitem.branchid, Color_1.ColorName, dbo.Color.ColorName AS Fontcolor,ROW_NUMBER() OVER (ORDER BY dbo.menuitem." + sort + ") as Sno FROM  dbo.menuitem INNER JOIN               dbo.Color AS Color_1 ON dbo.menuitem.ColorId = Color_1.Id INNER JOIN               dbo.Color ON dbo.menuitem.FontColorId = dbo.Color.Id where dbo.MenuItem.submenugroupid='" + id + "' and dbo.MenuItem.status='Active'  ) as t where Sno >" + menuitemsno + " ";
                    ds1 = objCore.funGetDataSet(q1);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                        {
                            // if (j == 0)
                            {
                                vButton button1 = new vButton();
                                button1.Name = ds1.Tables[0].Rows[j]["id"].ToString();
                                button1.BackColor = Color.Indigo;
                                // button1.VIBlendTheme = VIBLEND_THEME.NERO;
                                button1.Click += new EventHandler(buttonmenu_Click);
                                // button1.TextWrap = true;
                                changtext(button1, ds1.Tables[0].Rows[j]["Name"].ToString(), ds1.Tables[0].Rows[j]["ColorName"].ToString(), ds1.Tables[0].Rows[j]["Image"].ToString(), ds1.Tables[0].Rows[j]["FontSize"].ToString(), ds1.Tables[0].Rows[j]["Fontcolor"].ToString(), ds1.Tables[0].Rows[j]["id"].ToString(), "");
                                //tcolms1 = 0;
                                //trows1 = 0;
                                Addbuttonmenu(button1);
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds1.Dispose();
            }
            //panel7.ResumeLayout(false);
            //tableLayoutPanelmenuitem.ResumeLayout(false);
        }
        public void memberinfo()
        {
            try
            {
                obcustomerdisplay.cinfo(memberid);
            }
            catch (Exception ex)
            {


            }
        }
        public string gstperc = "", gstpercvisa = "", gstperccash = "";

        public DataTable dt2 = new DataTable();
        public DataTable dt3 = new DataTable();
        public DataTable dt4 = new DataTable();
        public DataTable dt5 = new DataTable();
        public DataTable dt6 = new DataTable();
        public DataTable dt7 = new DataTable();
        public DataTable dt8 = new DataTable();
        public DataTable dt9 = new DataTable();
        public DataTable dt10 = new DataTable();
        public DataTable dt11 = new DataTable();
        public DataTable dt12 = new DataTable();
        public DataTable dt13 = new DataTable();
        public DataTable dt14 = new DataTable();
        public DataTable dt15 = new DataTable();
        public DataTable dt16 = new DataTable();
        public DataTable dt17 = new DataTable();
        public DataTable dt18 = new DataTable();
        public DataTable dt19 = new DataTable();
        public DataTable dt20 = new DataTable();
        public DataTable dt21 = new DataTable();
        public DataTable dt22 = new DataTable();
        public DataTable dt23 = new DataTable();
        public DataTable dt24 = new DataTable();
        public DataTable dt25 = new DataTable();
        public void updateinfo()
        {
            SqlDataReader dr = null;
            dr = objCore.funGetDataReader1("select * from users where id='" + userid + "'");
            if (dr.Read())
            {
                cashr = dr["name"].ToString();
                label3.Text = dr["Name"].ToString();
            }

            //KDSNEW objkds;            
            try
            {

                dr = objCore.funGetDataReader1("select top(1) * from DayEnd  where DayStatus='open' order by id desc");
                if (dr.Read())
                {
                    date = dr["Date"].ToString();
                    DateTime datetemp = Convert.ToDateTime(date);
                    date = datetemp.ToShortDateString();
                    CacheClass.Cache.Insert(CACHE_date, date, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    lbldate.Text = "Sale Date: " + date.ToString();
                    //lbldate.Visible = true;
                    string day = dr["DayStatus"].ToString();
                    if (day == "Close")
                    {
                        daystatus = "Day Start";
                    }
                    else
                    {
                        daystatus = "Day End";
                    }
                }
                else
                {
                    daystatus = "Day Start";
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            finally
            {
                //dsgst.Dispose();
            }
        }
        protected void buttons()
        {
            try
            {
                string q = "select * from buttons";
                DataSet dsbutton = new DataSet();
                dsbutton = objCore.funGetDataSet(q);
                for (int i = 0; i < dsbutton.Tables[0].Rows.Count; i++)
                {
                    if (dsbutton.Tables[0].Rows[i]["name"].ToString().ToLower() == "previous bills" && dsbutton.Tables[0].Rows[i]["status"].ToString().ToLower() == "disabled")
                    {
                        vButton6.Enabled = false;
                    }


                }
            }
            catch (Exception ex)
            {

            }
        }
        public string gsttitle = "", gsttitlevisa = "", servicechargestitle = "";
        public string pointsurl="", printinvoiceno = "";

        private void Sale_Load(object sender, EventArgs e)
        {
            addgramer();
            try
            {
               string query = "ALTER TABLE [dbo].[Sale]  ADD  UploadstatusDelivery varchar(50) NULL CONSTRAINT [DF_Sale_uploadstatusdelivery] DEFAULT ('Pending')";
                objCore.executeQuery(query);
            }
            catch (Exception ex)
            {
            }
            try
            {
                typeof(Panel).InvokeMember("DoubleBuffered", System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic, null, tableLayoutPanelmenuitem, new object[] { true });
                typeof(Panel).InvokeMember("DoubleBuffered", System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic, null, panel7, new object[] { true });
                typeof(Panel).InvokeMember("DoubleBuffered", System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic, null, tableLayoutPanelmenugroup, new object[] { true });
                //vtableno.Text = "";
                if (dt.Columns.Count > 0)
                {
                    //return;
                    dt = new DataTable();
                    dt2 = new DataTable();
                    dt3 = new DataTable();
                    dt4 = new DataTable();
                    dt5 = new DataTable();
                    dt6 = new DataTable();
                    dt7 = new DataTable();
                    dt8 = new DataTable();
                    dt9 = new DataTable();
                    dt10 = new DataTable();
                }
                //else
                {
                    dt.Columns.Add("Id", typeof(string));
                    dt.Columns.Add("MdId", typeof(string));
                    dt.Columns.Add("Qty", typeof(string));
                    dt.Columns.Add("Item", typeof(string));
                    dt.Columns.Add("Price", typeof(string));
                    dt.Columns.Add("SaleType", typeof(string));
                    dt.Columns.Add("SaleDetailid", typeof(string));
                    dt.Columns.Add("flavourid", typeof(string));
                    dt.Columns.Add("comments", typeof(string));
                    dt.Columns.Add("runtimeflavourid", typeof(string));
                    dt.Columns.Add("kdsid", typeof(string));
                    dt.Columns.Add("extraid", typeof(string));
                    dt.Columns.Add("atid", typeof(string));
                    dt.Columns.Add("code", typeof(string));

                    
                }





                gstvisa = 0;
                gstcash = 0;
                gst = 0;
                getcompany1();
                //tableLayoutPanelmenugroup.Width = panel3.Width;
                //tableLayoutPanelmenuitem.Width = panel7.Width;


                tableLayoutPanelmenugroup.Location = new Point(0, 0);
                tableLayoutPanelmenuitem.Location = new Point(0, 0);
                SqlDataReader sdr = null;
                try
                {
                    sdr = objCore.funGetDataReader1("select * from gst");
                    if (sdr.Read())
                    {
                        gst = float.Parse(sdr["gst"].ToString());

                        gstperc = gst.ToString();
                        gsttitle = (sdr["title"].ToString());
                        CacheClass.Cache.Insert("gst", date, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gstperc", date, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gsttitle", date, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }
                    else
                    {
                        //lblgst.Text = "0 %";
                        gst = 0;
                    }
                }
                catch (Exception ex)
                {

                }
                sdr = null;
                try
                {
                    sdr = objCore.funGetDataReader1("select * from gst where type is null or type='Cash'");
                    if (sdr.Read())
                    {
                        gstcash = float.Parse(sdr["gst"].ToString());

                        gstperccash = gst.ToString();
                        gsttitle = (sdr["title"].ToString());
                        CacheClass.Cache.Insert("gstcash", gstcash, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gstperccash", gstperccash, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gsttitle", gsttitle, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }
                    else
                    {
                        //lblgst.Text = "0 %";
                        gstcash = 0;
                    }
                }
                catch (Exception ex)
                {

                }
                DataSet dsdis = new DataSet();
                try
                {
                    string q = "select * from applydiscount ";

                    dsdis = objCore.funGetDataSet(q);
                    if (dsdis.Tables[0].Rows.Count > 0)
                    {
                        applydis = dsdis.Tables[0].Rows[0]["apply"].ToString();
                    }
                }
                catch (Exception ex)
                {


                }
                finally
                {
                    dsdis.Dispose();
                }
                if (applydis == "")
                {
                    applydis = "before";
                }
                try
                {
                    CacheClass.Cache.Insert("applydis", applydis, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                }
                catch (Exception ex)
                {
                    
                }
                dsdis = new DataSet();
                try
                {
                    string q = "select * from DineInTableDesign ";

                    dsdis = objCore.funGetDataSet(q);
                    if (dsdis.Tables[0].Rows.Count > 0)
                    {
                        string JSONString = string.Empty;
                        JSONString = JsonConvert.SerializeObject(dsdis.Tables[0]);
                        tableslist = (List<DineInTableModel>)JsonConvert.DeserializeObject(JSONString, typeof(List<DineInTableModel>));
                    }
                }
                catch (Exception ex)
                {


                }
                finally
                {
                    dsdis.Dispose();
                }
                sdr = null;
                try
                {
                    sdr = objCore.funGetDataReader1("select * from gst where type='Card'");
                    if (sdr.Read())
                    {
                        gstvisa = float.Parse(sdr["gst"].ToString());

                        gstpercvisa = gstvisa.ToString();
                        gsttitlevisa = (sdr["title"].ToString());
                        CacheClass.Cache.Insert("gstvisa", gstvisa, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gstpercvisa", gstpercvisa, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        CacheClass.Cache.Insert("gsttitlevisa", gsttitlevisa, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }
                    else
                    {

                        gstvisa = 0;
                    }
                }
                catch (Exception ex)
                {

                }
                try
                {
                    if (rdcard.Checked == true)
                    {
                        gst = gstvisa;
                        gstperc = gstpercvisa;
                    }
                    else
                    {
                        gst = gstcash;
                        gstperc = gstperccash;
                    }
                }
                catch (Exception ex)
                {


                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from SerivceCharges");
                    if (sdr.Read())
                    {
                        servicecharhes = float.Parse(sdr["charges"].ToString());
                    }
                    else
                    {
                        servicecharhes = 0;
                    }
                }
                catch (Exception ex)
                {

                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from users where id='" + userid + "'");
                    if (sdr.Read())
                    {
                        cashr = (sdr["name"].ToString());
                        label3.Text = cashr;
                    }

                }
                catch (Exception ex)
                {

                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from Branch");
                    if (sdr.Read())
                    {
                        branchid = (sdr["id"].ToString());
                    }

                }
                catch (Exception ex)
                {

                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from CompanyInfo");
                    if (sdr.Read())
                    {
                        printinvoiceno = (sdr["PrintInvoiceNo"].ToString());
                        CacheClass.Cache.Insert("printinvoiceno", printinvoiceno, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }

                }
                catch (Exception ex)
                {

                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from deliverytransfer where type='Points'");
                    if (sdr.Read())
                    {
                        pointsurl = (sdr["url"].ToString());
                        CacheClass.Cache.Insert("pointsurl", pointsurl, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }

                }
                catch (Exception ex)
                {

                }
                try
                {
                    sdr = objCore.funGetDataReader1("select * from DeviceSetting where device='Customer Display' and Terminal='" + System.Environment.MachineName + "'");
                    if (sdr.Read())
                    {
                        string show = (sdr["Status"].ToString());
                        try
                        {
                            if (show == "Enabled")
                            {
                                obcustomerdisplay = new CustomerDisplay();
                                obcustomerdisplay.no = Convert.ToInt32(sdr["no"].ToString());
                                Screen[] sc;
                                sc = Screen.AllScreens;


                                obcustomerdisplay.Show();
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                }
                catch (Exception ex)
                {

                }
                txtsearch.Visible = false;
                try
                {
                    sdr = objCore.funGetDataReader1("select * from DeviceSetting where device='Search'");
                    if (sdr.Read())
                    {
                        string show = (sdr["Status"].ToString());
                        try
                        {
                            if (show == "Enabled")
                            {
                                txtsearch.Visible = true;
                            }
                            
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                }
                catch (Exception ex)
                {

                }

                try
                {
                    sdr = objCore.funGetDataReader1("select * from DeviceSetting where device='Allow New Line'");
                    if (sdr.Read())
                    {
                        allownewline = (sdr["Status"].ToString());
                        CacheClass.Cache.Insert("allownewline", allownewline, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }

                }
                catch (Exception ex)
                {

                }
                DataSet dsgst = new DataSet();
                //KDSNEW objkds;
                kdsnewfix objkds;
                try
                {

                    sdr = objCore.funGetDataReader1("select * from DeviceSetting where device='KDS' and Terminal='" + System.Environment.MachineName + "'");
                    if (sdr.Read())
                    {

                        string show = sdr["Status"].ToString();
                        try
                        {
                            if (show == "Enabled")
                            {
                                //objkds = new KDSNEW();
                                objkds = new kdsnewfix();
                                objkds.no = Convert.ToInt32(sdr["no"].ToString());
                                objkds.kdsid = "1";
                                Screen[] sc;
                                sc = Screen.AllScreens;
                                objkds.Show();
                            }
                        }
                        catch (Exception ex)
                        {

                        }

                    }

                }
                catch (Exception ex)
                {

                    //  MessageBox.Show(ex.Message);
                }
                finally
                {
                    dsgst.Dispose();
                }
                //KDSNEW objkds;
                //try
                //{
                //    dsgst = new DataSet();
                //    dsgst = objCore.funGetDataSet("select * from DeviceSetting where device='KDS' and Terminal='" + System.Environment.MachineName + "'");
                //    if (dsgst.Tables[0].Rows.Count > 0)
                //    {

                //        string show = dsgst.Tables[0].Rows[0]["Status"].ToString();
                //        try
                //        {
                //            if (show == "Enabled")
                //            {
                //                objkds = new KDSNEW();
                //                objkds.no = Convert.ToInt32(dsgst.Tables[0].Rows[0]["no"].ToString());
                //                objkds.kdsid = "1";
                //                Screen[] sc;
                //                sc = Screen.AllScreens;
                //                objkds.Show();
                //            }
                //        }
                //        catch (Exception ex)
                //        {

                //        }

                //    }

                //}
                //catch (Exception ex)
                //{

                //    //  MessageBox.Show(ex.Message);
                //}
                //finally
                //{
                //    dsgst.Dispose();
                //}
                //dsgst = objCore.funGetDataSet("select * from gst");
                //if (dsgst.Tables[0].Rows.Count > 0)
                //{
                //    // lblgst.Text = dsgst.Tables[0].Rows[0]["gst"].ToString()+" %";
                //    gst = float.Parse(dsgst.Tables[0].Rows[0]["gst"].ToString());
                //    gsttitle = (dsgst.Tables[0].Rows[0]["title"].ToString());
                //    gstperc = gst.ToString();
                //}
                //else
                //{
                //    //lblgst.Text = "0 %";
                //    gst = 0;
                //}
                //try
                //{
                //    dsgst = new DataSet();
                //    dsgst = objCore.funGetDataSet("select * from SerivceCharges");
                //    if (dsgst.Tables[0].Rows.Count > 0)
                //    {
                //        servicecharhes = float.Parse(dsgst.Tables[0].Rows[0]["charges"].ToString());
                //    }
                //    else
                //    {
                //        servicecharhes = 0;
                //    }
                //}
                //catch (Exception ex)
                //{


                //}
                //finally
                //{
                //    dsgst.Dispose();
                //}
                //dsgst = new DataSet();
                //dsgst = objCore.funGetDataSet("select * from users where id='" + userid + "'");
                //if (dsgst.Tables[0].Rows.Count > 0)
                //{
                //    cashr = dsgst.Tables[0].Rows[0]["name"].ToString();
                //    label3.Text = dsgst.Tables[0].Rows[0]["Name"].ToString();
                //}
                //DataSet dsbranch = new DataSet();
                //dsbranch = objCore.funGetDataSet("select * from Branch");
                //if (dsbranch.Tables[0].Rows.Count > 0)
                //{
                //    branchid = dsbranch.Tables[0].Rows[0]["id"].ToString();
                //}
                //dsgst = new DataSet();
                //dsgst = objCore.funGetDataSet("select * from DeviceSetting where device='KOT'");
                //if (dsgst.Tables[0].Rows.Count > 0)
                //{

                //    string print = dsgst.Tables[0].Rows[0]["Status"].ToString();
                //    if (print == "Enabled")
                //    {
                //        //vBtnkot.Enabled = true;
                //        //vBtnkot.Text = "Send To KDS";
                //    }
                //    else
                //    {
                //        //vBtnkot.Enabled = false;
                //        //vBtnkot.Text = "Enable KDS";
                //    }
                //}
                //else
                //{
                //    //vBtnkot.Enabled = false;
                //    //vBtnkot.Text = "Enable KDS";
                //}

                //try
                //{
                //    dsgst = new DataSet();
                //    dsgst = objCore.funGetDataSet("select * from DeviceSetting where device='Customer Display' and Terminal='" + System.Environment.MachineName + "'");
                //    if (dsgst.Tables[0].Rows.Count > 0)
                //    {

                //        string show = dsgst.Tables[0].Rows[0]["Status"].ToString();
                //        try
                //        {
                //            if (show == "Enabled")
                //            {
                //                obcustomerdisplay = new CustomerDisplay();
                //                obcustomerdisplay.no = Convert.ToInt32(dsgst.Tables[0].Rows[0]["no"].ToString());
                //                Screen[] sc;
                //                sc = Screen.AllScreens;


                //                obcustomerdisplay.Show();
                //            }
                //        }
                //        catch (Exception ex)
                //        {


                //        }

                //    }

                //}
                //catch (Exception ex)
                //{

                //    //  MessageBox.Show(ex.Message);
                //}
                //finally
                //{
                //    dsgst.Dispose();
                //}

                //try
                //{
                //    dsgst = new DataSet();
                //    dsgst = objCore.funGetDataSet("select * from DeviceSetting where device='Line Display'");
                //    if (dsgst.Tables[0].Rows.Count > 0)
                //    {

                //        string show = dsgst.Tables[0].Rows[0]["Status"].ToString();
                //        try
                //        {
                //            if (show == "Enabled")
                //            {
                //                linedisplay = true;
                //                port = dsgst.Tables[0].Rows[0]["port"].ToString();
                //                string tenp = dsgst.Tables[0].Rows[0]["no"].ToString();
                //                if (tenp == "")
                //                {
                //                    tenp = "0";
                //                }
                //                linedisplayqty = Convert.ToInt32(tenp);
                //                if (linedisplay == true)
                //                {
                //                    closelinedisplay();
                //                    openlinedisplay(port);
                //                }
                //            }
                //        }
                //        catch (Exception ex)
                //        {
                //        }
                //    }

                //}
                //catch (Exception ex)
                //{

                //    MessageBox.Show(ex.Message);
                //}



                KDSNEW objkds1;
                //try
                //{
                //    dsgst = new DataSet();
                //    dsgst = objCore.funGetDataSet("select * from DeviceSetting where device='KDS2' and Terminal='" + System.Environment.MachineName + "'");
                //    if (dsgst.Tables[0].Rows.Count > 0)
                //    {

                //        string show = dsgst.Tables[0].Rows[0]["Status"].ToString();
                //        try
                //        {
                //            if (show == "Enabled")
                //            {
                //                objkds1 = new KDSNEW();
                //                objkds1.no = Convert.ToInt32(dsgst.Tables[0].Rows[0]["no"].ToString());
                //                objkds1.kdsid = "2";
                //                Screen[] sc;
                //                sc = Screen.AllScreens;
                //                objkds1.Show();
                //            }
                //        }
                //        catch (Exception ex)
                //        {

                //        }

                //    }

                //}
                //catch (Exception ex)
                //{

                //    MessageBox.Show(ex.Message);
                //}
                try
                {
                    dsgst = new DataSet();
                    cs = objCore.getConnectionString();
                    SqlDataReader dr = null;
                    SqlConnection conn = new SqlConnection(cs);
                    conn.Close();
                    conn.Open();
                    SqlCommand cmd = conn.CreateCommand();
                    cmd.CommandText = "str_Getdate";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("DayStatus", "open");

                    dr = cmd.ExecuteReader();
                    //DataTable dtstr = new DataTable();
                    // dtstr.Load(cmd.ExecuteReader());

                    // dsgst = new DataSet();
                    // dsgst.Tables.AddRange(new DataTable[] { dtstr });


                    //dsgst = objCore.funGetDataSet("select top(1) * from DayEnd where DayStatus='Open' order by id desc");
                    if (dr.Read())
                    {
                        date = dr["Date"].ToString();
                        DateTime datetemp = Convert.ToDateTime(date);
                        date = datetemp.ToString("yyyy-MM-dd");
                        lbldate.Text = "Sale Date: " + date.ToString();
                        CacheClass.Cache.Insert(CACHE_date, date, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                        //lbldate.Visible = true;
                        string day = dr["DayStatus"].ToString();

                        if (day == "Close")
                        {
                            daystatus = "Day Start";
                        }
                        else
                        {
                            daystatus = "Day End";
                        }


                        //date = dsgst.Tables[0].Rows[0]["Date"].ToString();
                        //DateTime datetemp = Convert.ToDateTime(date);
                        //date = datetemp.ToString("yyyy-MM-dd");
                        //lbldate.Text = "Sale Date: " + date.ToString();
                        ////lbldate.Visible = true;
                        //string day = dsgst.Tables[0].Rows[0]["DayStatus"].ToString();

                        //if (day == "Close")
                        //{
                        //    daystatus = "Day Start";
                        //}
                        //else
                        //{
                        //    daystatus = "Day End";
                        //}
                    }
                    else
                    {
                        daystatus = "Day Start";
                    }
                    conn.Close();
                }
                catch (Exception ex)
                {                    


                }
                finally
                {
                    dsgst.Dispose();
                }

                try
                {
                    dsgst = new DataSet();
                    //dsgst = objCore.funGetDataSet("select top(1) * from ShiftStart where date='" + date + "' and status='Open' and Terminal='" + System.Environment.MachineName.ToString() + "'  order by id desc");
                    dsgst = new DataSet();
                    cs = objCore.getConnectionString();
                    SqlDataReader dr = null;
                    SqlConnection conn = new SqlConnection(cs);
                    conn.Close();
                    conn.Open();
                    SqlCommand cmd = conn.CreateCommand();
                    cmd.CommandText = "str_Getshift";
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("status", "open");
                    cmd.Parameters.AddWithValue("date", date);
                    cmd.Parameters.AddWithValue("Terminal", System.Environment.MachineName.ToString());
                    dr = cmd.ExecuteReader();
                    //DataTable dtstr = new DataTable();
                    //dtstr.Load(cmd.ExecuteReader());

                    //dsgst = new DataSet();
                    //dsgst.Tables.AddRange(new DataTable[] { dtstr });


                    if (dr.Read())
                    {
                        shiftid = dr["shiftid"].ToString();
                        CacheClass.Cache.Insert(CACHE_shiftid, shiftid, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                    }
                    conn.Close();
                }
                catch (Exception ex)
                {

                    // MessageBox.Show(ex.Message);
                }
                finally
                {
                    dsgst.Dispose();
                }
                lblterminal.Text = "Terminal:" + System.Environment.MachineName.ToString();

                try
                {
                    TabPage tabPage = tabControl1.SelectedTab;
                    tabPage.Text = "";
                    DataTable dttab = new DataTable();
                    dttab.Columns.Add("Id", typeof(string));
                    dttab.Columns.Add("MdId", typeof(string));
                    dttab.Columns.Add("Qty", typeof(string));
                    dttab.Columns.Add("Item", typeof(string));
                    dttab.Columns.Add("Price", typeof(string));
                    dttab.Columns.Add("SaleType", typeof(string));
                    dttab.Columns.Add("SaleDetailid", typeof(string));
                    dttab.Columns.Add("flavourid", typeof(string));
                    dttab.Columns.Add("comments", typeof(string));
                    dttab.Columns.Add("runtimeflavourid", typeof(string));
                    dttab.Columns.Add("kdsid", typeof(string));
                    dttab.Columns.Add("extraid", typeof(string));
                    dttab.Columns.Add("atid", typeof(string));
                    dttab.Columns.Add("code", typeof(string));
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;
                            grid.DataSource = dttab;

                            try
                            {
                                grid.Columns[0].Visible = false;
                                grid.Columns[1].Visible = false;
                                grid.Columns[5].Visible = false;
                                grid.Columns[6].Visible = false;
                                grid.Columns[7].Visible = false;
                                grid.Columns[8].Visible = false;
                                grid.Columns[9].Visible = false;
                                grid.Columns[10].Visible = false;
                                grid.Columns[11].Visible = false;
                                grid.Columns[12].Visible = false;
                            }
                            catch (Exception ex)
                            {


                            }
                        }
                    }
                }
                catch (Exception ex)
                {


                }
            }
            catch (Exception ex)
            {


            }
            getmainkotdetails();
            getmenuitem();
            getmenuitemname();
            discountcompaign();
            buttons();
            getorders("new");
            getpricemethod();
           // checkprint("Print Kitchen");
           // checkprint("Print Main");
           
            if (checkprint("KOT Notification") == "Enabled")
            {
                kotnotification = "Enabled";
            }
            else
            {
                kotnotification = "Disabled";
            }

            if (checkprint("Print Kitchen") == "Enabled")
            {
                PrintKitchen = "Enabled";
            }
            else
            {
                PrintKitchen = "Disabled";
            }
            if (checkprint("Print Main") == "Enabled")
            {
                printmain = "Enabled";
            }
            else
            {
                printmain = "Disabled";
            }

            if (checkprint("Kitchen Bell") == "Enabled")
            {
                kitchenbell = "Enabled";
            }
            else
            {
                kitchenbell = "Disabled";
            }
            printtypee = printtype();
            printernamee = printername(printtypee);
            printernameegeneric = printername("generic");
            CacheClass.Cache.Insert("PrintKitchen", PrintKitchen, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            CacheClass.Cache.Insert("printmain", printmain, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            CacheClass.Cache.Insert("kitchenbell", kitchenbell, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            CacheClass.Cache.Insert("printtypee", printtypee, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            CacheClass.Cache.Insert("printernamee", printernamee, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            CacheClass.Cache.Insert("printernameegeneric", printernameegeneric, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
        }
        public static List<menuitemcls2> menulist = new List<menuitemcls2>();
        protected void getmenuitemname()
        {
            try
            {
                string sort = "Id";

                try
                {
                    sort = sortby("Menu Item");
                }
                catch (Exception ex)
                {

                }
                if (sort == "")
                {
                    sort = "dbo.MenuItem.Id";
                }
                string q = "select id,name,fontsize,menugroupid,KDSId,modifiercount,GrossPrice,price,ManualQty,price2,price3 from menuitem where status='Active'";
                q = "SELECT  dbo.MenuItem.Id , dbo.MenuItem.Name,dbo.MenuItem.barcode,dbo.MenuItem.KDSId, dbo.MenuItem.modifiercount, dbo.MenuItem.GrossPrice,dbo.MenuItem.ManualQty,dbo.MenuItem.price2,dbo.MenuItem.price3, dbo.MenuItem.Price, dbo.MenuItem.Status, dbo.Color.ColorName AS Fontcolor,                       dbo.MenuItem.MenuGroupId, dbo.MenuItem.Image, Color_1.ColorName, dbo.MenuItem.FontSize FROM         dbo.MenuItem LEFT OUTER JOIN                      dbo.Color ON dbo.MenuItem.FontColorId = dbo.Color.Id LEFT OUTER JOIN                      dbo.Color AS Color_1 ON dbo.MenuItem.ColorId = Color_1.Id where  dbo.MenuItem.status='Active' order by dbo.menuitem." + sort;
                DataSet dsmenu = new DataSet();
                dsmenu = objCore.funGetDataSet(q);
                CacheClass.Cache.Insert("menuitem", dsmenu, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));

                try
                {
                    menulist = new List<menuitemcls2>();
                    IList<menuitemcls2> data = dsmenu.Tables[0].AsEnumerable().Select(row =>
                        new menuitemcls2
                        {
                            id = row.Field<int>("Id"),
                            name = row.Field<string>("Name"),
                            barcode = row.Field<string>("barcode")



                        }).ToList();
                    menulist = data.ToList();

                    txtsearch.AutoCompleteCustomSource = null;
                    AutoCompleteStringCollection data1 = new AutoCompleteStringCollection();
                    foreach (var item in data)
                    {
                        data1.Add(item.name);
                    }
                    txtsearch.AutoCompleteCustomSource = data1;

                }
                catch (Exception ex)
                {


                }


                q = "insert into log (Name, Time, Description,userid) values ('Menu Item','" + DateTime.Now + "',' Menu Item Called','" + userid + "')";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {


            }
            try
            {

                string q = "SELECT        id, name, menuItemid, price, Quantity, kdsid, Type, quantityallowed,  GrossPrice,'ColorName' as ColorName,'Fontcolor' as Fontcolor FROM            RuntimeModifier where status='Active'";
                DataSet dsmenu = new DataSet();
                dsmenu = objCore.funGetDataSet(q);
                CacheClass.Cache.Insert("runtimemodifier", dsmenu, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));

            }
            catch (Exception ex)
            {


            }

        }
        bool linedisplay = false;
        public static int linedisplayqty = 0;
        public static string port = "";
        public static string discountcompaignid = "";
        protected void discountcompaign()
        {
            DataSet dsgst1 = new DataSet();
            try
            {

                string q = "select id,Discount,timeto from DiscountCompaign where Datefrom <='" + date + "' and DateTo >='" + date + "' and " + Convert.ToDateTime(date).DayOfWeek.ToString() + "='true' and TimeFrom <= '" + DateTime.Now.TimeOfDay + "' and TimeTo >= '" + DateTime.Now.TimeOfDay + "'";
                q = "select id,Discount,timeto from DiscountCompaign where Datefrom <='" + date + "' and DateTo >='" + date + "' and " + Convert.ToDateTime(date).DayOfWeek.ToString() + "='true' and TimeFrom <= '" + DateTime.Now.TimeOfDay + "' and type='Overall' and status='Active'";
                dsgst1 = objCore.funGetDataSet(q);
                if (dsgst1.Tables[0].Rows.Count > 0)
                {
                    string timeto = dsgst1.Tables[0].Rows[0]["timeto"].ToString();
                    if (timeto == "")
                    {
                        txtdiscount.Text = (dsgst1.Tables[0].Rows[0]["Discount"].ToString());
                        discountcompaignid = (dsgst1.Tables[0].Rows[0]["id"].ToString());
                    }
                    else
                    {
                        TimeSpan DBEndTime = (TimeSpan)dsgst1.Tables[0].Rows[0]["timeto"];

                        if (DateTime.Now.TimeOfDay <= DBEndTime)
                        {
                            txtdiscount.Text = (dsgst1.Tables[0].Rows[0]["Discount"].ToString());
                            discountcompaignid = (dsgst1.Tables[0].Rows[0]["id"].ToString());
                        }
                        else
                        {
                            txtdiscount.Text = "0";
                            discountcompaignid = "";
                        }
                    }
                }
                else
                {
                    txtdiscount.Text = "0";
                    discountcompaignid = "";
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsgst1.Dispose();
            }

        }
        #region
        //private void button2_Click(object sender, EventArgs e)
        //{
        //    if (button2.Text != string.Empty)
        //    {
        //        callsubitem(button2);
        //    }
        //}

        //private void button3_Click(object sender, EventArgs e)
        //{
        //    if (button3.Text != string.Empty)
        //    {
        //        callsubitem(button3);
        //    }
        //}

        //private void button4_Click(object sender, EventArgs e)
        //{
        //    if (button4.Text != string.Empty)
        //    {
        //        callsubitem(button4);
        //    }

        //}

        //private void button5_Click(object sender, EventArgs e)
        //{
        //    if (button5.Text != string.Empty)
        //    {
        //        callsubitem(button5);
        //    }
        //}

        //private void button6_Click(object sender, EventArgs e)
        //{
        //    if (button6.Text != string.Empty)
        //    {
        //        callsubitem(button6);
        //    }
        //}

        //private void button7_Click(object sender, EventArgs e)
        //{
        //    if (button7.Text != string.Empty)
        //    {
        //        callsubitem(button7);
        //    }
        //}

        //private void button8_Click(object sender, EventArgs e)
        //{
        //    if (button8.Text != string.Empty)
        //    {
        //        callsubitem(button8);
        //    }
        //}

        //private void button9_Click(object sender, EventArgs e)
        //{
        //    if (button9.Text != string.Empty)
        //    {
        //        callsubitem(button9);
        //    }
        //}

        //private void button10_Click(object sender, EventArgs e)
        //{
        //    if (button10.Text != string.Empty)
        //    {
        //        callsubitem(button10);
        //    }
        //}

        //private void button11_Click(object sender, EventArgs e)
        //{
        //    if (button11.Text != string.Empty)
        //    {
        //        callsubitem(button11);
        //    }
        //}

        //private void button12_Click(object sender, EventArgs e)
        //{
        //    if (button12.Text != string.Empty)
        //    {
        //        callsubitem(button12);
        //    }
        //}

        //private void button13_Click(object sender, EventArgs e)
        //{
        //    if (button13.Text != string.Empty)
        //    {
        //        callsubitem(button13);
        //    }
        //}

        //private void button14_Click(object sender, EventArgs e)
        //{
        //    if (button14.Text != string.Empty)
        //    {
        //        callsubitem(button14);
        //    }
        //}

        //private void button15_Click(object sender, EventArgs e)
        //{
        //    if (button15.Text != string.Empty)
        //    {
        //        callsubitem(button15);
        //    }
        //}

        //private void button16_Click(object sender, EventArgs e)
        //{
        //    if (button16.Text != string.Empty)
        //    {
        //        callsubitem(button16);
        //    }
        //}

        //private void button17_Click(object sender, EventArgs e)
        //{
        //    if (button17.Text != string.Empty)
        //    {
        //        callsubitem(button17);
        //    }
        //}

        //private void button18_Click(object sender, EventArgs e)
        //{
        //    if (button18.Text != string.Empty)
        //    {
        //        callsubitem(button18);
        //    }
        //}

        //private void button19_Click(object sender, EventArgs e)
        //{
        //    if (button19.Text != string.Empty)
        //    {
        //        callsubitem(button19);
        //    }
        //}

        //private void button20_Click(object sender, EventArgs e)
        //{
        //    if (button20.Text != string.Empty)
        //    {
        //        callsubitem(button20);
        //    }
        //}
        #endregion
        public void bindreportsample(string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst)
        {
            try
            {
                if (dtcopy.Rows.Count > 0)
                {
                    DataSet dsprint = new DataSet();
                    dsprint = objCore.funGetDataSet("select * from Printers where type='Bill Copy'");

                    if (dsprint.Tables[0].Rows.Count > 0)
                    {
                        //ReportDocument rptDoc = new ReportDocument();
                        POSRestaurant.Reports.rptSampleCashReceipt rptDoc = new Reports.rptSampleCashReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        //feereport ds = new feereport(); // .xsd file name
                        DataTable dt = new DataTable();

                        // Just set the name of data table
                        dt.TableName = "Crystal Report";
                        // dt = getAllOrders(mop, sid, ordertype, total, nettotal, discount, gst);
                        dsrpt.Tables[0].Merge(dt, true, MissingSchemaAction.Ignore);


                        rptDoc.SetDataSource(dsrpt);
                        //rptDoc.DataDefinition.FormulaFields["PicPath"].Text = POSRestaurant.Properties.Resources.logo.ToString();// @"'C:\MyImage.jpg'";
                        //rptDoc.PrintOptions.PrinterName = "Posiflex PP6900 576 Partial Cut v3.01 v";
                        //rptDoc.PrintToPrinter(1, false, 0, 0);

                        rptDoc.PrintOptions.PrinterName = dsprint.Tables[0].Rows[0]["name"].ToString();
                        rptDoc.PrintToPrinter(1, false, 0, 0);

                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void bindreportvoid(string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst)
        {
            try
            {
                if (dataGridView1.Rows.Count > 0)
                {
                    DataSet dsprint = new DataSet();
                    dsprint = objCore.funGetDataSet("select * from Printers where type='Receipt'");

                    //if (dsprint.Tables[0].Rows.Count > 0)
                    {
                        //ReportDocument rptDoc = new ReportDocument();
                        POSRestaurant.Reports.VoidReceipt rptDoc = new Reports.VoidReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        //feereport ds = new feereport(); // .xsd file name
                        DataTable dt = new DataTable();

                        // Just set the name of data table
                        dt.TableName = "Crystal Report";
                        // dt = getAllOrders(mop, sid, ordertype, total, nettotal, discount, gst);
                        dsrpt.Tables[0].Merge(dt, false, MissingSchemaAction.Ignore);


                        rptDoc.SetDataSource(dsrpt);
                        //rptDoc.DataDefinition.FormulaFields["PicPath"].Text = POSRestaurant.Properties.Resources.logo.ToString();// @"'C:\MyImage.jpg'";
                        //rptDoc.PrintOptions.PrinterName = "Posiflex PP6900 576 Partial Cut v3.01 v";
                        //rptDoc.PrintToPrinter(1, false, 0, 0);

                        // rptDoc.PrintOptions.PrinterName = dsprint.Tables[0].Rows[0]["name"].ToString();
                        rptDoc.PrintToPrinter(1, false, 0, 0);
                        try
                        {
                            obcustomerdisplay.addpoints(memberid, sid);
                            obcustomerdisplay.cinfo("");
                        }
                        catch (Exception ex)
                        {


                        }
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void bindreportwaste(string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst)
        {
            try
            {
                if (dataGridView1.Rows.Count > 0)
                {
                    DataSet dsprint = new DataSet();
                    dsprint = objCore.funGetDataSet("select * from Printers where type='Receipt'");

                    //  if (dsprint.Tables[0].Rows.Count > 0)
                    {
                        //ReportDocument rptDoc = new ReportDocument();
                        POSRestaurant.Reports.WasteReceipt rptDoc = new Reports.WasteReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        //feereport ds = new feereport(); // .xsd file name
                        DataTable dt = new DataTable();

                        // Just set the name of data table
                        dt.TableName = "Crystal Report";
                        //dt = getAllOrders(mop, sid, ordertype, total, nettotal, discount, gst);
                        dsrpt.Tables[0].Merge(dt, false, MissingSchemaAction.Ignore);


                        rptDoc.SetDataSource(dsrpt);
                        //rptDoc.DataDefinition.FormulaFields["PicPath"].Text = POSRestaurant.Properties.Resources.logo.ToString();// @"'C:\MyImage.jpg'";
                        //rptDoc.PrintOptions.PrinterName = "Posiflex PP6900 576 Partial Cut v3.01 v";
                        //rptDoc.PrintToPrinter(1, false, 0, 0);

                        // rptDoc.PrintOptions.PrinterName = dsprint.Tables[0].Rows[0]["name"].ToString();
                        rptDoc.PrintToPrinter(1, false, 0, 0);
                        try
                        {
                            obcustomerdisplay.addpoints(memberid, sid);
                            obcustomerdisplay.cinfo("");
                        }
                        catch (Exception ex)
                        {


                        }
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        DataSet dscompany = new DataSet();
        public void getcompany()
        {
            dscompany = objCore.funGetDataSet("select * from CompanyInfo");

        }
        public string gettbleno(string id)
        {
            string tbl = "";
            //DataSet dstbl = new DataSet();
            try
            {

                string q = "select TableNo,guests from DinInTables where Saleid='" + id + "'";
                //q = "SELECT dbo.DinInTables.TableNo, dbo.ResturantStaff.Name FROM  dbo.DinInTables INNER JOIN               dbo.ResturantStaff ON dbo.DinInTables.WaiterId = dbo.ResturantStaff.Id  where dbo.DinInTables.Saleid='" + id + "'";
                // dstbl = objCore.funGetDataSet(q);
                SqlDataReader dr = objCore.funGetDataReader1(q);
                if (dr.Read())
                {
                    tbl = dr[0].ToString() + " , Guests: " + dr[1].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {

            }
            return tbl;
        }
        public string getcustomerid(string id)
        {
            string customerid = "";
            // DataSet dstbl = new DataSet();
            try
            {

                string q = "select Customer from sale where id='" + id + "'";
                SqlDataReader dr = objCore.funGetDataReader1(q);
                if (dr.Read())
                {
                    customerid = dr[0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {

            }
            return customerid;
        }
        public void bindreportrefund(string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst)
        {
            DataSet dsprint = new DataSet();
            try
            {
                if (dtcopy.Rows.Count > 0)
                {

                    string q = "select * from Printers where type='" + ordertype + "'";
                    objCore = new classes.Clsdbcon();
                    dsprint = objCore.funGetDataSet(q);

                    // if (dsprint.Tables[0].Rows.Count > 0)
                    {
                        //ReportDocument rptDoc = new ReportDocument();
                        POSRestaurant.Reports.RefundCashReceipt rptDoc = new Reports.RefundCashReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        //feereport ds = new feereport(); // .xsd file name
                        DataTable dt = new DataTable();

                        // Just set the name of data table
                        dt.TableName = "Crystal Report";
                        dt = getAllOrdersrefund(mop, sid, ordertype, total, nettotal, discount, gst);
                        //dsrpt.Tables[0].Merge(dt,false,MissingSchemaAction.Ignore);
                        dsrpt.Tables[0].Merge(dt);

                        rptDoc.SetDataSource(dsrpt);
                        //rptDoc.DataDefinition.FormulaFields["PicPath"].Text = POSRestaurant.Properties.Resources.logo.ToString();// @"'C:\MyImage.jpg'";
                        rptDoc.PrintOptions.PrinterName = GetDefaultPrinter();
                        //rptDoc.PrintToPrinter(1, false, 0, 0);

                        if (mop == "Credit Card" || mop == "Master Card")
                        {
                            rptDoc.SetParameterValue("cardno", "Card No: " + cardno);
                        }
                        else
                        {
                            rptDoc.SetParameterValue("cardno", "");
                        }
                        string cash = "", change = "";
                        //if (txtcashrecvd.Text == "")
                        //{
                        //    cash = txtnettotal.Text;
                        //}
                        //else
                        //{
                        //    cash = txtcashrecvd.Text;
                        //}
                        //if (txtchange.Text == "")
                        //{
                        //    change = "0";
                        //}
                        //else
                        //{
                        //    change = txtchange.Text;
                        //}
                        getcompany();
                        string msg = "";
                        try
                        {
                            msg = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                        }
                        catch (Exception ex)
                        {

                        }
                        if (ordertype == "Din In")
                        {
                            string tblno = gettbleno(sid);
                            rptDoc.SetParameterValue("table", "Table No: " + tblno);
                        }
                        else if (ordertype == "Take Away")
                        {
                            string cusid = getcustomerid(sid);
                            rptDoc.SetParameterValue("table", "Customer Id: " + cusid);
                        }
                        else
                        {

                            rptDoc.SetParameterValue("table", "");
                        }
                        rptDoc.SetParameterValue("cash", cash);
                        rptDoc.SetParameterValue("change", change);
                        rptDoc.SetParameterValue("message", msg);

                        int print = 1;
                        try
                        {
                            //string temp = dsprint.Tables[0].Rows[0]["Prints"].ToString();
                            //if (temp == "")
                            //{
                            //    temp = "1";
                            //}
                            //print = Convert.ToInt32(temp);
                        }
                        catch (Exception ex)
                        {
                        }
                        rptDoc.PrintToPrinter(print, false, 0, 0);

                    }
                }
            }
            catch (Exception ex)
            {

                //MessageBox.Show(ex.Message);
            }
            finally
            {
                dsprint.Dispose();
            }
        }
        public DataTable getAllOrdersrefund(string mp, string siid, string ordertype, string total, string nettotal, string discount, string gst)
        {

            DataTable dtrpt = new DataTable();
            dtrpt.Columns.Add("QTY", typeof(string));
            dtrpt.Columns.Add("ItemName", typeof(string));
            dtrpt.Columns.Add("Price", typeof(string));
            dtrpt.Columns.Add("Total", typeof(double));
            dtrpt.Columns.Add("Discount", typeof(double));
            dtrpt.Columns.Add("GST", typeof(double));
            dtrpt.Columns.Add("NetTotal", typeof(double));
            dtrpt.Columns.Add("Cashier", typeof(string));
            dtrpt.Columns.Add("CName", typeof(string));
            dtrpt.Columns.Add("CAddress", typeof(string));
            dtrpt.Columns.Add("CPhone", typeof(string));
            dtrpt.Columns.Add("MOP", typeof(string));
            dtrpt.Columns.Add("Invoice", typeof(string));
            dtrpt.Columns.Add("Date", typeof(string));
            dtrpt.Columns.Add("Time", typeof(string));
            dtrpt.Columns.Add("OrderType", typeof(string));
            dtrpt.Columns.Add("DiscountAmount", typeof(double));
            dtrpt.Columns.Add("logo", typeof(byte[]));
            //string cname = "", caddress = "", cphone = "",logo="";
            //DataSet dsinfo = new DataSet();
            //objCore = new classes.Clsdbcon();
            //dsinfo = objCore.funGetDataSet("select * from CompanyInfo");

            //if (dsinfo.Tables[0].Rows.Count > 0)
            //{
            //    cname = dsinfo.Tables[0].Rows[0]["Name"].ToString();
            //    caddress = dsinfo.Tables[0].Rows[0]["Address"].ToString();
            //    cphone = dsinfo.Tables[0].Rows[0]["Phone"].ToString();
            //    logo = dsinfo.Tables[0].Rows[0]["logo"].ToString();
            //}
            //foreach (DataGridViewRow dr in dataGridView1.Rows)
            foreach (DataRow dr in dtcopy.Rows)
            {
                try
                {
                    if (dr["Id"].ToString() != string.Empty)
                    {
                        string pc = dr["Price"].ToString();

                        string qnty = "";
                        //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                        //{
                        //    qnty = "";
                        //}
                        //else
                        {
                            qnty = dr["Qty"].ToString();
                            qnty = "-" + qnty;
                        }
                        //if (pc == string.Empty)
                        //{
                        //    pc = "0";
                        //}
                        if (logo == "")
                        {
                            dtrpt.Rows.Add(qnty, dr["Item"].ToString(), (pc), Convert.ToDouble(total), Convert.ToDouble(discount), Convert.ToDouble(gst), Convert.ToDouble(nettotal), cashr, cname, caddress, cphone, mp, siid, "", "", ordertype, Convert.ToDouble(discountamount), null);
                        }
                        else
                        {
                            dtrpt.Rows.Add(qnty, dr["Item"].ToString(), (pc), Convert.ToDouble(total), Convert.ToDouble(discount), Convert.ToDouble(gst), Convert.ToDouble(nettotal), cashr, cname, caddress, cphone, mp, siid, "", "", ordertype, Convert.ToDouble(discountamount), dsinfo1.Tables[0].Rows[0]["logo"]);
                        }

                    }
                }
                catch (Exception ex)
                {


                }
            }

            return dtrpt;
        }
        public string getdeliveryinfo(string id)
        {
            string info = "";
            SqlDataReader dr = null;
            try
            {
                string q = "select * from Delivery where SaleId='" + id + "'";
                dr = objCore.funGetDataReader1(q);
                if (dr.Read())
                {
                    info = "Name : " + dr["Name"].ToString() + "\nPhone No : " + dr["Phone"].ToString() + "\nadrs:" + dr["Address"].ToString() + "\nNote : " + dr["Note"].ToString() + "\nOrder Source : " + dr["type"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {

            }
            return info;
        }
        public void Print(string printerName, string sid, string cashier, string cusid, string mop, string delivery, DataTable dtr, string r, string c, string total, string dis, string gst, string type, string ordertype, string dat,string invoiceno)
        {
            //date = dat;
            POSRestaurant.Sale.NativeMethods.DOC_INFO_1 documentInfo;
            IntPtr printerHandle;
            byte[] managedData = null;
            string addrs = "";
            if (ordertype == "Delivery")
            {
                addrs = "Address:\n";
                //addrs = addrs + getaddress(sid);
            }
            managedData = GetDocument(sid, cashier, cusid, mop, addrs, dtr, r, c, total, dis, gst, type, ordertype,invoiceno);
            documentInfo = new POSRestaurant.Sale.NativeMethods.DOC_INFO_1();
            documentInfo.pDataType = "RAW";
            documentInfo.pDocName = "Receipt";
            printerHandle = new IntPtr(0);
            if (POSRestaurant.Sale.NativeMethods.OpenPrinter(printerName.Normalize(), out printerHandle, IntPtr.Zero))
            {
                if (POSRestaurant.Sale.NativeMethods.StartDocPrinter(printerHandle, 1, documentInfo))
                {
                    int bytesWritten;

                    IntPtr unmanagedData;

                    //managedData = document;
                    unmanagedData = Marshal.AllocCoTaskMem(managedData.Length);
                    Marshal.Copy(managedData, 0, unmanagedData, managedData.Length);

                    if (POSRestaurant.Sale.NativeMethods.StartPagePrinter(printerHandle))
                    {
                        POSRestaurant.Sale.NativeMethods.WritePrinter(
                            printerHandle,
                            unmanagedData,
                            managedData.Length,
                            out bytesWritten);
                        POSRestaurant.Sale.NativeMethods.EndPagePrinter(printerHandle);
                    }
                    else
                    {
                        throw new Win32Exception();
                    }

                    Marshal.FreeCoTaskMem(unmanagedData);

                    POSRestaurant.Sale.NativeMethods.EndDocPrinter(printerHandle);
                }
                else
                {
                    throw new Win32Exception();
                }

                POSRestaurant.Sale.NativeMethods.ClosePrinter(printerHandle);
            }
            else
            {
                throw new Win32Exception();
            }

        }
        public byte[] GetDocument(string sid, string cashier, string cusid, string mop, string delivery, DataTable dtr, string r, string c, string total, string dis, string gst, string type, string ordertype,string invoiceno)
        {
            var val = new MemoryStream();
            using (var ms = new MemoryStream())
            using (var bw = new BinaryWriter(ms))
            {
                // Reset the printer bws (NV images are not cleared)
                bw.Write(AsciiControlChars.Escape);
                bw.Write('@');
                // Render the logo
                //RenderLogo(bw);
                PrintReceipt(bw, sid, cashier, cusid, mop, delivery, dtr, r, c, total, dis, gst, ordertype,invoiceno);
                // Feed 3 vertical motion units and cut the paper with a 1 point cut
                bw.Write(AsciiControlChars.GroupSeparator);
                bw.Write('V');
                bw.Write((byte)66);
                bw.Write((byte)3);

                bw.Flush();
                val = new MemoryStream();
                return ms.ToArray();
                //val = ms.ToArray();
            }

        }
        public byte[] GetDocumentkitchn(string sid, string cashier, string cusid, string mop, string delivery, DataTable dtr, string r, string c, string total, string dis, string kdsid, string type, string ordertype1, DataTable dtktchn, string ordertype,string printtype,string invoiceno)
        {
            var val = new MemoryStream();
            using (var ms = new MemoryStream())
            using (var bw = new BinaryWriter(ms))
            {
                // Reset the printer bws (NV images are not cleared)
                bw.Write(AsciiControlChars.Escape);
                bw.Write('@');
                // Render the logo
                //RenderLogo(bw);
                if (type == "kot")
                {
                    PrintReceiptkitchen(bw, sid, cashier, cusid, mop, delivery, dtr, r, c, total, dis, kdsid, dtktchn, ordertype, printtype,invoiceno);
                }

                // Feed 3 vertical motion units and cut the paper with a 1 point cut
                bw.Write(AsciiControlChars.GroupSeparator);
                bw.Write('V');
                bw.Write((byte)66);
                bw.Write((byte)3);

                bw.Flush();
                val = new MemoryStream();
                return ms.ToArray();
                //val = ms.ToArray();
            }

        }

        private void PrintReceiptkitchen(BinaryWriter bw, string sid, string cashier, string cusid, string mop, string delivery, DataTable dtr, string r, string c, string total, string dis, string kds, DataTable dtktchn, string ordertype, string printtype,string invoiceno)
        {
            getcompany();

            string kdsid = "";
            int count = 0;
            dtr = new DataTable();
            if (printtype == "main kot")
            {
                dtr = getAllOrderskitchenmainkot(sid, dtktchn);
            }
            else
            {
                dtr = getAllOrderskitchen(sid, dtktchn,kds);
            }
            bool printchk = false;
            if (dtr.Rows.Count > 0)
            {
                foreach (DataRow dr in dtr.Rows)
                {

                    if (dr["kds"].ToString() == kds || dr["kds2"].ToString() == kds)
                    {
                        printchk = true;

                    }
                }
            }
            if (printchk == false)
            {
                return;
            }
            if (ordertype == "Dine In")
            {
                bw.LargeText("    Table No : " + cusid);
            }
            else
            {

                bw.LargeText("    Customer : " + cusid);
            }
            int length = getlinelength("line", "kot");
            string print = "", space = "";
            for (int i = 0; i < length; i++)
            {
                print = print + "-";
            }
            bw.NormalFont(print);
            if (printtype == "main kot")
            {
                bw.High("          Main KOT   ");
            }
            else
            {
                bw.High("  " + cashier + " , " + ordertype + "  Order");
            }
           
            
            
            length = getlinelength("space", "kot");
            for (int i = 0; i < length; i++)
            {
                space = space + " ";
            }
            string itmtitle = "Item Name";
            for (int i = itmtitle.Length; i < space.Length + 1; i++)
            {
                itmtitle += " ";
            }
            bw.NormalFont(print);
            //bw.FeedLines(1);
            if (invoiceno.Trim().Length > 0)
            {
                bw.High("Bill #: " + invoiceno.ToString());
            }
            else
            {
                bw.High("Bill #: " + sid.ToString());
            }
            
            bw.High("Date: " + Convert.ToDateTime(date).ToString("dd-MM-yyy") + DateTime.Now.ToString("HH:mm tt"));
           
            bw.High("Terminal : " + System.Environment.MachineName.ToString());
            //bw.FeedLines(1);
            bw.NormalFont(print);

            bw.High("Qty  Status   Item Name");
            //bw.High(itmtitle + "Qty  Status   Item Name");
            bw.NormalFont(print);
            foreach (DataRow dr in dtr.Rows)
            {
                try
                {
                    if (printtype == "main kot")
                    {
                        string qnty = "";
                        qnty = dr["Qty"].ToString();
                        string tmp = qnty;
                        if (tmp == "")
                        {
                            tmp = "1";
                        }
                        float qty = float.Parse(tmp);
                        string name = dr["name"].ToString();
                        string subnm = "";
                        if (name.Length > space.Length)
                        {
                            subnm = name.Substring(space.Length);
                            name = name.Substring(0, space.Length);
                            for (int i = name.Length; i < space.Length + 1; i++)
                            {
                                name += " ";
                            }

                        }
                        else
                        {

                            for (int i = name.Length; i < space.Length + 1; i++)
                            {
                                name += " ";
                            }

                        }
                        string qtyy = qty.ToString();
                        for (int i = qtyy.Length; i < 3; i++)
                        {
                            qtyy = " " + qtyy;
                        }
                        bw.High(qtyy.ToString() + "  " + dr["status"].ToString() + "   " + name);//"Garlic bread           2   100     200");
                        if (subnm.Length > 0)
                        {
                            bw.NormalFont(subnm);
                        }
                    }
                    else
                    {
                        if (dr["kds"].ToString() == kds || dr["kds2"].ToString() == kds)
                        {

                            string qnty = "";
                            qnty = dr["Qty"].ToString();
                            string tmp = qnty;
                            if (tmp == "")
                            {
                                tmp = "1";
                            }
                            float qty = float.Parse(tmp);
                            string name = dr["name"].ToString();
                            string subnm = "";
                            if (name.Length > space.Length)
                            {
                                subnm = name.Substring(space.Length);
                                name = name.Substring(0, space.Length);
                                for (int i = name.Length; i < space.Length + 1; i++)
                                {
                                    name += " ";
                                }

                            }
                            else
                            {

                                for (int i = name.Length; i < space.Length + 1; i++)
                                {
                                    name += " ";
                                }

                            }
                            string qtyy = qty.ToString();
                            for (int i = qtyy.Length; i < 3; i++)
                            {
                                qtyy = " " + qtyy;
                            }
                            bw.High(qtyy.ToString() + "  " + dr["status"].ToString() + "   " + name);//"Garlic bread           2   100     200");
                            if (subnm.Length > 0)
                            {
                                bw.NormalFont(subnm);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
            if (kitchenbellkot == "Disabled")
            {
            }
            else
            {
                bw.NormalFont(System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                bw.NormalFont(System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                bw.NormalFont(System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
            }
            bw.NormalFont(print);
            bw.NormalFont(".");
            bw.NormalFont(".");

        }
        public DataTable getAllOrderskitchenmainkot(string siid, DataTable dtref)
        {
            DataTable dtrptkchn = new DataTable();
            dtrptkchn.Columns.Add("name", typeof(string));
            dtrptkchn.Columns.Add("qty", typeof(string));
            dtrptkchn.Columns.Add("status", typeof(string));
            dtrptkchn.Columns.Add("kds", typeof(string));
            dtrptkchn.Columns.Add("kds2", typeof(string));
            foreach (DataRow dr in dtref.Rows)
            {
                string kdsid2 = "0";
                try
                {
                    dtrptkchn.Rows.Add(dr["Item"].ToString(),dr["Qty"].ToString(), "", dr["KDSId"].ToString(), kdsid2);

                }
                catch (Exception ex)
                {
                }
            }

            return dtrptkchn;
        }
        public DataTable getAllOrderskitchen(string siid, DataTable dtref,string kdsid)
        {
            DataTable dtrptkchn = new DataTable();
            dtrptkchn.Columns.Add("name", typeof(string));
            dtrptkchn.Columns.Add("qty", typeof(string));
            dtrptkchn.Columns.Add("status", typeof(string));
            dtrptkchn.Columns.Add("kds", typeof(string));
            dtrptkchn.Columns.Add("kds2", typeof(string));
            foreach (DataRow dr in dtref.Rows)
            {
                string kdsid2 = "0";
                try
                {
                    if (dr["Id"].ToString() != string.Empty && dr["SaleType"].ToString() == "New" && dr["KDSId"].ToString() == kdsid)
                    {


                        string id = dr["Id"].ToString();
                        string q = "SELECT kdsid2 from menuitem where id='" + id + "'";
                        try
                        {
                            if (dr["runtimeflavourid"].ToString() == "" || dr["runtimeflavourid"].ToString() == "0")
                            {

                            }
                            else
                            {
                                q = "SELECT kdsid2 from runtimemodifier where id='" + dr["runtimeflavourid"].ToString() + "'";

                            }
                            DataSet dsgrp = new DataSet();
                            dsgrp = objCore.funGetDataSet(q);
                            if (dsgrp.Tables[0].Rows.Count > 0)
                            {
                                kdsid2 = dsgrp.Tables[0].Rows[0][0].ToString();
                            }
                        }
                        catch (Exception ex)
                        {
                            
                        }
                        {
                            // string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                            //if (temp.ToLower() == "print" && Convert.ToInt32(dsgrp.Tables[0].Rows[0][1].ToString()) > 1)
                            {
                                int oldqty = 0, newqty = 0; ;
                                double sdid = 0;
                                try
                                {
                                    sdid = Convert.ToDouble(dr["SaleDetailid"].ToString());
                                }
                                catch (Exception)
                                {

                                }
                                if (sdid > 0)
                                {
                                    double discount = 0, gstt = 0, scarges = 0;
                                    try
                                    {
                                        string val = dr["Price"].ToString();
                                        if (val == "")
                                        {
                                            val = "0";
                                        }


                                        double price = Convert.ToDouble(val);

                                        scarges = (price * servicecharhes) / 100;
                                        scarges = Math.Round(scarges, 2);
                                        val = txtdiscount.Text;
                                        if (val == "")
                                        {
                                            val = "0";
                                        }
                                        string ordertyppe = "";
                                        if (saleid > 0)
                                        {
                                            ordertyppe = getordertype();
                                        }
                                        else
                                        {
                                            ordertyppe = newordertype;
                                        }
                                        if (ordertyppe == "")
                                        {
                                            ordertyppe = newordertype;
                                        }
                                        if (ordertyppe == "Take Away")
                                        {
                                            scarges = 0;
                                        }
                                        double dis = Convert.ToDouble(val);
                                        if (dis > 0 && price > 0)
                                        {
                                            discount = (price * dis) / 100;
                                            discount = Math.Round(discount, 2);
                                        }


                                        val = lblgst.Text;
                                        if (val == "")
                                        {
                                            val = "0";
                                        }
                                        gstt = Convert.ToDouble(gst);
                                        if (applydiscount() == "before")
                                        {

                                            if (gstt > 0 && price > 0)
                                            {
                                                gstt = ((price + scarges) * gstt) / 100;
                                                gstt = Math.Round(gstt, 2);
                                            }
                                            else
                                            {
                                                gstt = 0;
                                            }
                                        }
                                        else
                                        {
                                            if (gstt > 0 && price > 0)
                                            {
                                                gstt = ((price - discount) * gstt) / 100;
                                                gstt = Math.Round(gstt, 2);
                                            }
                                            else
                                            {
                                                gstt = 0;
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    double inddis = 0;
                                    try
                                    {
                                        inddis = getdiscountinddetails(dr["SaleDetailid"].ToString());
                                    }
                                    catch (Exception)
                                    {

                                    }
                                    q = "select quantity from saledetails where id='" + sdid + "'";
                                    DataSet dsdet=new DataSet();
                                    dsdet=objCore.funGetDataSet(q);
                                    string temp = dsdet.Tables[0].Rows[0]["Quantity"].ToString();
                                    if (temp == "")
                                    {
                                        temp = "0";
                                    }
                                    oldqty = Convert.ToInt32(temp);

                                    q = "update saledetails set Quantity='" + dr["Qty"].ToString() + "',Price='" + dr["Price"].ToString() + "', Itemdiscount= '" + (discount + inddis) + "', ItemdiscountPerc='" + txtdiscount.Text + "', ItemGst='" + gstt + "', ItemGstPerc='" + gst + "'  where id='" + dr["SaleDetailid"].ToString() + "'";
                                    objCore.executeQuery(q);
                                    recalsale(saleid.ToString(), "no");
                                }

                                string pc = dr["Price"].ToString();
                                string qnty = "";
                                qnty = dr["Qty"].ToString();
                                string tmp = qnty;
                                if (tmp == "")
                                {
                                    tmp = "1";
                                }
                                int qty = Convert.ToInt32(tmp);
                                qty = qty - oldqty;
                                tmp = pc;
                                if (tmp == "")
                                {
                                    tmp = "0";
                                }
                                double sprice = Convert.ToDouble(tmp);
                                double singleprice = 0;
                                singleprice = sprice / qty;
                                if (qty > 0)
                                {
                                    dtrptkchn.Rows.Add(dr["Item"].ToString(), qty, "New", dr["KDSId"].ToString(), kdsid2);
                                }
                            }
                        }

                    }
                    else
                    {
                        string id = dr["Id"].ToString();
                        string q = "SELECT dbo.MenuGroup.type, dbo.MenuItem.KDSId, dbo.MenuItem.KDSId2 FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                        DataSet dsgrp = new DataSet();
                        dsgrp = objCore.funGetDataSet(q);
                        if (dsgrp.Tables[0].Rows.Count > 0)
                        {
                            dtrptkchn.Rows.Add(dr["Name"].ToString(), dr["qty"].ToString(), "Void", dsgrp.Tables[0].Rows[0]["KDSId"].ToString(), dsgrp.Tables[0].Rows[0]["KDSId2"].ToString());
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }
            
            return dtrptkchn;
        }
        public string gettime(string id)
        {
            string time = "";
            DataSet dstime = new DataSet();
            try
            {
                string q = "select time from sale where id='" + id + "'";

                dstime = objCore.funGetDataSet(q);
                if (dstime.Tables[0].Rows.Count > 0)
                {
                    time = Convert.ToDateTime(dstime.Tables[0].Rows[0][0].ToString()).ToString("HH:mm tt");
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                dstime.Dispose();
            }
            return time;
        }
        //public int getlinelength(string type, string p)
        //{
        //    int length = 0;
        //    try
        //    {
        //        DataSet dsl = new DataSet();
        //        string q = "select * from linelength where type='" + type + "' and printr='" + p + "'";
        //        dsl = objCore.funGetDataSet(q);
        //        if (dsl.Tables[0].Rows.Count > 0)
        //        {
        //            string temp = dsl.Tables[0].Rows[0]["length"].ToString();
        //            if (temp == "")
        //            {
        //                temp = "37";
        //            }
        //            length = Convert.ToInt32(temp);
        //        }
        //        else
        //        {
        //            length = 37;
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //    return length;
        //}
        private void PrintReceipt(BinaryWriter bw, string sid, string cashier, string cusid, string mop, string delivery, DataTable dtr, string r, string c, string total, string dis, string gst, string ordertype,string invoiceno)
        {
            getcompany();
            string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
            string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
            string info = "Your Bill No is";
            string time = "";
            string spec = sid;
            if (invoiceno.Length > 0)
            {
                spec = invoiceno;
            }

            time = " " + gettime(sid);
            int length = getlinelength("name", "generic");
            string namee = dscompany.Tables[0].Rows[0]["Name"].ToString();
            for (int i = 0; i < length; i++)
            {
                namee = " " + namee;


            }
            length = getlinelength("billno", "generic");

            for (int i = 0; i < length; i++)
            {

                info = " " + info;
                spec = " " + spec;
            }
            //namee = namee.PadLeft(length);
            length = getlinelength("address", "generic");
            string addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
            for (int i = 0; i < length; i++)
            {
                addrs = " " + addrs;
            }
            //addrs = addrs.PadLeft(length);
            string phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
            length = getlinelength("phone", "generic");
            for (int i = 0; i < length; i++)
            {
                phone = " " + phone;
            }
            // phone = phone.PadLeft(length);
            length = getlinelength("title", "generic");

            string title = "Sale Slip";
            for (int i = 0; i < length; i++)
            {
                title = " " + title;
            }
            bw.LargeText(namee);
            bw.NormalFont(addrs);
            bw.NormalFont(phone);
            //bw.FeedLines(1);
            length = getlinelength("line", "generic");
            string print = "", space = "";
            for (int i = 0; i < length; i++)
            {
                print = print + "-";
            }
            length = getlinelength("space", "generic");
            for (int i = 0; i < length; i++)
            {
                space = space + " ";
            }
            string itmtitle = "Item Name";
            for (int i = itmtitle.Length; i < space.Length + 1; i++)
            {
                itmtitle += " ";
            }
            bw.NormalFont(title);
            bw.NormalFont(print);
            //bw.FeedLines(1);

            bw.NormalFont(info);
            bw.High("   " + spec.ToString());
            if (customermsg.Length > 0)
            {
                bw.High(customermsg);
            }
            if (customermsg2.Length > 0)
            {
                bw.High(customermsg2);
            }
            bw.NormalFont(print);
            bw.NormalFont("Cashier: " + cashier);
            bw.NormalFont("MOP: " + mop + " ,    Date: " + Convert.ToDateTime(date).ToString("dd-MM-yyy") + time);
            // bw.NormalFont("Date: " +Convert.ToDateTime(date).ToString("dd-MM-yyy")+ DateTime.Now.ToString("HH:mm tt"));
            //if (cusid.Length > 0)
            //{
            //    cusid = ", " + cusid;
            //}
            bw.NormalFont("Order Type :" + ordertype);

            string cusid1 = "";
            if (ordertype == "Take Away")
            {
                cusid = getcustomerid(sid);
                cusid = "Customer Id: " + cusid;
            }
            if (ordertype == "Dine In")
            {
                string tblno = gettbleno(sid);
                cusid = "Table No:" + tblno;
            }
            if (ordertype == "Delivery")
            {
                string tblno = "";// getdelivery(billno);
                tblno = getdeliveryinfo(sid);
                cusid = tblno;
            }


            //bw.NormalFont(cusid);
            // bw.NormalFont("Order No: " + getorderno(sid));
            //bw.NormalFont(delivery);
            //bw.FeedLines(1);
            bw.NormalFont("Customer: " + cusid);
            bw.NormalFont(print);
            bw.NormalFont(itmtitle + " Qty   Price   Total");
            bw.NormalFont(print);
            foreach (DataRow dr in dtr.Rows)
            {
                try
                {
                    //if (dr["Id"].ToString() != string.Empty)
                    {
                        string pc = dr["Price"].ToString();
                        string qnty = "";
                        qnty = dr["Qty"].ToString();
                        string tmp = qnty;
                        if (tmp == "")
                        {
                            tmp = "1";
                        }
                        float qty = float.Parse(tmp);
                        tmp = pc;
                        if (tmp == "")
                        {
                            tmp = "0";
                        }
                        double sprice = Convert.ToDouble(tmp);
                        double singleprice = 0;
                        int lnt = 0;
                        if (qty >= 1)
                        {
                            singleprice = sprice / qty;
                        }
                        else
                        {
                            singleprice = sprice;
                        }
                        string name = dr["Item"].ToString();
                        string subnm = "";
                        if (name.Length > space.Length)
                        {
                            subnm = name.Substring(space.Length);
                            name = name.Substring(0, space.Length);
                            for (int i = name.Length; i < space.Length + 1; i++)
                            {
                                name += " ";
                            }
                        }
                        else
                        {
                            lnt = name.Length;
                            for (int i = name.Length; i < space.Length + 1; i++)
                            {
                                name += " ";
                            }
                        }
                        string qtyy = qty.ToString();
                        lnt = qtyy.Length;
                        for (int i = qtyy.Length; i < 3; i++)
                        {
                            qtyy = " " + qtyy;
                        }

                        string spc = singleprice.ToString();
                        if (spc.Contains("."))
                        {
                            int strt = spc.IndexOf(".");
                            int count = spc.Substring(strt + 1).Length;
                            if (count < 2)
                            {
                                spc = spc + "0";
                            }
                        }
                        else
                        {
                            spc = spc + ".00";
                        }
                        lnt = spc.Length;
                        for (int i = spc.Length; i < 7; i++)
                        {
                            spc = " " + spc;
                        }
                        //spc = spc + "  ";
                        string spct = sprice.ToString();
                        if (spct.Contains("."))
                        {
                            int strt = spct.IndexOf(".");
                            int count = spct.Substring(strt + 1).Length;
                            if (count < 2)
                            {
                                spct = spct + "0";
                            }
                        }
                        else
                        {
                            spct = spct + ".00";
                        }
                        lnt = spct.Length;
                        for (int i = spct.Length; i < 7; i++)
                        {
                            spct = " " + spct;
                        }
                        bw.NormalFont(name + " " + qtyy.ToString() + " " + spc.ToString() + " " + spct.ToString());//"Garlic bread           2   100     200");
                        if (subnm.Length > 0)
                        {
                            bw.NormalFont(subnm);
                        }

                        string modifier = dr["MdId"].ToString();
                        if (modifier == "")
                        {
                            modifier = "0";
                        }
                        string rmodifier = dr["runtimeflavourid"].ToString();
                        if (rmodifier == "")
                        {
                            rmodifier = "0";
                        }
                        if (modifier == "0" && rmodifier == "0")
                        {
                            try
                            {
                                string q = "SELECT        dbo.MenuItem.KDSId, dbo.MenuItem.Name,dbo.MenuItem.kdsid, dbo.Attachmenu1.Quantity FROM            dbo.Attachmenu1 INNER JOIN                         dbo.MenuItem ON dbo.Attachmenu1.attachmenuid = dbo.MenuItem.Id WHERE        (dbo.Attachmenu1.status = 'active') and dbo.Attachmenu1.menuitemid='" + dr["id"].ToString() + "'";
                                DataSet dsattach = new DataSet();
                                dsattach = objCore.funGetDataSet(q);
                                for (int j = 0; j < dsattach.Tables[0].Rows.Count; j++)
                                {
                                    name = dsattach.Tables[0].Rows[j]["Name"].ToString() + "(In Meal)";
                                    subnm = "";
                                    if (name.Length > space.Length)
                                    {
                                        subnm = name.Substring(space.Length);
                                        name = name.Substring(0, space.Length);
                                        for (int i = name.Length; i < space.Length + 1; i++)
                                        {
                                            name += " ";
                                        }
                                    }
                                    else
                                    {
                                        lnt = name.Length;
                                        for (int i = name.Length; i < space.Length + 1; i++)
                                        {
                                            name += " ";
                                        }
                                    }

                                    string attemp = dsattach.Tables[0].Rows[j]["Quantity"].ToString();
                                    if (attemp == "")
                                    {
                                        attemp = "0";
                                    }
                                    bw.NormalFont(name + "   " + (qty * Convert.ToInt32(attemp)).ToString());//"Garlic bread           2   100     200");
                                    if (subnm.Length > 0)
                                    {
                                        bw.NormalFont(subnm);
                                    }


                                }
                            }
                            catch (Exception e)
                            {


                            }
                        }


                    }
                }
                catch (Exception ex)
                {
                }
            }
            //bw.FeedLines(1);
            bw.NormalFont(print);

            for (int i = total.Length; i < 9; i++)
            {
                total = " " + total;
            }
            for (int i = dis.Length; i < 9; i++)
            {
                dis = " " + dis;
            }
            for (int i = gst.Length; i < 9; i++)
            {
                gst = " " + gst;
            }
            string recvd = r;
            for (int i = r.Length; i < 9; i++)
            {
                r = " " + r;
            }
            for (int i = c.Length; i < 9; i++)
            {
                c = " " + c;
            }
            length = getlinelength("space footer", "generic");
            space = "";
            for (int i = 0; i < length; i++)
            {
                space = space + " ";
            }
            string tender = (Convert.ToDouble(total) + Convert.ToDouble(gst) - Convert.ToDouble(dis)).ToString();
            for (int i = tender.Length; i < 9; i++)
            {
                tender = " " + tender;
            }
            string type = "Sub Total:  ";
            for (int i = type.Length; i < space.Length + 1; i++)
            {
                type += " ";
            }
            bw.NormalFont(type + total);
            type = "Discount:  ";
            for (int i = type.Length; i < space.Length + 1; i++)
            {
                type += " ";
            }
            bw.NormalFont(type + dis);
            string gtitle = gsttitle;
            if (gtitle == "")
            {
                gtitle = "Sales Tax";
            }
            type = gtitle + "  :(" + gstperc + "%)";
            for (int i = type.Length; i < space.Length + 1; i++)
            {
                type += " ";
            }
            try
            {
                if (Convert.ToDouble(gst) > 0)
                {
                    bw.NormalFont(type + gst);
                }
            }
            catch (Exception ex)
            {

            }
            bw.NormalFont(print);
            type = "Amount Tendered:";
            for (int i = type.Length; i < space.Length + 1; i++)
            {
                type += " ";
            }
            bw.NormalFont(type + tender);
            bw.NormalFont(print);
            if (recvd == "")
            {
                recvd = "0";
            }
            if (Convert.ToDouble(recvd) > 0)
            {
                type = "Cash Given:  ";
                for (int i = type.Length; i < space.Length + 1; i++)
                {
                    type += " ";
                }
                bw.NormalFont(type + r);
                type = "Change:  ";
                for (int i = type.Length; i < space.Length + 1; i++)
                {
                    type += " ";
                }
                bw.NormalFont(type + c);
                bw.NormalFont(print);
            }
            string note = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
            string subnote = "";
            //if (note.Length > 41)
            //{
            //    subnote = note.Substring(41);
            //    note = note.Substring(0, 42);


            //}
            bw.NormalFont(note);
            if (qrcode.Length > 0)
            {
                bw.NormalFont("Your Sales Tax Invoice No is");
                bw.NormalFont(qrcode);
            }
            bw.NormalFont(print);
            bw.NormalFont("Print Time :" + DateTime.Now.ToString("HH:mm tt"));
            try
            {
                bw.NormalFont("Powered By FAR TECH (PVT). Limited, 111-111-180");
                bw.NormalFont(".");
                bw.NormalFont(".");
            }
            catch (Exception ex)
            {


            }
            try
            {
                if (Convert.ToDouble(recvd) > 0)
                {
                    bw.NormalFont(System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                    // bw.NormalFont(subnote);
                    // bw.Finish();
                }
            }
            catch (Exception ex)
            {
                
                
            }
        }
        OPOSPOSPrinter printerthread;
        OPOSPOSPrinter printerthreadsale;
        bool isThreadRunningsalee = false;
        private void PrintReceiptThreading(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype)
        {
            isThreadRunning = true;

            this.Invoke(new MethodInvoker(delegate()
            {
                printerthread = new OPOSPOSPrinter();
            }));
            try
            {
                string pname = printername(ordertype);
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthread.Open(pname);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthread.ClaimDevice(7000);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthread.DeviceEnabled = true;
                }));



                if (printerthread.DeviceEnabled == true)
                {
                    getcompany();
                    string name = "", addrs = "", phone = "", wellcom = "";
                    try
                    {
                        name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                        addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                        phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                        wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    }
                    catch (Exception ex)
                    {


                    }
                    PrintReceiptHeader(printerthread, name, addrs, bill, phone, date, cashier, saletype, customer, ordertype, "");
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {
                            if (dr["Id"].ToString() != string.Empty)
                            {
                                string pc = dr["Price"].ToString();
                                string qnty = "";
                                qnty = dr["Qty"].ToString();
                                string tmp = qnty;
                                if (tmp == "")
                                {
                                    tmp = "1";
                                }
                                int qty = Convert.ToInt32(tmp);
                                tmp = pc;
                                if (tmp == "")
                                {
                                    tmp = "0";
                                }
                                double sprice = Convert.ToDouble(tmp);
                                double singleprice = 0;
                                singleprice = sprice / qty;
                                PrintLineItem(printerthread, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                    PrintReceiptFooter(printerthread, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype, Convert.ToDouble(net), ordertype);

                }
            }
            finally
            {
                DisconnectFromPrinter(printerthread);
            }
            isThreadRunning = false;
        }
        private void PrintReceiptThreadingsale(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype)
        {
            isThreadRunningsalee = true;

            this.Invoke(new MethodInvoker(delegate()
            {
                printerthreadsale = new OPOSPOSPrinter();
            }));
            try
            {
                string pname = printername(ordertype);
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadsale.Open(pname);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadsale.ClaimDevice(7000);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadsale.DeviceEnabled = true;
                }));



                if (printerthreadsale.DeviceEnabled == true)
                {
                    getcompany();
                    string name = "", addrs = "", phone = "", wellcom = "";
                    try
                    {
                        name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                        addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                        phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                        wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    }
                    catch (Exception ex)
                    {


                    }
                    PrintReceiptHeadersale(printerthreadsale, name, addrs, bill, phone, date, cashier, saletype, customer, ordertype);
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {
                            if (dr["Id"].ToString() != string.Empty)
                            {
                                string pc = dr["Price"].ToString();
                                string qnty = "";
                                qnty = dr["Qty"].ToString();
                                string tmp = qnty;
                                if (tmp == "")
                                {
                                    tmp = "1";
                                }
                                int qty = Convert.ToInt32(tmp);
                                tmp = pc;
                                if (tmp == "")
                                {
                                    tmp = "0";
                                }
                                double sprice = Convert.ToDouble(tmp);
                                double singleprice = 0;
                                singleprice = sprice / qty;
                                PrintLineItemsale(printerthreadsale, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                    PrintReceiptFooterSale(printerthreadsale, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype, Convert.ToDouble(net));

                }
            }
            finally
            {
                DisconnectFromPrinter(printerthreadsale);
            }
            isThreadRunningsalee = false;
        }

        private void PrintReceipt(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype, string invoiceno)
        {
            OPOSPOSPrinter printer = new OPOSPOSPrinter();
            try
            {
                string pname = "";
                if (ordertype == "Take Away" || ordertype == "Dine In" || ordertype == "Delivery")
                {
                    pname = printername("");
                }
                else
                {
                    pname = printername(ordertype);
                }
                printer.Open(pname);
                printer.ClaimDevice(7000);
                printer.DeviceEnabled = true;

                if (printer.DeviceEnabled == true)
                {
                    getcompany();
                    string name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                    string addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                    string phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                    string wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    PrintReceiptHeader(printer, name, addrs, bill, phone, date, cashier, saletype, customer, ordertype,invoiceno);
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {
                            if (dr["Id"].ToString() != string.Empty)
                            {
                                string pc = dr["Price"].ToString();
                                string qnty = "";
                                qnty = dr["Qty"].ToString();
                                string tmp = qnty;
                                if (tmp == "")
                                {
                                    tmp = "1";
                                }
                                int qty = Convert.ToInt32(tmp);
                                tmp = pc;
                                if (tmp == "")
                                {
                                    tmp = "0";
                                }
                                double sprice = Convert.ToDouble(tmp);
                                double singleprice = 0;
                                singleprice = sprice / qty;
                                PrintLineItem(printer, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                                string modifier = dr["MdId"].ToString();
                                if (modifier == "")
                                {
                                    modifier = "0";
                                }
                                string rmodifier = dr["runtimeflavourid"].ToString();
                                if (rmodifier == "")
                                {
                                    rmodifier = "0";
                                }
                                if (modifier == "0" && rmodifier == "0")
                                {
                                    try
                                    {
                                        string q = "SELECT        dbo.MenuItem.KDSId, dbo.MenuItem.Name,dbo.MenuItem.kdsid, dbo.Attachmenu1.Quantity FROM            dbo.Attachmenu1 INNER JOIN                         dbo.MenuItem ON dbo.Attachmenu1.attachmenuid = dbo.MenuItem.Id WHERE        (dbo.Attachmenu1.status = 'active') and dbo.Attachmenu1.menuitemid='" + dr["id"].ToString() + "'";
                                        DataSet dsattach = new DataSet();
                                        dsattach = objCore.funGetDataSet(q);
                                        for (int j = 0; j < dsattach.Tables[0].Rows.Count; j++)
                                        {
                                            string atname = "  " + dsattach.Tables[0].Rows[j]["Name"].ToString() + "(In Meal)";
                                            string attemp = dsattach.Tables[0].Rows[j]["Quantity"].ToString();
                                            if (attemp == "")
                                            {
                                                attemp = "0";
                                            }
                                            PrintLineItem(printer, atname, qty * Convert.ToInt32(attemp), 0);
                                        }
                                    }
                                    catch (Exception e)
                                    {


                                    }
                                }


                            }
                        }
                        catch (Exception ex)
                        {


                        }
                    }
                    if (gstperc == "")
                    {
                        gstperc = "0";
                    }
                    PrintReceiptFooter(printer, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype, Convert.ToDouble(net), ordertype);

                }
            }
            finally
            {
                DisconnectFromPrinter(printer);
            }
        }
        private void PrintReceiptkitchen(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype)
        {
            OPOSPOSPrinter printer = new OPOSPOSPrinter(); ;
            try
            {
                string pname = printername(ordertype);
                if (pname == "")
                {
                    pname = "PP Kitchen";
                }
                printer.Open(pname);
                //this.Invoke(() => label.Text = "Some Text");
                printer.ClaimDevice(7000);
                printer.DeviceEnabled = true;
                if (printer.DeviceEnabled == true)
                {
                    getcompany();
                    string name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                    string addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                    string phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                    string wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    PrintReceiptHeader(printer, name, addrs, bill, phone, date, cashier, ordertype, customer, ordertype,"");
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {
                            if (ordertype == "main")
                            {
                                if (dr["Id"].ToString() != string.Empty && dr["SaleType"].ToString() == "New")
                                {
                                    string id = dr["Id"].ToString();
                                    //string q = "SELECT dbo.MenuGroup.type FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                    //DataSet dsgrp = new DataSet();
                                    //dsgrp = objCore.funGetDataSet(q);
                                    //if (dsgrp.Tables[0].Rows.Count > 0)
                                    {
                                        //string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                                        //if (temp.ToLower() == "print")
                                        {
                                            string pc = dr["Price"].ToString();
                                            string qnty = "";
                                            qnty = dr["Qty"].ToString();
                                            string tmp = qnty;
                                            if (tmp == "")
                                            {
                                                tmp = "1";
                                            }
                                            int qty = Convert.ToInt32(tmp);
                                            tmp = pc;
                                            if (tmp == "")
                                            {
                                                tmp = "0";
                                            }
                                            double sprice = Convert.ToDouble(tmp);
                                            double singleprice = 0;
                                            singleprice = sprice / qty;
                                            PrintLineItem(printer, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                                        }
                                    }
                                }
                            }
                            else
                            {

                                if (dr["Id"].ToString() != string.Empty && dr["SaleType"].ToString() == "New")
                                {
                                    string id = dr["Id"].ToString();
                                    string q = "SELECT dbo.MenuGroup.type, dbo.MenuItem.KDSId FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                    DataSet dsgrp = new DataSet();
                                    dsgrp = objCore.funGetDataSet(q);
                                    if (dsgrp.Tables[0].Rows.Count > 0)
                                    {
                                        string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                                        if (temp.ToLower() == "print" && dsgrp.Tables[0].Rows[0][1].ToString() == "2")
                                        {
                                            string pc = dr["Price"].ToString();
                                            string qnty = "";
                                            qnty = dr["Qty"].ToString();
                                            string tmp = qnty;
                                            if (tmp == "")
                                            {
                                                tmp = "1";
                                            }
                                            int qty = Convert.ToInt32(tmp);
                                            tmp = pc;
                                            if (tmp == "")
                                            {
                                                tmp = "0";
                                            }
                                            double sprice = Convert.ToDouble(tmp);
                                            double singleprice = 0;
                                            singleprice = sprice / qty;
                                            PrintLineItem(printer, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                    PrintTextLine(printer, new string('=', printer.RecLineChars));
                    PrintTextLine(printer, String.Empty);
                    PrintTextLine(printer, String.Empty);
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, String.Empty);
                    //Print 'advance and cut' escape command.
                    printer.CutPaper(50);
                    if (ordertype == "main")
                    {

                    }
                    else
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        }
                    }
                    // PrintReceiptFooter(printer, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype);
                }
                else
                {
                    //DisconnectFromPrinter(printer);
                    //DialogResult dr = MessageBox.Show("Print sent to Kitchen failed. Do you want to resend it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    //if (dr == DialogResult.Yes)
                    //{
                    //    PrintReceiptkitchen(dtref, customer, date, cashier, received, change, bill, saletype, total, gst, dis, gstperc, disperc, net, ordertype);
                    //}
                }
            }
            finally
            {
                DisconnectFromPrinter(printer);
            }
        }
        OPOSPOSPrinter printerthreadkitchen;
        private void PrintReceiptkitchenrefund(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype)
        {
            OPOSPOSPrinter printer = new OPOSPOSPrinter(); ;
            try
            {
                string pname = printername(ordertype);
                if (pname == "")
                {
                    pname = "PP Kitchen";
                }
                printer.Open(pname);
                //this.Invoke(() => label.Text = "Some Text");
                printer.ClaimDevice(7000);
                printer.DeviceEnabled = true;
                if (printer.DeviceEnabled == true)
                {
                    getcompany();
                    string name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                    string addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                    string phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                    string wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    PrintReceiptHeader(printer, name, addrs, bill, phone, date, cashier, saletype, customer, ordertype,"");
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {

                            {


                                {
                                    string id = dr["Id"].ToString();
                                    string q = "SELECT dbo.MenuGroup.type, dbo.MenuItem.KDSId FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                    DataSet dsgrp = new DataSet();
                                    dsgrp = objCore.funGetDataSet(q);
                                    if (dsgrp.Tables[0].Rows.Count > 0)
                                    {
                                        string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                                        if (temp.ToLower() == "print" && dsgrp.Tables[0].Rows[0][1].ToString() == "2")
                                        {
                                            string pc = dr["Price"].ToString();
                                            string qnty = "";
                                            qnty = dr["Qty"].ToString();
                                            string tmp = qnty;
                                            if (tmp == "")
                                            {
                                                tmp = "1";
                                            }
                                            int qty = Convert.ToInt32(tmp);
                                            tmp = pc;
                                            if (tmp == "")
                                            {
                                                tmp = "0";
                                            }
                                            double sprice = Convert.ToDouble(tmp);
                                            double singleprice = 0;
                                            singleprice = sprice / qty;
                                            PrintLineItem(printer, dr["name"].ToString(), qty, Convert.ToDouble(singleprice));
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                    PrintTextLine(printer, new string('=', printer.RecLineChars));
                    PrintTextLine(printer, String.Empty);
                    PrintTextLine(printer, String.Empty);
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, ".");
                    PrintTextLine(printer, String.Empty);
                    //Print 'advance and cut' escape command.
                    printer.CutPaper(50);
                    if (ordertype == "main")
                    {

                    }
                    else
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        }
                    }
                    // PrintReceiptFooter(printer, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype);
                }
                else
                {
                    //DisconnectFromPrinter(printer);
                    //DialogResult dr = MessageBox.Show("Print sent to Kitchen failed. Do you want to resend it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    //if (dr == DialogResult.Yes)
                    //{
                    //    PrintReceiptkitchen(dtref, customer, date, cashier, received, change, bill, saletype, total, gst, dis, gstperc, disperc, net, ordertype);
                    //}
                }
            }
            finally
            {
                DisconnectFromPrinter(printer);
            }
        }
        protected string getkds(string id, string type, string no)
        {
            string kds = "";
            DataSet ds = new DataSet();
            string q = "";
            try
            {
                if (type == "menu")
                {
                    if (no == "1")
                    {
                        q = "select kdsid from menuitem where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }
                    if (no == "2")
                    {
                        q = "select kdsid2 from menuitem where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }

                }
                if (type == "rmid")
                {
                    if (no == "1")
                    {
                        q = "select kdsid from RUNTimemodifier where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }
                    if (no == "2")
                    {
                        q = "select kdsid2 from RUNTimemodifier where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }
                }
                if (type == "md")
                {
                    if (no == "1")
                    {
                        q = "select kdsid from Modifier where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }
                    if (no == "2")
                    {
                        q = "select kdsid2 from Modifier where id='" + id + "'";
                        ds = objCore.funGetDataSet(q);
                    }
                }
                if (ds.Tables[0].Rows.Count > 0)
                {
                    kds = ds.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (System.Exception ex)
            {

            }
            return kds;
        }
        protected DataTable dtkdss(string id, string type)
        {
            DataTable dtrptkchn = new DataTable();
            dtrptkchn.Columns.Add("kdsid", typeof(string));
            try
            {
                DataSet dsdetails = new DataSet();
                string q = "select * from saledetails where saleid='" + id + "'";
                if (type.ToLower() == "void")
                {
                    q = "select * from Saledetailsrefund where saleid='" + id + "'";
                }
                dsdetails = objCore.funGetDataSet(q);
                for (int i = 0; i < dsdetails.Tables[0].Rows.Count; i++)
                {
                    string name = "", status = "", kds = "", kds2 = "";
                    string menuid = dsdetails.Tables[0].Rows[i]["MenuItemId"].ToString();

                    string runtimeid = dsdetails.Tables[0].Rows[i]["RunTimeModifierId"].ToString();
                    string ModifierId = dsdetails.Tables[0].Rows[i]["ModifierId"].ToString();
                    string voidstatus = dsdetails.Tables[0].Rows[i]["Status"].ToString();
                    if (runtimeid == "")
                    {
                        runtimeid = "0";
                    }
                    if (ModifierId == "")
                    {
                        ModifierId = "0";
                    }
                    if (ModifierId != "0")
                    {
                        kds = getkds(ModifierId, "md", "1");
                        kds2 = getkds(ModifierId, "md", "2");
                    }
                    else if (runtimeid != "0")
                    {
                        kds = getkds(runtimeid, "rmid", "1");
                        kds2 = getkds(runtimeid, "rmid", "2");
                    }
                    else
                    {

                        kds = getkds(menuid, "menu", "1");
                        kds2 = getkds(menuid, "menu", "2");
                    }
                    bool chk = true;
                    try
                    {
                          if (Convert.ToInt32(kds.Trim()) > 1)
                        {
                            if (dtrptkchn.Rows.Count > 0)
                            {

                                for (int k = 0; k < dtrptkchn.Rows.Count; k++)
                                {
                                    if (dtrptkchn.Rows[k][0].ToString() == kds)
                                    {
                                        chk = false;
                                    }
                                }
                            }
                            if (chk == true)
                            {
                                dtrptkchn.Rows.Add(kds);
                                chk = false;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        
                    }
                    chk = true;
                    try
                    {
                        if (Convert.ToInt32(kds2.Trim()) > 1)
                        {
                            if (dtrptkchn.Rows.Count > 0)
                            {

                                for (int k = 0; k < dtrptkchn.Rows.Count; k++)
                                {
                                    if (dtrptkchn.Rows[k][0].ToString() == kds2)
                                    {
                                        chk = false;
                                    }
                                }
                            }
                            if (chk == true)
                            {
                                dtrptkchn.Rows.Add(kds2);
                                chk = false;
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        
                    }
                }
            }
            catch (Exception ex)
            {
                
            }
            return dtrptkchn;
        }
        protected string getkdsname(string id, string type)
        {
            DataSet dskds = new DataSet();
            string q = "";
            string val = "";
            if (type.ToLower() == "main kot")
            {
                try
                {

                    q = "select name from Printers where type='Main Kot'";
                    
                    dskds = objCore.funGetDataSet(q);
                    if (dskds.Tables[0].Rows.Count > 0)
                    {
                        val = dskds.Tables[0].Rows[0][0].ToString();
                        
                    }
                }
                catch (Exception ex)
                {


                }
            }
            else
            {
                try
                {
                    if (type == "name")
                    {
                        q = "select name,KitchenBell from kds where KDSid='" + id + "' and terminal='" + System.Environment.MachineName.ToString() + "'";
                    }
                    else
                    {
                        q = "select Printer,KitchenBell from kds where KDSid='" + id + "' and terminal='" + System.Environment.MachineName.ToString() + "'";
                    }
                    dskds = objCore.funGetDataSet(q);
                    if (dskds.Tables[0].Rows.Count > 0)
                    {
                        val = dskds.Tables[0].Rows[0][0].ToString();
                        kitchenbellkot = dskds.Tables[0].Rows[0][1].ToString();
                    }
                }
                catch (Exception ex)
                {


                }
                if (val == "")
                {
                    if (type == "name")
                    {
                        q = "select name,KitchenBell from kds where id='" + id + "'";
                    }
                    else
                    {
                        q = "select Printer,KitchenBell from kds where id='" + id + "'";
                    }
                    dskds = objCore.funGetDataSet(q);
                    if (dskds.Tables[0].Rows.Count > 0)
                    {
                        val = dskds.Tables[0].Rows[0][0].ToString();
                        kitchenbellkot = dskds.Tables[0].Rows[0][1].ToString();
                    }
                }
            }
            return val;
        }

        public void Printkitchen(string printerName, string sid, string cashier, string cusid, string mop, string kottype, DataTable dtr, string r, string c, string total, string dis, string gst, string type, DataTable dtktchn, string ordertype, string printype,string invoiceno)
        {
            try
            {
                
                int count = 0;
                string kdsid = "";
                DataTable dstemp = new DataTable();
                if (printype.ToLower() == "main kot")
                {
                    dstemp.Columns.Add("kdsid",typeof(string));
                    dstemp.Rows.Add("2");
                }
                else
                {
                    try
                    {
                        dstemp.Columns.Add("kdsid", typeof(string));

                        var distinctkdsNames = (from row in dtktchn.AsEnumerable().Where(x => x.Field<string>("SaleType") == "New" || x.Field<string>("SaleType") == "Void")
                                                select row.Field<string>("kdsid")).Distinct();

                        foreach (var kdid in distinctkdsNames)
                        {
                            dstemp.Rows.Add(kdid);
                        }
                    }
                    catch (Exception ex)
                    {
                        dstemp = dtkdss(sid, kottype);
                    }
                }              
                string q = "";
                // dstemp = objCore.funGetDataSet(q);
                foreach (DataRow dr in dstemp.Rows)
                {

                    //if (dr["kdsid"].ToString() == kdsid)
                    //{
                    //}
                    //else
                    {
                        kdsid = dr["kdsid"].ToString();
                        if (Convert.ToInt32(kdsid) > 1)
                        {
                            NativeMethods.DOC_INFO_1 documentInfo;
                            IntPtr printerHandle;
                            byte[] managedData = null;
                            string kitchenname = getkdsname(kdsid, "name");
                            if (printype.ToLower() == "main kot")
                            {
                                printerName = getkdsname(kdsid, "main kot");
                            }
                            else
                            {
                                printerName = getkdsname(kdsid, "printer");
                            }
                            managedData = GetDocumentkitchn(sid, kitchenname, cusid, mop, kottype, dtr, r, c, total, dis, kdsid, type, "", dtktchn, ordertype, printype, invoiceno);
                            documentInfo = new NativeMethods.DOC_INFO_1();
                            string documentname = "";
                            documentname = kitchenname + "-" + sid;
                            documentInfo.pDataType = "RAW";
                            documentInfo.pDocName = documentname;
                            printerHandle = new IntPtr(0);
                            if (NativeMethods.OpenPrinter(printerName.Normalize(), out printerHandle, IntPtr.Zero))
                            {
                                if (NativeMethods.StartDocPrinter(printerHandle, 1, documentInfo))
                                {
                                    int bytesWritten;

                                    IntPtr unmanagedData;

                                    //managedData = document;
                                    unmanagedData = Marshal.AllocCoTaskMem(managedData.Length);
                                    Marshal.Copy(managedData, 0, unmanagedData, managedData.Length);

                                    if (NativeMethods.StartPagePrinter(printerHandle))
                                    {
                                        NativeMethods.WritePrinter(
                                            printerHandle,
                                            unmanagedData,
                                            managedData.Length,
                                            out bytesWritten);
                                        NativeMethods.EndPagePrinter(printerHandle);
                                    }
                                    else
                                    {
                                        throw new Win32Exception();
                                    }

                                    Marshal.FreeCoTaskMem(unmanagedData);

                                    NativeMethods.EndDocPrinter(printerHandle);
                                }
                                else
                                {
                                    throw new Win32Exception();
                                }

                                NativeMethods.ClosePrinter(printerHandle);
                            }
                            else
                            {
                                // throw new Win32Exception();
                            }
                            // IsPrinterOk(documentname, 2000);
                            if (kotnotification == "")
                            {
                                if (checkprint("KOT Notification") == "Enabled")
                                {
                                    kotnotification = "Enabled";
                                }
                                else
                                {
                                    kotnotification = "Disabled";
                                }

                            }
                            if (kotnotification == "Enabled")
                            {
                                Thread salethreadkitchen = new Thread(() => IsPrinterOk(documentname, 2000));
                                salethreadkitchen.IsBackground = true;
                                salethreadkitchen.Start();
                            }
                            //if (!IsPrinterOk(documentname, 2000))
                            //{
                            //    MessageBox.Show("Kitchen Print Failed");
                            //}
                        }
                        count++;
                    }


                    //System.Threading.Tasks.Task.Run(() =>
                    //{
                    //    if (!IsPrinterOk(printerName, 2000))
                    //    {
                    //        // failed printing, do something...
                    //    }
                    //});
                }
            }
            catch (Exception ex)
            {

             //   MessageBox.Show(ex.Message);
            }


        }
        public static string kotnotification = "";
        private void IsPrinterOk(string name, int checkTimeInMillisec)
        {           
            
            System.Collections.IList value = null;
           // do
            {
                //checkTimeInMillisec should be between 2000 and 5000
                System.Threading.Thread.Sleep(checkTimeInMillisec);
                // or use Timer with Threading.Monitor instead of thread sleep

                using (System.Management.ManagementObjectSearcher searcher = new System.Management.ManagementObjectSearcher("SELECT * FROM Win32_PrintJob WHERE Document = '" + name + "'"))
                {
                    value = null;

                    if (searcher.Get().Count == 0) // Number of pending document.
                        
                        return;  //return because we haven't got any pending document.
                    else
                    {
                        foreach (System.Management.ManagementObject printer in searcher.Get())
                        {
                            string nameww = printer["Document"].ToString();
                            value = printer.Properties.Cast<System.Management.PropertyData>().Where(p => p.Name.Equals("Status")).Select(p => p.Value).ToList();
                            break;
                        }
                    }
                }
            }
            MessageBox.Show(name + "  Kitchen Print Failed");
            //while (value.Contains("Printing") || value.Contains("UNKNOWN") || value.Contains("OK"));
            //if (value.Contains("Error"))
            //{
               
            //}
            //return value.Contains("Error") ? false : true;
        }
        private void PrintReceiptkitchenThread(DataTable dtref, string customer, string date, string cashier, double received, double change, string bill, string saletype, string total, string gst, string dis, string gstperc, string disperc, string net, string ordertype)
        {
            isThreadRunningkitchen = true;

            this.Invoke(new MethodInvoker(delegate()
            {
                printerthreadkitchen = new OPOSPOSPrinter();
            }));
            try
            {
                string pname = printername(ordertype);
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadkitchen.Open(pname);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadkitchen.ClaimDevice(7000);
                }));
                this.Invoke(new MethodInvoker(delegate()
                {
                    printerthreadkitchen.DeviceEnabled = true;
                }));

                if (printerthreadkitchen.DeviceEnabled == true)
                {
                    getcompany();
                    string name = dscompany.Tables[0].Rows[0]["Name"].ToString();
                    string addrs = dscompany.Tables[0].Rows[0]["Address"].ToString();
                    string phone = dscompany.Tables[0].Rows[0]["Phone"].ToString();
                    string wellcom = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                    PrintReceiptHeaderkitchen(printerthreadkitchen, name, addrs, bill, phone, date, cashier, ordertype, customer, ordertype);
                    foreach (DataRow dr in dtref.Rows)
                    {
                        try
                        {
                            if (ordertype == "main")
                            {
                                if (dr["Id"].ToString() != string.Empty && dr["SaleType"].ToString() == "New")
                                {
                                    string id = dr["Id"].ToString();
                                    //string q = "SELECT dbo.MenuGroup.type FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                    //DataSet dsgrp = new DataSet();
                                    //dsgrp = objCore.funGetDataSet(q);
                                    //if (dsgrp.Tables[0].Rows.Count > 0)
                                    {
                                        //string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                                        //if (temp.ToLower() == "print")
                                        {
                                            string pc = dr["Price"].ToString();
                                            string qnty = "";
                                            qnty = dr["Qty"].ToString();
                                            string tmp = qnty;
                                            if (tmp == "")
                                            {
                                                tmp = "1";
                                            }
                                            int qty = Convert.ToInt32(tmp);
                                            tmp = pc;
                                            if (tmp == "")
                                            {
                                                tmp = "0";
                                            }
                                            double sprice = Convert.ToDouble(tmp);
                                            double singleprice = 0;
                                            singleprice = sprice / qty;
                                            PrintLineItemKitchen(printerthreadkitchen, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                                        }
                                    }
                                }
                            }
                            else
                            {

                                if (dr["Id"].ToString() != string.Empty && dr["SaleType"].ToString() == "New")
                                {
                                    string id = dr["Id"].ToString();
                                    string q = "SELECT dbo.MenuGroup.type, dbo.MenuItem.KDSId FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                    DataSet dsgrp = new DataSet();
                                    dsgrp = objCore.funGetDataSet(q);
                                    if (dsgrp.Tables[0].Rows.Count > 0)
                                    {
                                        string temp = dsgrp.Tables[0].Rows[0][0].ToString();
                                        if (temp.ToLower() == "print" && dsgrp.Tables[0].Rows[0][1].ToString() == "2")
                                        {
                                            string pc = dr["Price"].ToString();
                                            string qnty = "";
                                            qnty = dr["Qty"].ToString();
                                            string tmp = qnty;
                                            if (tmp == "")
                                            {
                                                tmp = "1";
                                            }
                                            int qty = Convert.ToInt32(tmp);
                                            tmp = pc;
                                            if (tmp == "")
                                            {
                                                tmp = "0";
                                            }
                                            double sprice = Convert.ToDouble(tmp);
                                            double singleprice = 0;
                                            singleprice = sprice / qty;
                                            PrintLineItemKitchen(printerthreadkitchen, dr["Item"].ToString(), qty, Convert.ToDouble(singleprice));
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                    PrintTextLineKitchen(printerthreadkitchen, new string('=', printerthreadkitchen.RecLineChars));
                    PrintTextLineKitchen(printerthreadkitchen, String.Empty);
                    PrintTextLineKitchen(printerthreadkitchen, String.Empty);
                    //Print 'advance and cut' escape command.
                    printerthreadkitchen.CutPaper(50);
                    if (ordertype == "main")
                    {

                    }
                    else
                    {
                        for (int i = 0; i < 2; i++)
                        {
                            printerthreadkitchen.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        }
                    }
                    // PrintReceiptFooter(printer, Convert.ToDouble(total), Convert.ToDouble(gst), Convert.ToDouble(dis), wellcom, received, change, Convert.ToDouble(disperc), Convert.ToDouble(gstperc), saletype);
                }
                else
                {
                    DisconnectFromPrinter(printerthreadkitchen);
                    DialogResult dr = MessageBox.Show("Print sent to Kitchen failed. Do you want to resend it?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dr == DialogResult.Yes)
                    {
                        if (threading().ToLower() == "yes")
                        {
                            //OPOSPOSPrinter printer = new OPOSPOSPrinter();   


                            Thread salethreadkitchen;
                            salethreadkitchen = new Thread(() => PrintReceiptkitchenThread(dtref, cname, date, cashr, Convert.ToDouble(received), Convert.ToDouble(change), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net, ordertype));
                            salethreadkitchen.IsBackground = true;
                            salethreadkitchen.Start();

                        }
                        else
                        {
                            PrintReceiptkitchen(dtref, customer, date, cashier, received, change, bill, saletype, total, gst, dis, gstperc, disperc, net, ordertype);
                        }
                    }
                }
            }
            finally
            {
                DisconnectFromPrinter(printerthreadkitchen);
            }
            isThreadRunningkitchen = false;
        }
        private void DisconnectFromPrinter(OPOSPOSPrinter printer)
        {
            try
            {
                printer.ReleaseDevice();
                printer.Close();
            }
            catch (Exception ex)
            {


            }
        }

        private void ConnectToPrinter(OPOSPOSPrinter printer)
        {
            try
            {
                //printer.Open();
                //printer.Claim(10000);
                //printer.DeviceEnabled = true;
            }
            catch (Exception ex)
            {

                MessageBox.Show("Printer not connected");
            }
        }
        public string getnetval = "0";
        public string getnetvalue()
        {
            string val = getnetval;
            return val;
        }

        private void PrintReceiptFooter(OPOSPOSPrinter printer, double subTotal, double tax, double discount, string footerText, double received, double change, double disp, double gstp, string type, double net, string otype)
        {
            try
            {
                int length1 = getlinelength("space footer", "receipt");
                string space = "";
                for (int i = 0; i < length1; i++)
                {
                    space = space + " ";
                }


                string offSetString = new string(' ', printer.RecLineChars / 2);
                double servc = 0;
                if (servicecharhes > 0)
                {
                    try
                    {
                        servc = Convert.ToDouble(txtservice.Text);
                    }
                    catch (Exception ex)
                    {


                    }
                }
                PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                string text = "Total Excluding Taxes:";
                for (int i = 0; i < space.Length + 1; i++)
                {
                    text += " ";
                }
                string sub = "";
                for (int i = subTotal.ToString().Length; i < 9; i++)
                {
                    sub = " " + sub;
                }
                if (gstp > 0)
                {
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(subTotal).ToString("#0.00")));
                }
                //  PrintTextLine(printer, String.Format("Total Excluding Taxes          {0}", subTotal.ToString("#0.00")));
                if (servicecharhes > 0)
                {
                    length1 = getlinelength("service", "receipt");
                    string space1 = "";
                    for (int i = 0; i < length1; i++)
                    {
                        space1 = space1 + " ";
                    }


                    text = "Service Charges (" + servicecharhes + "%):";
                    for (int i = 0; i < space1.Length + 1; i++)
                    {
                        text += " ";
                    }
                    sub = "";
                    for (int i = servc.ToString().Length; i < 9; i++)
                    {
                        sub = " " + sub;
                    }
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(servc).ToString("#0.00")));

                    // PrintTextLine(printer, String.Format("Dine In (" + servicecharhes + "%)                    {0}", servc.ToString("#0.00")));
                }
                if (gstp > 0)
                {
                    if (gstpercvisa == "")
                    {
                        gstpercvisa = "0";
                    }
                    if (type.Length > 0 )
                    {
                        length1 = getlinelength("gst", "receipt");
                        string space1 = "";
                        for (int i = 0; i < length1; i++)
                        {
                            space1 = space1 + " ";
                        }
                        string title = gsttitle;
                        if (title == "")
                        {
                            title = "Sales Tax";
                        }
                        text = title + " (" + gstp + "%):";
                        for (int i = 0; i < space1.Length + 1; i++)
                        {
                            text += " ";
                        }
                        sub = "";
                        for (int i = tax.ToString().Length; i < 9; i++)
                        {
                            sub = " " + sub;
                        }
                        PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(tax).ToString("#0.00")));


                    }
                    else
                    {
                        if (Convert.ToDouble(gstpercvisa) == 0)
                        {
                            length1 = getlinelength("gst", "receipt");
                            string space1 = "";
                            for (int i = 0; i < length1; i++)
                            {
                                space1 = space1 + " ";
                            }
                            string title = gsttitle;
                            if (title == "")
                            {
                                title = "Sales Tax";
                            }
                            text = title + " (" + gstp + "%):";
                            for (int i = 0; i < space1.Length + 1; i++)
                            {
                                text += " ";
                            }
                            sub = "";
                            for (int i = tax.ToString().Length; i < 9; i++)
                            {
                                sub = " " + sub;
                            }
                            PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(tax).ToString("#0.00")));
                        }
                        else
                        {
                            try
                            {
                                double tempsrvc = 0;
                                if (applydiscount() == "before")
                                {
                                    tempsrvc = servc;
                                }
                                string gst1 = (Math.Round((subTotal + tempsrvc) * Convert.ToDouble(gstperccash) / 100, 2)).ToString();
                                string gst2 = (Math.Round((subTotal + tempsrvc) * Convert.ToDouble(gstpercvisa) / 100, 2)).ToString();
                                string title = gsttitle;
                                if (title == "")
                                {
                                    title = "Sales Tax  ";
                                }
                                title = title + "@" + gstpercvisa + "% :" + gst2 + ",   @" + gstperccash + "% :" + gst1.ToString();
                                PrintTextLine(printer, String.Empty);
                                PrintTextLine(printer, String.Format(title + "{0}", ""));
                            }
                            catch (Exception ex)
                            {

                            }
                        }
                    }

                    

                    // PrintTextLine(printer, String.Format("Sales Tax (" + gstp + "%)                {0}", tax.ToString("#0.00")));
                }

                string temp = getdiscountind(saleid);

                if (discount > 0)
                {
                    length1 = getlinelength("discount", "receipt");
                    string space1 = "";
                    for (int i = 0; i < length1; i++)
                    {
                        space1 = space1 + " ";
                    }

                    text = "DISCOUNT (" + disp + "%):";
                    for (int i = 0; i < space1.Length + 1; i++)
                    {
                        text += " ";
                    }
                    sub = "";
                    for (int i = discount.ToString().Length; i < 9; i++)
                    {
                        sub = " " + sub;
                    }
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(discount).ToString("#0.00")));

                    // PrintTextLine(printer, String.Format("DISCOUNT (" + disp + "%)                      {0}", discount.ToString("#0.00")));
                }

                if (gstp > 0)
                {
                    PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                    if (type.Length > 0)
                    {
                        text = "Total Including Taxes:";
                        for (int i = 0; i < space.Length + 1; i++)
                        {
                            text += " ";
                        }
                        sub = "";
                        for (int i = net.ToString().Length; i < 9; i++)
                        {
                            sub = " " + sub;
                        }
                        PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(net).ToString("#0.00")));
                    }
                    else
                    {
                        if (Convert.ToDouble(gstpercvisa) == 0)
                        {
                            text = "Total Including Taxes:";
                            for (int i = 0; i < space.Length + 1; i++)
                            {
                                text += " ";
                            }
                            sub = "";
                            for (int i = net.ToString().Length; i < 9; i++)
                            {
                                sub = " " + sub;
                            }
                            PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(net).ToString("#0.00")));
                        }
                        else
                        {
                            double tempsrvc = 0;
                            if (applydiscount() == "before")
                            {
                                tempsrvc = servc;
                            }
                            double gst1 = Math.Round((subTotal + tempsrvc) * Convert.ToDouble(gstperccash) / 100, 2);
                            double gst2 = Math.Round((subTotal + tempsrvc) * Convert.ToDouble(gstpercvisa) / 100, 2);
                            text = "Total :    @" + gstpercvisa + "% :" + (subTotal + servc + gst2 - discount).ToString() + "   , @" + gstperccash + "% :" + (subTotal + servc + gst1 - discount).ToString();
                            PrintTextLine(printer, String.Format(text + "{0}", sub));
                        }
                    }
                }
                else
                {
                    text = "Total :";
                    for (int i = 0; i < space.Length + 1; i++)
                    {
                        text += " ";
                    }
                    sub = "";
                    for (int i = net.ToString().Length; i < 9; i++)
                    {
                        sub = " " + sub;
                    }
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(net).ToString("#0.00")));
                }
                
               

                //PrintTextLine(printer, String.Format("Total Including Taxes           {0}", (net).ToString("#0.00")));
                PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                if (type.Length > 0)
                {

                    text = "Cash Received:        ";
                    for (int i = 0; i < space.Length + 1; i++)
                    {
                        text += " ";
                    }
                    sub = "";
                    for (int i = received.ToString().Length; i < 9; i++)
                    {
                        sub = " " + sub;
                    }
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(received).ToString("#0.00")));

                    //PrintTextLine(printer, String.Format("Cash Given                     {0}", (received).ToString("#0.00")));

                    text = "Change Given:         ";
                    for (int i = 0; i < space.Length + 1; i++)
                    {
                        text += " ";
                    }
                    sub = "";
                    for (int i = change.ToString().Length; i < 9; i++)
                    {
                        sub = " " + sub;
                    }
                    PrintTextLine(printer, String.Format(text + "{0}", sub + Convert.ToDouble(change).ToString("#0.00")));
                    // PrintTextLine(printer, String.Format("Change Given                   {0}", (change).ToString("#0.00")));
                    PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                }
                PrintTextLine(printer, String.Empty);
                PrintTextLine(printer, String.Empty);
                //if (type.Length > 0)
                //{
                //    if (type != "Cash")
                //    {
                //        PrintText(printer, "Signature___________________");
                //        PrintTextLine(printer, String.Empty);
                //        PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                //    }
                //}
                //Embed 'center' alignment tag on front of string below to have it printed in the center of the receipt.
                int length = footerText.Length;
                int strt = 0;
                if (footerText.Contains("\n"))
                {
                    PrintTextLine(printer, footerText.Replace("endline", ""));
                }
                else
                {
                    int indx = footerText.IndexOf("endline", strt);
                    for (int i = 0; i < length; i++)
                    {
                        indx = footerText.IndexOf("endline", strt);
                        if (indx > 0)
                        {
                            string txt = footerText.Substring(strt, indx);

                            footerText = footerText.Substring(indx + 7);
                            length = footerText.Length;
                            PrintTextLine(printer, txt);
                            i = 0;
                        }
                        else
                        {
                            PrintTextLine(printer, footerText);
                            length = 0;
                        }
                    }
                }
                //Added in these blank lines because RecLinesToCut seems to be wrong on my printer and
                //these extra blank lines ensure the cut is after the footer ends.
                PrintTextLine(printer, String.Empty);
                PrintTextLine(printer, String.Empty);
                if (otype == "Delivery")
                {
                    PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                }
                try
                {
                    if (qrcode.Length > 0)
                    {
                        PrintTextLine(printer, String.Format("Your Sales Tax Invoice No is : " + "{0}", ""));
                        PrintTextLine(printer, String.Format(qrcode + "{0}", ""));
                    }
                }
                catch (Exception ex)
                {


                }

                try
                {
                    PrintTextLine(printer, new string('-', (printer.RecLineChars)));
                    PrintTextLine(printer, String.Format("Powered By Law Biz Group, 03007880554" + "{0}", ""));
                }
                catch (Exception ex)
                {


                }
                PrintTextLine(printer, String.Empty);
                PrintTextLine(printer, String.Empty);
                //Print 'advance and cut' escape command.
                printer.CutPaper(50);
               
                if (type == "Cash" && Convert.ToDouble(received) > 0)
                {

                    if (opendrawer().ToLower() == "printer")
                    {
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                    }
                    else
                    {
                        OPOSCashDrawer myCashDrawer = new OPOSCashDrawer();
                        myCashDrawer.Open(cashdrawername());
                        myCashDrawer.ClaimDevice(1000);
                        myCashDrawer.DeviceEnabled = true;
                        myCashDrawer.OpenDrawer();
                        myCashDrawer.DeviceEnabled = false;
                        myCashDrawer.ReleaseDevice();
                        myCashDrawer.Close();
                    }


                }
            }
            catch (Exception ex)
            {


            }
            
            // PrintTextLine(printer, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'1', (byte)'0', (byte)'0', (byte)'P', (byte)'f', (byte)'P' }));
        }
        private void PrintReceiptFooterSale(OPOSPOSPrinter printer, double subTotal, double tax, double discount, string footerText, double received, double change, double disp, double gstp, string type, double net)
        {
            try
            {
                string offSetString = new string(' ', printer.RecLineChars / 2);
                double servc = 0;
                if (servicecharhes > 0)
                {
                    try
                    {
                        servc = Convert.ToDouble(txtservice.Text);
                    }
                    catch (Exception ex)
                    {


                    }
                }
                PrintTextLinesale(printer, new string('-', (printer.RecLineChars)));
                PrintTextLinesale(printer, String.Format("SUB-TOTAL                     {0}", subTotal.ToString("#0.00")));
                if (gstp > 0)
                {
                    PrintTextLinesale(printer, String.Format("GST                           {0}", tax.ToString("#0.00") + "(" + gstp + "%)"));
                }
                if (servicecharhes > 0)
                {
                    PrintTextLinesale(printer, String.Format("Service Charges               {0}", servc.ToString("#0.00") + "(" + servicecharhes + "%)"));
                }
                if (disp > 0)
                {
                    PrintTextLinesale(printer, String.Format("DISCOUNT                       {0}", discount.ToString("#0.00") + "(" + disp + "%)"));
                }
                PrintTextLinesale(printer, new string('-', (printer.RecLineChars)));
                PrintTextLinesale(printer, String.Format("Amount Tendered               {0}", (net).ToString("#0.00")));
                PrintTextLinesale(printer, new string('-', (printer.RecLineChars)));
                PrintTextLinesale(printer, String.Format("Cash Given                    {0}", (received).ToString("#0.00")));
                PrintTextLinesale(printer, String.Format("Change Given                  {0}", (change).ToString("#0.00")));
                PrintTextLinesale(printer, new string('-', (printer.RecLineChars)));
                PrintTextLinesale(printer, String.Empty);
                PrintTextLinesale(printer, String.Empty);
                if (type.Length > 0)
                {
                    if (type != "Cash")
                    {
                        PrintTextLinesale(printer, "Signature___________________");
                        PrintTextLinesale(printer, String.Empty);
                        PrintTextLinesale(printer, new string('-', (printer.RecLineChars)));
                    }
                }
                //Embed 'center' alignment tag on front of string below to have it printed in the center of the receipt.
                int length = footerText.Length;
                int strt = 0;
                if (footerText.Contains("\n"))
                {
                    PrintTextLinesale(printer, footerText.Replace("endline", ""));
                }
                else
                {
                    int indx = footerText.IndexOf("endline", strt);
                    for (int i = 0; i < length; i++)
                    {
                        indx = footerText.IndexOf("endline", strt);
                        if (indx > 0)
                        {
                            string txt = footerText.Substring(strt, indx);

                            footerText = footerText.Substring(indx + 7);
                            length = footerText.Length;
                            PrintTextLine(printer, txt);
                            i = 0;
                        }
                        else
                        {
                            PrintTextLinesale(printer, footerText);
                            length = 0;
                        }
                    }
                }
                //Added in these blank lines because RecLinesToCut seems to be wrong on my printer and
                //these extra blank lines ensure the cut is after the footer ends.
                PrintTextLinesale(printer, String.Empty);
                PrintTextLinesale(printer, String.Empty);
                PrintTextLinesale(printer, String.Empty);
                PrintTextLinesale(printer, String.Empty);
                //Print 'advance and cut' escape command.
                printer.CutPaper(50);
                if (type == "Cash")
                {
                    if (opendrawer().ToLower() == "printer")
                    {
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                    }
                    else
                    {
                        OPOSCashDrawer myCashDrawer = new OPOSCashDrawer();
                        myCashDrawer.Open(cashdrawername());
                        myCashDrawer.ClaimDevice(1000);
                        myCashDrawer.DeviceEnabled = true;
                        myCashDrawer.OpenDrawer();
                        myCashDrawer.DeviceEnabled = false;
                        myCashDrawer.ReleaseDevice();
                        myCashDrawer.Close();
                    }


                }
            }
            catch (Exception ex)
            {


            }
            // PrintTextLine(printer, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'1', (byte)'0', (byte)'0', (byte)'P', (byte)'f', (byte)'P' }));
        }

        protected int getlinelength(string type, string p)
        {
            DataSet dsl = new DataSet();
            int length = 17;
            try
            {

                string q = "select * from linelength where type='" + type + "' and printr='" + p + "'";
                dsl = objCore.funGetDataSet(q);
                if (dsl.Tables[0].Rows.Count > 0)
                {
                    string temp = dsl.Tables[0].Rows[0]["length"].ToString();
                    if (temp == "")
                    {
                        temp = "17";
                    }
                    length = Convert.ToInt32(temp);
                }
                else
                {
                    length = 17;
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsl.Dispose();
            }
            return length;
        }
        protected int getlinelengthgeneric(string type, string p)
        {
            DataSet dsl = new DataSet();
            int length = 17;
            try
            {

                string q = "select * from linelength where type='" + type + "' and printr='" + p + "'";
                dsl = objCore.funGetDataSet(q);
                if (dsl.Tables[0].Rows.Count > 0)
                {
                    string temp = dsl.Tables[0].Rows[0]["length"].ToString();
                    if (temp == "")
                    {
                        temp = "17";
                    }
                    length = Convert.ToInt32(temp);
                }
                else
                {
                    length = 17;
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsl.Dispose();
            }
            return length;
        }
        private void PrintLineItem(OPOSPOSPrinter printer, string itemCode, double quantity, double unitPrice)
        {
            int length = getlinelength("space", "receipt");
            try
            {
                string temp = "";
                string textprint = "";
                int indx = 0;
                if (itemCode.Length > length)
                {
                    string offSetString = new string(' ', length - indx);
                    string val = itemCode.Substring(0, length);
                    /*  //// indx = val.IndexOf(" ", 0); no required
                      ////temp = itemCode.Substring(0, indx);// +offSetString;*/
                    //PrintText(printer, TruncateAt(val, length+1));skipped for bixolon
                    textprint = val;
                }
                else
                {
                    string offSetString = new string(' ', length - itemCode.Length);
                    string val = itemCode + offSetString;
                    // PrintText(printer, TruncateAt(val, length)); skipped for bixolon
                    textprint = val;
                }
                string qty = "", prc = "", total = "";
                qty = quantity.ToString();
                prc = unitPrice.ToString();
                total = (quantity * unitPrice).ToString();
                if (qty == "0")
                {
                    qty = "";
                }
                if (prc == "0")
                {
                    prc = "";
                }
                if (total == "0")
                {
                    total = "";
                }
                textprint = textprint + quantity.ToString().PadLeft(3) + prc.ToString().PadLeft(9) + (total).ToString().PadLeft(9);
                PrintTextLine(printer, (textprint));
                //PrintText(printer, TruncateAt(quantity.ToString().PadLeft(3), 9));
                //PrintText(printer, TruncateAt(unitPrice.ToString().PadLeft(9), 9));
                //PrintTextLine(printer, TruncateAt((quantity * unitPrice).ToString().PadLeft(9), 9));

                if (itemCode.Length > length)
                {
                    //temp = itemCode.Substring(indx + 1);
                    temp = itemCode.Substring(length);
                    //PrintText(printer, TruncateAt(temp, length + 1));
                    //PrintText(printer, TruncateAt("".PadLeft(3), 9));
                    //PrintText(printer, TruncateAt("".PadLeft(9), 9));
                    //PrintTextLine(printer, TruncateAt(("").ToString().PadLeft(9), 9));

                    textprint = temp + "".ToString().PadLeft(3) + "".ToString().PadLeft(9) + ("").ToString().PadLeft(9);
                    PrintTextLine(printer, (textprint));
                }
            }
            catch (Exception ex)
            {


            }
        }
        private void PrintLineItemsale(OPOSPOSPrinter printer, string itemCode, double quantity, double unitPrice)
        {
            int length = getlinelength("space", "receipt");
            try
            {
                string temp = "";
                string textprint = "";
                int indx = 0;
                if (itemCode.Length > length)
                {
                    string offSetString = new string(' ', length - indx);
                    string val = itemCode.Substring(0, length);
                    /*  //// indx = val.IndexOf(" ", 0); no required
                      ////temp = itemCode.Substring(0, indx);// +offSetString;*/
                    //PrintText(printer, TruncateAt(val, length+1));skipped for bixolon
                    textprint = val;
                }
                else
                {
                    string offSetString = new string(' ', length - itemCode.Length);
                    string val = itemCode + offSetString;
                    // PrintText(printer, TruncateAt(val, length)); skipped for bixolon
                    textprint = val;
                }
                textprint = textprint + quantity.ToString().PadLeft(3) + unitPrice.ToString().PadLeft(9) + (quantity * unitPrice).ToString().PadLeft(9);
                PrintTextLinesale(printer, (textprint));
                //PrintText(printer, TruncateAt(quantity.ToString().PadLeft(3), 9));
                //PrintText(printer, TruncateAt(unitPrice.ToString().PadLeft(9), 9));
                //PrintTextLine(printer, TruncateAt((quantity * unitPrice).ToString().PadLeft(9), 9));

                if (itemCode.Length > length)
                {
                    //temp = itemCode.Substring(indx + 1);
                    temp = itemCode.Substring(length);
                    //PrintTextsale(printer, TruncateAt(temp, length + 1));
                    //PrintTextsale(printer, TruncateAt("".PadLeft(3), 9));
                    //PrintTextsale(printer, TruncateAt("".PadLeft(9), 9));
                    //PrintTextLinesale(printer, TruncateAt(("").ToString().PadLeft(9), 9));

                    textprint = temp + "".ToString().PadLeft(3) + "".ToString().PadLeft(9) + ("").ToString().PadLeft(9);
                    PrintTextLine(printer, (textprint));
                }
            }
            catch (Exception ex)
            {


            }
        }
        private void PrintLineItemKitchen(OPOSPOSPrinter printer, string itemCode, double quantity, double unitPrice)
        {
            int length = getlinelength("space", "receipt");
            try
            {
                string temp = "";
                string textprint = "";
                int indx = 0;
                if (itemCode.Length > length)
                {
                    string offSetString = new string(' ', length - indx);
                    string val = itemCode.Substring(0, length);
                    /*  //// indx = val.IndexOf(" ", 0); no required
                      ////temp = itemCode.Substring(0, indx);// +offSetString;*/
                    //PrintText(printer, TruncateAt(val, length+1));skipped for bixolon
                    textprint = val;
                }
                else
                {
                    string offSetString = new string(' ', length - itemCode.Length);
                    string val = itemCode + offSetString;
                    // PrintText(printer, TruncateAt(val, length)); skipped for bixolon
                    textprint = val;
                }
                textprint = textprint + quantity.ToString().PadLeft(3) + unitPrice.ToString().PadLeft(9) + (quantity * unitPrice).ToString().PadLeft(9);
                PrintTextLineKitchen(printer, (textprint));
                //PrintText(printer, TruncateAt(quantity.ToString().PadLeft(3), 9));
                //PrintText(printer, TruncateAt(unitPrice.ToString().PadLeft(9), 9));
                //PrintTextLine(printer, TruncateAt((quantity * unitPrice).ToString().PadLeft(9), 9));

                if (itemCode.Length > length)
                {
                    //temp = itemCode.Substring(indx + 1);
                    temp = itemCode.Substring(length);
                    //PrintTextkitchen(printer, TruncateAt(temp, length + 1));
                    //PrintTextkitchen(printer, TruncateAt("".PadLeft(3), 9));
                    //PrintTextkitchen(printer, TruncateAt("".PadLeft(9), 9));
                    //PrintTextLineKitchen(printer, TruncateAt(("").ToString().PadLeft(9), 9));

                    textprint = temp + "".ToString().PadLeft(3) + "".ToString().PadLeft(9) + ("").ToString().PadLeft(9);
                    PrintTextLine(printer, (textprint));
                }
            }
            catch (Exception ex)
            {


            }
        }


        public Bitmap BytesToBitmap(byte[] byteArray)
        {

            return (Bitmap)Image.FromStream(new MemoryStream(byteArray));



        }

        public byte[] ImageToByteArray(Image img)
        {

            using (MemoryStream ms = new MemoryStream())
            {

                img.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp);

                return ms.ToArray();

            }

        }
        private void PrintReceiptHeader(OPOSPOSPrinter printer, string companyName, string addressLine1, string billno, string taxNumber, string dateTime, string cashierName, string mop, string customer, string type,string invoiceno)
        {
            string tempbill = billno;
            if (invoiceno.Length > 0)
            {
                tempbill = invoiceno;
            }
            getcompany();
            string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
            string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
            try
            {
                int width = Convert.ToInt32(dscompany.Tables[0].Rows[0]["width"].ToString());
                string baseDir = System.AppDomain.CurrentDomain.BaseDirectory;
                // printer.SetBitmap(1, 2, baseDir + "\\" + dscompany.Tables[0].Rows[0]["logoname"].ToString(), width, 2);

                //printer.PrintBitmap(2, baseDir + "\\" + dscompany.Tables[0].Rows[0]["logoname"].ToString(), printer.RecLineWidth, 2);

                //printer.PrintBitmap(2, baseDir + "\\" + "pra.bmp", printer.RecLineWidth/3, 2);

            }
            catch (Exception ex)
            {

            }
            string ESCp = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
            int length = getlinelength("logo", "receipt");
            if (length == 17)
            {
                length = 10;
            }
            string spacelogo = "";
            for (int i = 0; i < length; i++)
            {
                spacelogo = spacelogo + " ";
            }
            try
            {
                printer.PrintNormal(2, spacelogo + ESCp + "|1B");
                printer.PrintNormal(2, " " + Environment.NewLine);
            }
            catch (Exception ex)
            {


            }
            string space = "";


            try
            {
                length = getlinelength("name", "receipt");
                if (length == 17)
                {
                    length = 1;
                }
                for (int i = 0; i < length; i++)
                {
                    companyName = " " + companyName;
                }
                length = getlinelength("address", "receipt");
                if (length == 17)
                {
                    length = 5;
                }
                for (int i = 0; i < length; i++)
                {
                    addressLine1 = " " + addressLine1;
                }
                length = getlinelength("phone", "receipt");


                for (int i = 0; i < length; i++)
                {
                    taxNumber = " " + taxNumber;
                }
                string offSetString = new string(' ', printer.RecLineChars / 3 - 2);
                string Bold = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'b', (byte)'C' });
                string Bold1 = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'c', (byte)'A' });
                string ESC = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
                if (mop != "kitchen")
                {
                    if (companyName.Contains("Gloria"))
                    {
                        PrintTextLine(printer, (Bold + companyName));
                        PrintTextLine(printer, Bold + addressLine1);
                        PrintTextLine(printer, Bold + taxNumber);
                    }
                    else
                    {
                        PrintTextLine(printer, (Bold + companyName));
                        PrintTextLine(printer, Bold + addressLine1);
                        PrintTextLine(printer, Bold + taxNumber);
                    }
                    PrintTextLine(printer, new string('-', printer.RecLineChars));
                }
                if (getselectordertype().ToLower() == "yes")
                {
                    PrintTextLine(printer, offSetString + (Bold + "Your Bill No is"));
                    PrintTextLine(printer, offSetString + (Bold + "    " + tempbill));
                    if (customermsg.Length > 0)
                    {
                        PrintTextLine(printer, (Bold + customermsg));
                    }
                    if (customermsg2.Length > 0)
                    {
                        PrintTextLine(printer, (Bold + customermsg2));
                    }
                    PrintTextLine(printer, new string('-', printer.RecLineChars));
                    //PrintTextLine(printer, String.Format("Bill No : {0}", billno));
                }
                else
                {
                    PrintTextLine(printer, offSetString + (Bold + "Your Bill No is"));
                    PrintTextLine(printer, offSetString + (Bold + "    " + tempbill));
                    if (customermsg.Length > 0)
                    {
                        PrintTextLine(printer, (Bold + customermsg));
                    }
                    if (customermsg2.Length > 0)
                    {
                        PrintTextLine(printer, (Bold + customermsg2));
                    }
                    PrintTextLine(printer, new string('-', printer.RecLineChars));
                    PrintTextLine(printer, String.Format("Customer : {0}", customer));
                }
                if (mop != "kitchen")
                {
                    PrintTextLine(printer, String.Format("CASHIER : {0}", cashierName + "  MOP :" + mop));
                }
                string date = dateTime;
                string time = gettime(saleid.ToString());
                try
                {
                    date = Convert.ToDateTime(dateTime).ToString("dd-MM-yyyy");
                }
                catch (Exception ex)
                {


                }
                PrintTextLine(printer, String.Format("Terminal : {0}", System.Environment.MachineName.ToString()));
                PrintTextLine(printer, String.Format("DATE : {0}", Bold1 + date + " " + time));

                //  if (getselectordertype().ToLower() == "yes")
                {
                    string cusid = "";
                    if (type == "Take Away")
                    {
                        cusid = getcustomerid(billno);
                        cusid = "Customer Id: " + cusid;
                    }
                    if (type == "Dine In")
                    {
                        string tblno = gettbleno(billno);
                        cusid = "Table No:" + tblno;
                    }
                    if (type == "Delivery")
                    {
                        string tblno = "";// getdelivery(billno);
                        tblno = getdeliveryinfo(billno);
                        cusid = tblno;
                    }
                    PrintTextLine(printer, String.Format("Order Type: {0}", type + " " + cusid));

                }

                PrintTextLine(printer, new string('-', printer.RecLineChars));
                if (mop != "kitchen")
                {
                    if (mop == "Refund")
                    {
                        PrintTextLine(printer, offSetString + "    " + (Bold + "Refund Slip"));
                    }
                    else
                    {
                        PrintTextLine(printer, offSetString + "    " + (Bold + "Sale Slip"));
                    }
                }
                else
                {
                    PrintTextLine(printer, offSetString + "    " + (Bold + "KOT Slip"));
                }
                printer.PrintNormal(2, " " + Environment.NewLine);
                length = getlinelength("space", "receipt");
                length = length - 9;

                for (int i = 0; i < length; i++)
                {
                    space = space + " ";
                }
                string text = Bold + "Item Name" + space + "QTY " + "Unit Price  " + "Total";
                PrintTextLine(printer, text);
                //PrintText(printer, Bold + "Item Name"+space);   skiped for bixolon
                //PrintText(printer, Bold + "QTY ");
                //PrintText(printer, Bold + "Unit Price  ");
                //PrintTextLine(printer, Bold + "Total");
                PrintTextLine(printer, new string('=', printer.RecLineChars));
            }
            catch (Exception ex)
            {


            }
            //PrintTextLine(printer, String.Empty);

        }
        private void PrintReceiptHeadersale(OPOSPOSPrinter printer, string companyName, string addressLine1, string billno, string taxNumber, string dateTime, string cashierName, string mop, string customer, string type)
        {
            try
            {
                int width = Convert.ToInt32(dscompany.Tables[0].Rows[0]["width"].ToString());
                string baseDir = System.AppDomain.CurrentDomain.BaseDirectory;
                printer.SetBitmap(1, 2, baseDir + "\\" + dscompany.Tables[0].Rows[0]["logoname"].ToString(), width, 2);
            }
            catch (Exception ex)
            {

            }
            string ESCp = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
            int length = getlinelength("logo", "receipt");
            if (length == 17)
            {
                length = 10;
            }
            string spacelogo = "";
            for (int i = 0; i < length; i++)
            {
                spacelogo = spacelogo + " ";
            }
            try
            {
                printer.PrintNormal(2, spacelogo + ESCp + "|1B");
                printer.PrintNormal(2, " " + Environment.NewLine);
            }
            catch (Exception ex)
            {


            }
            string space = "";


            try
            {
                length = getlinelength("name", "receipt");
                if (length == 17)
                {
                    length = 1;
                }
                for (int i = 0; i < length; i++)
                {
                    companyName = " " + companyName;
                }
                length = getlinelength("address", "receipt");
                if (length == 17)
                {
                    length = 5;
                }
                for (int i = 0; i < length; i++)
                {
                    addressLine1 = " " + addressLine1;
                }
                length = getlinelength("phone", "receipt");

                if (length == 17)
                {
                    length = 5;
                }
                for (int i = 0; i < length; i++)
                {
                    taxNumber = " " + taxNumber;
                }
                string offSetString = new string(' ', printer.RecLineChars / 3 - 2);
                string Bold = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'b', (byte)'C' });
                string Bold1 = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'c', (byte)'A' });
                string ESC = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
                if (mop != "kitchen")
                {
                    if (companyName.Contains("Gloria"))
                    {
                        PrintTextLinesale(printer, offSetString + (Bold + companyName));
                        PrintTextLinesale(printer, offSetString + Bold + addressLine1);
                        PrintTextLinesale(printer, offSetString + Bold + taxNumber);
                    }
                    else
                    {
                        PrintTextLinesale(printer, offSetString + (Bold + companyName));
                        PrintTextLinesale(printer, Bold + addressLine1);
                        PrintTextLinesale(printer, Bold + taxNumber);
                    }
                    PrintTextLinesale(printer, new string('-', printer.RecLineChars));
                }
                if (getselectordertype().ToLower() == "yes")
                {
                    PrintTextLinesale(printer, String.Format("Bill No : {0}", billno));
                }
                else
                {
                    PrintTextLinesale(printer, String.Format("Bill No : {0}", billno + "       Customer :" + customer));
                }
                if (mop != "kitchen")
                {
                    PrintTextLinesale(printer, String.Format("CASHIER : {0}", cashierName + "  MOP :" + mop));
                }
                string date = dateTime;
                string time = gettime(saleid.ToString());
                try
                {
                    date = Convert.ToDateTime(dateTime).ToString("dd-MM-yyyy");
                }
                catch (Exception ex)
                {


                }
                PrintTextLinesale(printer, String.Format("Terminal : {0}", System.Environment.MachineName.ToString()));
                PrintTextLinesale(printer, String.Format("DATE : {0}", Bold1 + date + " " + time));

                if (getselectordertype().ToLower() == "yes")
                {
                    string cusid = "";
                    if (type == "Take Away")
                    {
                        cusid = getcustomerid(billno);
                        cusid = "Customer Id: " + cusid;
                    }
                    if (type == "Dine In")
                    {
                        string tblno = gettbleno(billno);
                        cusid = "Table No:" + tblno;
                    }
                    if (type == "Delivery")
                    {
                        string tblno = "";// getdelivery(billno);
                        tblno = getdeliveryinfo(billno);
                        cusid = tblno;
                    }
                    PrintTextLinesale(printer, String.Format("Order Type: {0}", type + " " + cusid));

                }

                PrintTextLinesale(printer, new string('-', printer.RecLineChars));
                if (mop != "kitchen")
                {
                    PrintTextLinesale(printer, offSetString + "    " + (Bold + "Sale Slip"));
                }
                else
                {
                    PrintTextLinesale(printer, offSetString + "    " + (Bold + "KOT Slip"));
                }
                printer.PrintNormal(2, " " + Environment.NewLine);
                length = getlinelength("space", "receipt");
                length = length - 9;

                for (int i = 0; i < length; i++)
                {
                    space = space + " ";
                }
                string text = Bold + "Item Name" + space + "QTY " + "Unit Price  " + "Total";
                PrintTextLinesale(printer, text);
                //PrintText(printer, Bold + "Item Name"+space);   skiped for bixolon
                //PrintText(printer, Bold + "QTY ");
                //PrintText(printer, Bold + "Unit Price  ");
                //PrintTextLine(printer, Bold + "Total");
                PrintTextLinesale(printer, new string('=', printer.RecLineChars));
            }
            catch (Exception ex)
            {


            }
            //PrintTextLine(printer, String.Empty);

        }

        private void PrintReceiptHeaderkitchen(OPOSPOSPrinter printer, string companyName, string addressLine1, string billno, string taxNumber, string dateTime, string cashierName, string mop, string customer, string type)
        {
            try
            {
                int width = Convert.ToInt32(dscompany.Tables[0].Rows[0]["width"].ToString());
                string baseDir = System.AppDomain.CurrentDomain.BaseDirectory;
                printer.SetBitmap(1, 2, baseDir + "\\" + dscompany.Tables[0].Rows[0]["logoname"].ToString(), width, 2);
            }
            catch (Exception ex)
            {

            }
            string ESCp = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
            int length = getlinelength("logo", "receipt");
            if (length == 17)
            {
                length = 10;
            }
            string spacelogo = "";
            for (int i = 0; i < length; i++)
            {
                spacelogo = spacelogo + " ";
            }
            try
            {
                printer.PrintNormal(2, spacelogo + ESCp + "|1B");
                printer.PrintNormal(2, " " + Environment.NewLine);
            }
            catch (Exception ex)
            {


            }
            string space = "";


            try
            {
                length = getlinelength("name", "receipt");
                if (length == 17)
                {
                    length = 1;
                }
                for (int i = 0; i < length; i++)
                {
                    companyName = " " + companyName;
                }
                length = getlinelength("address", "receipt");
                if (length == 17)
                {
                    length = 5;
                }
                for (int i = 0; i < length; i++)
                {
                    addressLine1 = " " + addressLine1;
                }
                length = getlinelength("phone", "receipt");

                if (length == 17)
                {
                    length = 5;
                }
                for (int i = 0; i < length; i++)
                {
                    taxNumber = " " + taxNumber;
                }
                string offSetString = new string(' ', printer.RecLineChars / 3 - 2);
                string Bold = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'b', (byte)'C' });
                string Bold1 = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, (byte)'|', (byte)'c', (byte)'A' });
                string ESC = System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27 });
                if (mop != "kitchen")
                {
                    if (companyName.Contains("Gloria"))
                    {
                        PrintTextLineKitchen(printer, offSetString + (Bold + companyName));
                        PrintTextLineKitchen(printer, offSetString + Bold + addressLine1);
                        PrintTextLineKitchen(printer, offSetString + Bold + taxNumber);
                    }
                    else
                    {
                        PrintTextLineKitchen(printer, offSetString + (Bold + companyName));
                        PrintTextLineKitchen(printer, Bold + addressLine1);
                        PrintTextLineKitchen(printer, Bold + taxNumber);
                    }
                    PrintTextLineKitchen(printer, new string('-', printer.RecLineChars));
                }
                if (getselectordertype().ToLower() == "yes")
                {
                    PrintTextLineKitchen(printer, String.Format("Bill No : {0}", billno));
                }
                else
                {
                    PrintTextLineKitchen(printer, String.Format("Bill No : {0}", billno + "       Customer :" + customer));
                }
                if (mop != "kitchen")
                {
                    PrintTextLineKitchen(printer, String.Format("CASHIER : {0}", cashierName + "  MOP :" + mop));
                }
                string date = dateTime;
                try
                {
                    date = Convert.ToDateTime(dateTime).ToString("dd-MM-yyyy");
                }
                catch (Exception ex)
                {


                }
                PrintTextLineKitchen(printer, String.Format("Terminal : {0}", System.Environment.MachineName.ToString()));
                PrintTextLineKitchen(printer, String.Format("DATE : {0}", Bold1 + date + " " + DateTime.Now.ToShortTimeString()));

                if (getselectordertype().ToLower() == "yes")
                {
                    string cusid = "";
                    if (type == "Take Away")
                    {
                        cusid = getcustomerid(billno);
                        cusid = "Customer Id: " + cusid;
                    }
                    if (type == "Dine In")
                    {
                        string tblno = gettbleno(billno);
                        cusid = "Table No:" + tblno;
                    }
                    if (type == "Delivery")
                    {
                        string tblno = "";// getdelivery(billno);
                        tblno = getdeliveryinfo(billno);
                        cusid = tblno;
                    }
                    PrintTextLineKitchen(printer, String.Format("Order Type: {0}", type + " " + cusid));

                }

                PrintTextLineKitchen(printer, new string('-', printer.RecLineChars));
                if (mop != "kitchen")
                {
                    PrintTextLineKitchen(printer, offSetString + "    " + (Bold + "Sale Slip"));
                }
                else
                {
                    PrintTextLineKitchen(printer, offSetString + "    " + (Bold + "KOT Slip"));
                }
                printer.PrintNormal(2, " " + Environment.NewLine);
                length = getlinelength("space", "receipt");
                length = length - 9;

                for (int i = 0; i < length; i++)
                {
                    space = space + " ";
                }
                string text = Bold + "Item Name" + space + "QTY " + "Unit Price  " + "Total";
                PrintTextLineKitchen(printer, text);
                //PrintText(printer, Bold + "Item Name"+space);   skiped for bixolon
                //PrintText(printer, Bold + "QTY ");
                //PrintText(printer, Bold + "Unit Price  ");
                //PrintTextLine(printer, Bold + "Total");
                PrintTextLineKitchen(printer, new string('=', printer.RecLineChars));
            }
            catch (Exception ex)
            {


            }
            //PrintTextLine(printer, String.Empty);

        }

        private void PrintText(OPOSPOSPrinter printer, string text)
        {
            if (text.Length <= printer.RecLineChars)
                printer.PrintNormal(2, text); //Print text
            else if (text.Length > printer.RecLineChars)
                printer.PrintNormal(2, TruncateAt(text, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest.
        }
        private void PrintTextkitchen(OPOSPOSPrinter printer, string text)
        {
            if (text.Length <= printer.RecLineChars)
                printer.PrintNormal(2, text); //Print text
            else if (text.Length > printer.RecLineChars)
                printer.PrintNormal(2, TruncateAt(text, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest.
        }
        private void PrintTextsale(OPOSPOSPrinter printer, string text)
        {
            if (text.Length <= printer.RecLineChars)
                printer.PrintNormal(2, text); //Print text
            else if (text.Length > printer.RecLineChars)
                printer.PrintNormal(2, TruncateAt(text, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest.
        }

        private void PrintTextLine(OPOSPOSPrinter printer, string text)
        {
            // printer.PrintNormal(PrinterStation.Receipt, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
            try
            {
                if (text.Length < printer.RecLineChars || text.Contains("\n"))
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, then a new line character.
                else if (text.Length > printer.RecLineChars)
                    printer.PrintNormal(2, TruncateAt(text + Environment.NewLine, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest, no new line character (printer will probably auto-feed for us)
                else if (text.Length == printer.RecLineChars)
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, no new line character, printer will probably auto-feed for us.
            }
            catch (Exception ex)
            {


            }
        }
        private void PrintTextLinesale(OPOSPOSPrinter printer, string text)
        {
            // printer.PrintNormal(PrinterStation.Receipt, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
            try
            {
                if (text.Length < printer.RecLineChars || text.Contains("\n"))
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, then a new line character.
                else if (text.Length > printer.RecLineChars)
                    printer.PrintNormal(2, TruncateAt(text + Environment.NewLine, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest, no new line character (printer will probably auto-feed for us)
                else if (text.Length == printer.RecLineChars)
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, no new line character, printer will probably auto-feed for us.
            }
            catch (Exception ex)
            {


            }
        }
        private void PrintTextLineKitchen(OPOSPOSPrinter printer, string text)
        {
            // printer.PrintNormal(PrinterStation.Receipt, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
            try
            {
                if (text.Length < printer.RecLineChars || text.Contains("\n"))
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, then a new line character.
                else if (text.Length > printer.RecLineChars)
                    printer.PrintNormal(2, TruncateAt(text + Environment.NewLine, printer.RecLineChars)); //Print exactly as many characters as the printer allows, truncating the rest, no new line character (printer will probably auto-feed for us)
                else if (text.Length == printer.RecLineChars)
                    printer.PrintNormal(2, text + Environment.NewLine); //Print text, no new line character, printer will probably auto-feed for us.
            }
            catch (Exception ex)
            {


            }
        }

        private string TruncateAt(string text, int maxWidth)
        {
            string retVal = text;
            if (text.Length > maxWidth)
                retVal = text.Substring(0, maxWidth);

            return retVal;
        }
        public async System.Threading.Tasks.Task printAsync(DataTable dtprint, string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst, string cash, string change, string printername, string deliveryinfo, int prints, string discountamount, string gstamount, string msg1, string msg2, string serice)
        {
            try
            {


                POSRestaurant.Reports.CashReceipt rptDoc = new Reports.CashReceipt();
                POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                dsrpt.Clear();

                DataTable dt = new DataTable();

                dt.TableName = "Crystal Report";
                dt = getAllOrders(dtprint, mop, sid, ordertype, total, nettotal, discount, gst);


                dsrpt.Tables[0].Merge(dt);

                rptDoc.SetDataSource(dsrpt);

                if (mop == "Credit Card" || mop == "Master Card")
                {


                    rptDoc.SetParameterValue("cardno", "Card No: " + cardno);
                }
                else
                {
                    rptDoc.SetParameterValue("cardno", "");
                }



                if (serice == "")
                {
                    serice = "0";
                }
                rptDoc.SetParameterValue("service", serice);
                string msg = "";
                try
                {
                    msg = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                }
                catch (Exception ex)
                {

                }
                if (ordertype == "Dine In")
                {
                    string tblno = gettbleno(sid);
                    rptDoc.SetParameterValue("table", "Table No: " + tblno);
                }
                else if (ordertype == "Take Away")
                {
                    string cusid = getcustomerid(sid);
                    rptDoc.SetParameterValue("table", "Customer Id: " + cusid);
                }
                else
                {

                    rptDoc.SetParameterValue("table", deliveryinfo);
                }
                if (gstperc == "0")
                {
                    gstperc = "";
                }
                string title = gsttitle;
                if (title == "")
                {
                    title = "Sales Tax";
                }
                rptDoc.SetParameterValue("gst", title + "(" + gstperc + ")");
                rptDoc.SetParameterValue("gstamount", gst);

                if (discount == "0")
                {
                    discount = "";
                    discountamount = "0";
                }
                else
                {
                    discount = "Discount (" + discount + "%)";
                }
                rptDoc.SetParameterValue("discount", discount);
                rptDoc.SetParameterValue("discountamount", discountamount);
                rptDoc.SetParameterValue("subtotal", total);
                rptDoc.SetParameterValue("nettotal", nettotal);


                rptDoc.SetParameterValue("cash", cash);
                rptDoc.SetParameterValue("change", change);
                rptDoc.SetParameterValue("message", msg);
                rptDoc.SetParameterValue("msg1", msg1);
                rptDoc.SetParameterValue("qrcodetext", qrcode);

                if (ordertype == "Delivery")
                {
                    rptDoc.SetParameterValue("delivery", deliveryinfo);
                }
                else
                {
                    rptDoc.SetParameterValue("delivery", "");
                }
                rptDoc.PrintOptions.PrinterName = printername;


                rptDoc.PrintToPrinter(prints, false, 0, 0);
                rptDoc.Dispose();
                System.GC.Collect();
                try
                {
                    obcustomerdisplay.addpoints(memberid, sid);
                    obcustomerdisplay.cinfo("");
                }
                catch (Exception ex)
                {


                }

            }
            catch (Exception ex)
            {


            }
        }
        public void bindreportpreview(DataTable dtprint, string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst, string cash, string change, string printername, string deliveryinfo, int prints, string discountamount, string gstamount, string msg1, string msg2, string serice)
        {
            try
            {
                // if (dtcopy.Rows.Count > 0)
                {

                    //if (dsprint.Tables[0].Rows.Count > 0)
                    {

                        POSRestaurant.Reports.CashReceipt rptDoc = new Reports.CashReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        dsrpt.Clear();

                        DataTable dt = new DataTable();

                        dt.TableName = "Crystal Report";
                        dt = getAllOrders(dtprint, mop, sid, ordertype, total, nettotal, discount, gst);

                        //testprint tst = new testprint();
                        //tst.dt = dt;
                        //tst.Show();
                        //return;
                        dsrpt.Tables[0].Merge(dt);

                        rptDoc.SetDataSource(dsrpt);

                        if (mop == "Credit Card" || mop == "Master Card")
                        {


                            rptDoc.SetParameterValue("cardno", "Card No: " + cardno);
                        }
                        else
                        {
                            rptDoc.SetParameterValue("cardno", "");
                        }

                        ////if (txtcashrecvd.Text == "")
                        //{
                        //    cash = txtnettotal.Text;
                        //}
                        //else
                        //{
                        //    cash = txtcashrecvd.Text;
                        //}
                        //if (txtchange.Text == "")
                        //{
                        //    change = "0";
                        //}
                        //else
                        //{
                        //    change = txtchange.Text;
                        //}
                        // getcompany();

                        if (serice == "")
                        {
                            serice = "0";
                        }
                        rptDoc.SetParameterValue("service", serice);
                        string msg = "";
                        try
                        {
                            msg = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                        }
                        catch (Exception ex)
                        {

                        }
                        if (ordertype == "Dine In")
                        {
                            string tblno = gettbleno(sid);
                            rptDoc.SetParameterValue("table", "Table No: " + tblno);
                        }
                        else if (ordertype == "Take Away")
                        {
                            string cusid = getcustomerid(sid);
                            rptDoc.SetParameterValue("table", "Customer Id: " + cusid);
                        }
                        else
                        {

                            rptDoc.SetParameterValue("table", deliveryinfo);
                        }
                        if (gstperc == "0")
                        {
                            gstperc = "";
                        }
                        string title = gsttitle;
                        if (title == "")
                        {
                            title = "Sales Tax";
                        }
                        rptDoc.SetParameterValue("gst", title + "(" + gstperc + ")");
                        rptDoc.SetParameterValue("gstamount", gst);

                        if (discount == "0")
                        {
                            discount = "";
                            discountamount = "0";
                        }
                        else
                        {
                            discount = "Discount (" + discount + "%)";
                        }
                        rptDoc.SetParameterValue("discount", discount);
                        rptDoc.SetParameterValue("discountamount", discountamount);
                        rptDoc.SetParameterValue("subtotal", total);
                        rptDoc.SetParameterValue("nettotal", nettotal);


                        rptDoc.SetParameterValue("cash", cash);
                        rptDoc.SetParameterValue("change", change);
                        rptDoc.SetParameterValue("message", msg);
                        rptDoc.SetParameterValue("msg1", msg1);
                        rptDoc.SetParameterValue("qrcodetext", qrcode);

                        if (ordertype == "Delivery")
                        {
                            rptDoc.SetParameterValue("delivery", deliveryinfo);
                        }
                        else
                        {
                            rptDoc.SetParameterValue("delivery", "");
                        }
                        Printpreview obj = new Printpreview();
                        obj.rptDoc = rptDoc;
                        obj.Show();



                        rptDoc.Dispose();
                        System.GC.Collect();
                        try
                        {
                            obcustomerdisplay.addpoints(memberid, sid);
                            obcustomerdisplay.cinfo("");
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        public void bindreport(DataTable dtprint, string mop, string sid, string cardno, string ordertype, string total, string nettotal, string discount, string gst, string cash, string change, string printername, string deliveryinfo, int prints, string discountamount, string gstamount, string msg1, string msg2, string serice)
        {
            try
            {
                // if (dtcopy.Rows.Count > 0)
                {

                    //if (dsprint.Tables[0].Rows.Count > 0)
                    {

                        POSRestaurant.Reports.CashReceipt rptDoc = new Reports.CashReceipt();
                        POSRestaurant.Reports.DsCashReceipt dsrpt = new Reports.DsCashReceipt();
                        dsrpt.Clear();

                        DataTable dt = new DataTable();

                        dt.TableName = "Crystal Report";
                        dt = getAllOrders(dtprint, mop, sid, ordertype, total, nettotal, discount, gst);

                        //testprint tst = new testprint();
                        //tst.dt = dt;
                        //tst.Show();
                        //return;
                        dsrpt.Tables[0].Merge(dt);

                        rptDoc.SetDataSource(dsrpt);

                        if (mop == "Credit Card" || mop == "Master Card")
                        {


                            rptDoc.SetParameterValue("cardno", "Card No: " + cardno);
                        }
                        else
                        {
                            rptDoc.SetParameterValue("cardno", "");
                        }

                        ////if (txtcashrecvd.Text == "")
                        //{
                        //    cash = txtnettotal.Text;
                        //}
                        //else
                        //{
                        //    cash = txtcashrecvd.Text;
                        //}
                        //if (txtchange.Text == "")
                        //{
                        //    change = "0";
                        //}
                        //else
                        //{
                        //    change = txtchange.Text;
                        //}
                        // getcompany();

                        if (serice == "")
                        {
                            serice = "0";
                        }
                        rptDoc.SetParameterValue("service", serice);
                        string msg = "";
                        try
                        {
                            msg = dscompany.Tables[0].Rows[0]["WellComeNote"].ToString();
                        }
                        catch (Exception ex)
                        {

                        }
                        if (ordertype == "Dine In")
                        {
                            string tblno = gettbleno(sid);
                            rptDoc.SetParameterValue("table", "Table No: " + tblno);
                        }
                        else if (ordertype == "Take Away")
                        {
                            string cusid = getcustomerid(sid);
                            rptDoc.SetParameterValue("table", "Customer Id: " + cusid);
                        }
                        else
                        {

                            rptDoc.SetParameterValue("table", deliveryinfo);
                        }
                        if (gstperc == "0")
                        {
                            gstperc = "";
                        }
                        string title = gsttitle;
                        if (title == "")
                        {
                            title = "Sales Tax";
                        }
                        rptDoc.SetParameterValue("gst", title + "(" + gstperc + ")");
                        rptDoc.SetParameterValue("gstamount", gst);

                        if (discount == "0")
                        {
                            discount = "";
                            discountamount = "0";
                        }
                        else
                        {
                            discount = "Discount (" + discount + "%)";
                        }
                        rptDoc.SetParameterValue("discount", discount);
                        rptDoc.SetParameterValue("discountamount", discountamount);
                        rptDoc.SetParameterValue("subtotal", total);
                        rptDoc.SetParameterValue("nettotal", nettotal);


                        rptDoc.SetParameterValue("cash", cash);
                        rptDoc.SetParameterValue("change", change);
                        rptDoc.SetParameterValue("message", msg);
                        rptDoc.SetParameterValue("msg1", msg1);
                        rptDoc.SetParameterValue("qrcodetext", qrcode);

                        if (ordertype == "Delivery")
                        {
                            rptDoc.SetParameterValue("delivery", deliveryinfo);
                        }
                        else
                        {
                            rptDoc.SetParameterValue("delivery", "");
                        }

                        rptDoc.PrintOptions.PrinterName = printername;


                        rptDoc.PrintToPrinter(prints, false, 0, 0);
                        rptDoc.Dispose();
                        System.GC.Collect();
                        try
                        {
                            obcustomerdisplay.addpoints(memberid, sid);
                            obcustomerdisplay.cinfo("");
                        }
                        catch (Exception ex)
                        {


                        }
                    }

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        public DataTable getAllOrders(DataTable dtprint, string mp, string siid, string ordertype, string total, string nettotal, string discount, string gst)
        {

            DataTable dtrpt = new DataTable();
            dtrpt.Columns.Add("QTY", typeof(double));
            dtrpt.Columns.Add("ItemName", typeof(string));
            dtrpt.Columns.Add("Price", typeof(string));
            dtrpt.Columns.Add("Total", typeof(double));
            dtrpt.Columns.Add("Discount", typeof(double));
            dtrpt.Columns.Add("GST", typeof(double));
            dtrpt.Columns.Add("NetTotal", typeof(double));
            dtrpt.Columns.Add("Cashier", typeof(string));
            dtrpt.Columns.Add("CName", typeof(string));
            dtrpt.Columns.Add("CAddress", typeof(string));
            dtrpt.Columns.Add("CPhone", typeof(string));
            dtrpt.Columns.Add("MOP", typeof(string));
            dtrpt.Columns.Add("Invoice", typeof(string));
            dtrpt.Columns.Add("Date", typeof(string));
            dtrpt.Columns.Add("Time", typeof(string));
            dtrpt.Columns.Add("UnitPrice", typeof(string));
            dtrpt.Columns.Add("DiscountAmount", typeof(double));
            dtrpt.Columns.Add("logo", typeof(byte[]));
            dtrpt.Columns.Add("qrcode", typeof(byte[]));
            //string cname = "", caddress = "", cphone = "",logo="";
            //DataSet dsinfo = new DataSet();
            //objCore = new classes.Clsdbcon();
            //dsinfo = objCore.funGetDataSet("select * from CompanyInfo");

            //if (dsinfo.Tables[0].Rows.Count > 0)
            //{
            //    cname = dsinfo.Tables[0].Rows[0]["Name"].ToString();
            //    caddress = dsinfo.Tables[0].Rows[0]["Address"].ToString();
            //    cphone = dsinfo.Tables[0].Rows[0]["Phone"].ToString();
            //    logo = dsinfo.Tables[0].Rows[0]["logo"].ToString();
            //}
            //foreach (DataGridViewRow dr in dataGridView1.Rows)
            foreach (DataRow dr in dtprint.Rows)
            {
                try
                {
                    if (dr["Id"].ToString() != string.Empty)
                    {
                        string pc = dr["Price"].ToString();

                        string qnty = "";
                        //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                        //{
                        //    qnty = "";
                        //}
                        //else
                        {
                            qnty = dr["Qty"].ToString();
                        }
                        //if (pc == string.Empty)
                        //{
                        //    pc = "0";
                        //}
                        string tmp = qnty;
                        if (tmp == "")
                        {
                            tmp = "1";
                        }
                        int qty = Convert.ToInt32(tmp);
                        tmp = pc;
                        if (tmp == "")
                        {
                            tmp = "0";
                        }
                        double sprice = Convert.ToDouble(tmp);
                        discountamount = (Convert.ToDouble(total) * Convert.ToDouble(discount) / 100).ToString();
                        double singleprice = 0;
                        singleprice = sprice / qty;
                        string sprc = singleprice.ToString();
                        if (singleprice == 0)
                        {
                            sprc = "";
                        }
                        byte[] code = null;

                        try
                        {
                            qrcode = qrcode;// "11222";
                            Zen.Barcode.CodeQrBarcodeDraw qr = Zen.Barcode.BarcodeDrawFactory.CodeQr;
                            Image img = qr.Draw(qrcode, 30);
                            //pictureBox1.Image = img;

                            code = (byte[])(new ImageConverter()).ConvertTo(img, typeof(byte[]));

                        }
                        catch (Exception ex)
                        {

                        }

                        if (logo == "")
                        {
                            dtrpt.Rows.Add(qnty, dr["Item"].ToString(), (pc), Convert.ToDouble(total), Convert.ToDouble(discount), Convert.ToDouble(gst), Convert.ToDouble(nettotal), cashr, cname, caddress, cphone, mp, siid, "", gstperc.ToString() + " % ", sprc.ToString(), Convert.ToDouble(discountamount), null, code);
                        }
                        else
                        {
                            dtrpt.Rows.Add(qnty, dr["Item"].ToString(), (pc), Convert.ToDouble(total), Convert.ToDouble(discount), Convert.ToDouble(gst), Convert.ToDouble(nettotal), cashr, cname, caddress, cphone, mp, siid, "", gstperc.ToString() + " % ", sprc.ToString(), Convert.ToDouble(discountamount), dsinfo1.Tables[0].Rows[0]["logo"], code);
                        }
                        string modifier = dr["MdId"].ToString();
                        if (modifier == "")
                        {
                            modifier = "0";
                        }
                        string rmodifier = dr["runtimeflavourid"].ToString();
                        if (rmodifier == "")
                        {
                            rmodifier = "0";
                        }
                        if (modifier == "0" && rmodifier == "0")
                        {
                            try
                            {
                                string q = "SELECT        dbo.MenuItem.KDSId, dbo.MenuItem.Name,dbo.MenuItem.kdsid, dbo.Attachmenu1.Quantity FROM            dbo.Attachmenu1 INNER JOIN                         dbo.MenuItem ON dbo.Attachmenu1.attachmenuid = dbo.MenuItem.Id WHERE        (dbo.Attachmenu1.status = 'active') and dbo.Attachmenu1.menuitemid='" + dr["id"].ToString() + "'";
                                DataSet dsattach = new DataSet();
                                dsattach = objCore.funGetDataSet(q);
                                for (int j = 0; j < dsattach.Tables[0].Rows.Count; j++)
                                {
                                    string atname = "  " + dsattach.Tables[0].Rows[j]["Name"].ToString() + "(In Meal)";
                                    string attemp = dsattach.Tables[0].Rows[j]["Quantity"].ToString();
                                    if (attemp == "")
                                    {
                                        attemp = "0";
                                    }
                                    dtrpt.Rows.Add(qty * Convert.ToInt32(attemp), atname, "", 0, 0, 0, 0, cashr, cname, caddress, cphone, mp, siid, "", gstperc.ToString() + " % ", "", 0, null, code);


                                }
                            }
                            catch (Exception e)
                            {


                            }
                        }


                    }
                }
                catch (Exception ex)
                {


                }
            }

            return dtrpt;
        }
        public string getgst()
        {
            string gst = "0";
            DataSet dsgst = new DataSet();
            try
            {

                string q = "select gst from gst";
                dsgst = objCore.funGetDataSet(q);
                if (dsgst.Tables[0].Rows.Count > 0)
                {
                    gst = dsgst.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsgst.Dispose();
            }
            return gst;
        }
        public int getsaleid(int id, string brid)
        {
            int idd = id;
            DataSet dss = new DataSet();
            try
            {
                string q = "select * from sale where id='" + Convert.ToInt32(branchid + id.ToString()) + "'";
                dss = objCore.funGetDataSet(q);
                if (dss.Tables[0].Rows.Count > 0)
                {

                    idd = idd + 1;
                    getsaleid(idd, brid);

                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dss.Dispose();
            }
            return idd;

        }
        public string disuser = "";
        public void discountkeyrecord(string salid)
        {
            try
            {
                string q = "insert into DiscountTrack (saleid, userid) values('" + salid + "','" + disuser + "')";
                objCore.executeQuery(q);
                disuser = "";
            }
            catch (Exception ex)
            {


            }
        }
        public void playbuzz()
        {
            //this.TopMost = false;
            if (printtype() == "opos")
            {
                OPOSPOSPrinter printer = new OPOSPOSPrinter(); ;
                try
                {
                    string pname = printername("kds");
                    if (pname != "")
                    {
                        printer.Open(pname);
                        printer.ClaimDevice(3000);
                        printer.DeviceEnabled = true;
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        printer.ReleaseDevice();
                        printer.Close();
                    }
                }
                catch (Exception ex)
                {
                    //MessageBox.Show(ex.Message);
                }
            }
        }
        protected void getbranchid()
        {
            try
            {
                string q = "select id from branch";
                DataSet ds = new DataSet();
                ds = objCore.funGetDataSet(q);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    branchid = ds.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
        }
        public void saleDS(string saletype, string recvd, string chng, string cname, string pasotype, string phone, string gsttype,string staffid)
        {
            //try
            //{

            //    TabPage page = tabControl1.SelectedTab;
            //    var controls = page.Controls;
            //    foreach (var control in controls)
            //    {
            //        if (control is DataGridView)
            //        {
            //            DataGridView grid = control as DataGridView;
            //            if (grid.Rows.Count <= 0)
            //            {
            //                return;
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{

            //    // throw;
            //}
            try
            {
                bool chk = false;
              

                if (txtdiscount.Enabled == true)
                {
                    disc = true;
                }
                int id = 0;
                discountamount = txtdiscountamount.Text;
                if (discountamount == "")
                {
                    discountamount = "0";
                }


                ds = new DataSet();
                string qry = "";


                if (date == "")
                {
                    ds = new DataSet();
                    try
                    {
                        ds = objCore.funGetDataSet("select top(1) * from dayend  where DayStatus='open'  order by id desc");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            date = ds.Tables[0].Rows[0]["Date"].ToString();
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        ds.Dispose();
                    }
                }

                string terminal = System.Environment.MachineName.ToString();
                int result2 = 0;
                string q = "";

                try
                {
                    q = "INSERT INTO DSSale (Staffid, Date, time, UserId, TotalBill, Discount, DiscountAmount, NetBill, BillType, OrderType, GST, BillStatus, OrderStatus, Terminal, UploadStatus, branchid, GSTPerc, Shiftid, Customer, message, Deliverystatus,                         servicecharges, TerminalOrder, phone, invoice, discountid, OnlineId, uploadstatusserver, DeliveredTime, discountkeyid, uploadstatusbilltype, uploadstatusrefund, FBRcode, RiderId, UploadstatusDelivery, cashierid, GSTtype,                        Token, cancelservicecharges) SELECT "+staffid+" , Date, time, UserId, TotalBill, Discount, DiscountAmount, NetBill, BillType, OrderType, GST, BillStatus, OrderStatus, Terminal, UploadStatus, branchid, GSTPerc, Shiftid, Customer, message, Deliverystatus,                         servicecharges, TerminalOrder, phone, invoice, discountid, OnlineId, uploadstatusserver, DeliveredTime, discountkeyid, uploadstatusbilltype, uploadstatusrefund, FBRcode, RiderId, UploadstatusDelivery, cashierid, GSTtype,                        Token, cancelservicecharges FROM            Sale WHERE id=" + saleid;
                   
                    result2 = objCore.executeQueryint(q);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Sale Save failed . Please try again later", ex.Message + ", " + q);
                    return;

                }

                DataSet dssale = new DataSet();
                if (result2 <= 0)
                {
                    MessageBox.Show("Failed To Save Data", "Sale");
                    return;
                }
                ds = new DataSet();
                try
                {

                    qry = "select max(id) as id from DSSale  where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";

                    ds = objCore.funGetDataSet(qry);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        string i = ds.Tables[0].Rows[0][0].ToString();
                        if (i == string.Empty)
                        {
                            i = "0";
                        }
                        id = Convert.ToInt32(i);

                    }
                }
                catch (Exception ex)
                {


                }
                finally
                {
                    ds.Dispose();
                }

                Thread salethread;

                if (this.tabControl1.InvokeRequired)
                {
                    SetTextCallback d = new SetTextCallback(SetText);
                    this.Invoke(d, new object[] { saleid.ToString() });
                }
                else
                {
                    tabControl1.SelectedTab.Name = saleid.ToString();
                }
                q = "INSERT INTO DSSaledetails ( saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc, OrderStatusmain, atid, dealid, OnlineId, kdsgroup, time, kdsid, pointscode, completedtime) SELECT " + id + ", MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc, OrderStatusmain, atid, dealid, OnlineId, kdsgroup, time, kdsid, pointscode, completedtime  FROM            Saledetails WHERE saleid=" + saleid;
                result2 = objCore.executeQueryint(q);
                if (result2 <= 0)
                {
                    q = "delete from DSSale where id=" + id;
                    objCore.executeQueryint(q);
                    MessageBox.Show("Failed To Save Data", "Details");
                    return;
                }
                q = "delete from dsbilltype where saleid=" + id;
                objCore.executeQueryint(q);
                q = "insert into dsbilltype (type, saleid, Amount,  cashoutime) values ('" + saletype + "','" + id + "','" + txtnettotal.Text + "','" + DateTime.Now + "')";
                result2 = objCore.executeQueryint(q);
                if (result2 <= 0)
                {

                    q = "delete from DSSaledetails where saleid=" + id;
                    objCore.executeQueryint(q);
                    q = "delete from dsbilltype where saleid=" + id;
                    objCore.executeQueryint(q);
                    q = "delete from DSSale where id=" + id;
                    objCore.executeQueryint(q);
                    MessageBox.Show("Failed To Save Data", "Bill Type");
                    return;
                }
                callrecipe("New");
                cname1 = cname; date1 = date; cashr1 = cashr; recvd1 = recvd; chng1 = chng; saletype1 = saletype; total1 = txttotal.Text; gst1 = lblgst.Text; discount1 = txtdiscount.Text; nettotal1 = txtnettotal.Text.ToString(); otype1 = "Take Away"; discountamount1 = txtdiscountamount.Text;
                double advance = 0;
                sid1 = saleid.ToString();
                updatesalesDS(id.ToString(), "Take Away", gsttype);
                Thread salethreadnew;
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                string type = printtype();
                try
                {
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            dtcopy = new DataTable();
                            DataGridView grid = control as DataGridView;
                            DataTable tbl = grid.DataSource as DataTable;
                            DataTable tblcopy = tbl;



                            datatableprint = new DataTable();
                            datatableprint = tblcopy.Copy();

                            //if (type == "opos")
                            //{
                            //    for (int i = 0; i < totalprints(); i++)
                            //    {
                            //        if (threading() == "yes")
                            //        {
                            //            if (isThreadRunningsalee == false)
                            //            {
                            //                salethreadnew = new Thread(() => PrintReceiptThreadingsale(tblcopy, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype1, total1, gst1, txtdiscountamount.Text, gstperc, txtdiscount.Text, net1.ToString(), otype1));
                            //                salethreadnew.IsBackground = true;
                            //                salethreadnew.Start();
                            //            }
                            //        }
                            //        else
                            //        {
                            //            PrintReceipt(tbl, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net.ToString(), otype, invoiceno);
                            //        }
                            //    }
                            //}
                            //else if (type == "generic")
                            //{
                            //    for (int i = 0; i < totalprints(); i++)
                            //    {
                            //        Print(printername("generic"), saleid.ToString(), cashr, cname, saletype, "", tbl, recvd, chng, total1, txtdiscountamount.Text, gst, "", ordertype1, date.ToString(), invoiceno);

                            //    }
                            //}
                            //else 
                            if (type == "rdlc")
                            {
                                string invoiceno = "";
                                if (printinvoiceno.Trim().ToLower() == "yes")
                                {
                                    invoiceno = getinvoicenopaid(saleid.ToString());
                                }
                                string path = Path.GetDirectoryName(Application.ExecutablePath);
                                int print = 1;
                                string printername = "";
                                DataSet dsprint = new DataSet();
                                q = "select * from Printers where type='Receipt'";
                                SqlDataReader dr = objCore.funGetDataReader1(q);

                                try
                                {
                                    if (dr.Read())
                                    {
                                        printername = dr["name"].ToString();
                                        string temp = dr["Prints"].ToString();
                                        if (temp == "")
                                        {
                                            temp = "1";
                                        }
                                        print = Convert.ToInt32(temp);
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                                getcompany();
                                string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                                string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                                string svschrgs = txtservice.Text;
                                string info = "";// getdeliveryinfo(saleid.ToString());
                                if (ordertype1 == "Dine In")
                                {
                                    string tblno = gettbleno(saleid.ToString());
                                    info = "Table No: " + tblno;
                                }
                                else if (ordertype1 == "Take Away")
                                {
                                    string cusid = getcustomerid(saleid.ToString());
                                    info = "Customer Id: " + cusid;
                                }
                                else
                                {

                                    info = getdeliveryinfo(saleid.ToString());
                                }
                                if (pointsurl == "")
                                {
                                    try
                                    {
                                        string value;
                                        value = CacheClass.Cache["pointsurl"] as string;
                                        if (null == value)
                                        {

                                        }
                                        else
                                        {
                                            pointsurl = value;
                                        }
                                    }
                                    catch (Exception ex)
                                    {


                                    }
                                }
                                salethread = new Thread(() => PrintClass.Printt(path, datatableprint, saletype, sid1.ToString(), "", ordertype1, total1, nettotal1, discount1, gstperc, (Convert.ToDouble(recvd) + advance).ToString(), chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs, cashr1, date1, "", this, qrcode, pointsurl, invoiceno, "Sale Slip"));
                                salethread.IsBackground = true;
                                salethread.Start();
                                opendrawer1();
                            }
                           
                            tbl.Clear();
                        }
                    }
                }

                catch (Exception ex)
                {

                    // MessageBox.Show(ex.Message);
                }
                q = "delete from saledetails where saleid="+saleid;
                objCore.executeQuery(q);
                q = "delete from billtype where saleid=" + saleid;
                objCore.executeQuery(q);
               
                q = "delete from DinInTables where saleid=" + saleid;
                objCore.executeQuery(q);
                q = "delete from sale where id=" + saleid;
                objCore.executeQuery(q);
                saleid = 0;
                try
                {

                    if (tabControl1.TabCount > 1)
                    {
                        tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                    }
                    else
                    {
                        tabControl1.SelectedTab.Text = "";
                        tabControl1.SelectedTab.Name = "tab";
                    }
                }
                catch (Exception ex)
                {
                }
                getorders("new");
                tabControl1.TabPages.Clear();
                count = tabControl1.TabCount;
                
                {
                    saleid = 0;

                    newordertype = "";
                    neworder(count.ToString());

                }
            }
            catch (Exception ex)
            {

                // MessageBox.Show(ex.Message);
            }
        }
        public void sale(string billtype, string ordertype, string name)
        {
            try
            {

                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count <= 0)
                        {
                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                // throw;
            }
           
            try
            {
                bool chk = false;
                string saletype = "";
                if (editsale == string.Empty)
                {
                    saletype = "New";
                }
                else
                {
                    saletype = "Old";
                }
                if (saleid == 0)
                {
                    saletype = "New";

                }
                else
                {
                    
                    saletype = "Old";
                }
                if (saletype == "New")
                {
                    if (tabControl1.SelectedTab.Name.Contains("tab") || tabControl1.SelectedTab.Name == "")
                    {
                        saletype = "New";
                    }
                    else
                    {
                        saletype = "Old";
                        saleid = Convert.ToInt32(tabControl1.SelectedTab.Name.ToString());
                        arraysalid(saleid.ToString());
                    }
                }
                if (txtdiscount.Enabled == true)
                {
                    disc = true;
                }
                int id = 0;
                discountamount = txtdiscountamount.Text;
                if (discountamount == "")
                {
                    discountamount = "0";
                }
                if (saletype == "New")
                {

                    ds = new DataSet();
                    string qry = "";
                    //if (txtdiscount.Text == "100")
                    //{
                    //    qry = "select max(id) as id from sale1";
                    //}
                    //else
                    //{

                    //    qry = "select max(id) as id from sale";
                    //}
                    //ds = objCore.funGetDataSet(qry);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    string i = ds.Tables[0].Rows[0][0].ToString();
                    //    if (i == string.Empty)
                    //    {
                    //        i = "0";
                    //    }
                    //    id = Convert.ToInt32(i) + 1;
                    //}
                    //else
                    //{
                    //    id = Convert.ToInt32("1");
                    //}

                    if (date == "")
                    {
                        ds = new DataSet();
                        try
                        {
                            ds = objCore.funGetDataSet("select top(1) * from dayend  where DayStatus='open'  order by id desc");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                date = ds.Tables[0].Rows[0]["Date"].ToString();
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {
                            ds.Dispose();
                        }
                    }
                    string gst = getgst();
                    string terminal = System.Environment.MachineName.ToString();
                    try
                    {
                        //ds = new DataSet();
                        //try
                        //{
                        //    ds = objCore.funGetDataSet("select  *  from tabs where tabname='" + System.Environment.MachineName.ToString() + "'");
                        //    if (ds.Tables[0].Rows.Count > 0)
                        //    {
                        //        terminal = ds.Tables[0].Rows[0]["targetterminal"].ToString();
                        //    }
                        //}
                        //catch (Exception ex)
                        //{


                        //}
                        //finally
                        //{
                        //    ds.Dispose();
                        //}
                    }
                    catch (Exception ex)
                    {


                    }
                   
                    if (branchid == "")
                    {
                        getbranchid();
                    }
                    //date = textBox1.Text;
                    string q = "";
                    
                    {
                      //  q = "insert into sale (UploadstatusDelivery,branchid,discountid,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer,servicecharges,TerminalOrder,invoice) values ('','" + branchid + "','" + discountcompaignid + "','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" +                         ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "','" + txtservice.Text + "','" + System.Environment.MachineName.ToString() + "','" + getinvoiceno() + "')";
                       
                        try
                        {
                            string cs = objCore.getConnectionString();
                            SqlConnection conn = new SqlConnection(cs);
                            conn.Close();
                            conn.Open();
                            SqlCommand cmd = conn.CreateCommand();

                            cmd.CommandText = "str_sale";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("UploadstatusDelivery", "");
                            cmd.Parameters.AddWithValue("branchid", Convert.ToInt32(branchid));
                            cmd.Parameters.AddWithValue("discountid", discountcompaignid.ToString());
                            cmd.Parameters.AddWithValue("date", date);
                            cmd.Parameters.AddWithValue("time", DateTime.Now.ToString());
                            cmd.Parameters.AddWithValue("UserId", userid);
                            cmd.Parameters.AddWithValue("TotalBill", txttotal.Text);
                            cmd.Parameters.AddWithValue("Discount", txtdiscount.Text);
                            cmd.Parameters.AddWithValue("NetBill", txtnettotal.Text);
                            cmd.Parameters.AddWithValue("BillType", billtype);
                            cmd.Parameters.AddWithValue("OrderType", ordertype);
                            cmd.Parameters.AddWithValue("GST", lblgst.Text);
                            cmd.Parameters.AddWithValue("BillStatus", "Pending");
                            cmd.Parameters.AddWithValue("Terminal", terminal);
                            cmd.Parameters.AddWithValue("uploadstatus", "Pending");
                            cmd.Parameters.AddWithValue("OrderStatus", "Pending");
                            cmd.Parameters.AddWithValue("GSTPerc", gst);
                            cmd.Parameters.AddWithValue("Shiftid", shiftid);
                            cmd.Parameters.AddWithValue("customer", name);
                            cmd.Parameters.AddWithValue("servicecharges", txtservice.Text);
                            cmd.Parameters.AddWithValue("TerminalOrder", System.Environment.MachineName.ToString());
                            //cmd.Parameters.AddWithValue("invoice", invno);

                            int result2 = cmd.ExecuteNonQuery();
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show("Sale Save failed . Please try again later");
                            return;
                            
                        }
                        
                    }
                    //if (txtdiscount.Text == "100")
                    //{
                    //    q = "insert into sale1 (id,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer) values ('" + id + "','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "')";
                    //}
                    //else
                    //{
                    //    q = "insert into sale (id,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer,servicecharges,TerminalOrder) values ('" + id + "','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "','" + txtservice.Text + "','" + System.Environment.MachineName.ToString() + "')";
                    //}
                   // objCore.executeQuery(q);
                    try
                    {
                        if (Convert.ToDouble(txtdiscount.Text.Trim()) > 0)
                        {
                            discountkeyrecord(id.ToString());
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    DataSet dssale = new DataSet();
                    //q = "select max(id) as id from sale where userid='" + userid + "'";
                    //dssale = objCore.funGetDataSet(q);
                    //if (dssale.Tables[0].Rows.Count > 0)
                    ds = new DataSet();
                    try
                    {
                        //if (txtdiscount.Text == "100")
                        //{
                        //    qry = "select max(id) as id from sale1 where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        //}
                        //else
                        {

                            qry = "select max(id) as id from sale  where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        }
                        ds = objCore.funGetDataSet(qry);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string i = ds.Tables[0].Rows[0][0].ToString();
                            if (i == string.Empty)
                            {
                                i = "0";
                            }
                            id = Convert.ToInt32(i);
                            string invno = getinvoiceno();
                            q = "update sale set invoice='" + invno + "' where id='" + id + "'";
                            objCore.executeQuery(q);
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        ds.Dispose();
                    }
                    saleid = Convert.ToInt32(id);

                    if (complimentryreason != string.Empty)
                    {
                        savecomlimentrysale(saleid.ToString());
                    }
                }
                else
                {

                    string q = "update sale set FBRcode='" + qrcode + "', Shiftid='" + shiftid + "', TerminalOrder='" + System.Environment.MachineName.ToString() + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',servicecharges='" + txtservice.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + txtnettotal.Text.Trim() + "',GST='" + lblgst.Text + "',GSTPerc='" + gstperc + "'  where id='" + saleid + "'";
                    objCore.executeQuery(q);
                }
                if (this.tabControl1.InvokeRequired)
                {
                    SetTextCallback d = new SetTextCallback(SetText);
                    this.Invoke(d, new object[] { saleid.ToString() });
                }
                else
                {
                    tabControl1.SelectedTab.Name = saleid.ToString();
                }
                arraysalid(saleid.ToString());
                DataSet dsgroup = new DataSet();
                int kdsgroup = 1;
                try
                {
                    string qry = "select max(kdsgroup) as id from saledetails";
                    dsgroup = objCore.funGetDataSet(qry);
                    if (dsgroup.Tables[0].Rows.Count > 0)
                    {
                        string i = dsgroup.Tables[0].Rows[0][0].ToString();
                        if (i == string.Empty)
                        {
                            i = "0";
                        }
                        kdsgroup = Convert.ToInt32(i) + 1;
                    }
                }
                catch (Exception ex)
                {


                }
                finally
                {
                    dsgroup.Dispose();
                }
                

                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        foreach (DataGridViewRow dr in grid.Rows)
                        {
                            try
                            {
                                double discount = 0, gstt = 0, scarges = 0;
                                try
                                {
                                    string val = dr.Cells["Price"].Value.ToString();
                                    if (val == "")
                                    {
                                        val = "0";
                                    }


                                    double price = Convert.ToDouble(val);

                                    scarges = (price * servicecharhes) / 100;
                                    scarges = Math.Round(scarges, 2);
                                    val = txtdiscount.Text;
                                    if (val == "")
                                    {
                                        val = "0";
                                    }
                                    string ordertyppe = "";
                                    if (saleid > 0)
                                    {
                                        ordertyppe = getordertype();
                                    }
                                    else
                                    {
                                        ordertyppe = newordertype;
                                    }
                                    if (ordertyppe == "")
                                    {
                                        ordertyppe = newordertype;
                                    }
                                    if (ordertyppe == "Take Away")
                                    {
                                        scarges = 0;
                                    }
                                    double dis = Convert.ToDouble(val);
                                    if (dis > 0 && price > 0)
                                    {
                                        discount = (price * dis) / 100;
                                        discount = Math.Round(discount, 2);
                                    }


                                    val = lblgst.Text;
                                    if (val == "")
                                    {
                                        val = "0";
                                    }
                                    gstt = Convert.ToDouble(gst);
                                    if (applydiscount() == "before")
                                    {

                                        if (gstt > 0 && price > 0)
                                        {
                                            gstt = ((price + scarges) * gstt) / 100;
                                            gstt = Math.Round(gstt, 2);
                                        }
                                        else
                                        {
                                            gstt = 0;
                                        }
                                    }
                                    else
                                    {
                                        if (gstt > 0 && price > 0)
                                        {
                                            gstt = ((price - discount) * gstt) / 100;
                                            gstt = Math.Round(gstt, 2);
                                        }
                                        else
                                        {
                                            gstt = 0;
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                                // if (dr.Cells["Id"].Value.ToString() != string.Empty)
                                {
                                    if (dr.Cells["SaleType"].Value.ToString() == "Old")
                                    {
                                        // saleid = Convert.ToInt32(editsale);
                                        double inddis = 0;
                                        try
                                        {
                                            inddis = getdiscountinddetails(dr.Cells["SaleDetailid"].Value.ToString());
                                        }
                                        catch (Exception)
                                        {

                                        }

                                        string qq = "update saledetails set Quantity='" + dr.Cells["Qty"].Value.ToString() + "',Price='" + dr.Cells["Price"].Value.ToString() + "', Itemdiscount= '" + (discount + inddis) + "', ItemdiscountPerc='" + txtdiscount.Text + "', ItemGst='" + gstt + "', ItemGstPerc='" + gst + "'  where id='" + dr.Cells["SaleDetailid"].Value.ToString() + "'";
                                        objCore.executeQuery(qq);
                                    }
                                    else if (dr.Cells["SaleType"].Value.ToString() == "New")
                                    {
                                        double sdid = 0;
                                        try
                                        {
                                            sdid = Convert.ToDouble(dr.Cells["SaleDetailid"].Value.ToString());
                                        }
                                        catch (Exception)
                                        {

                                        }
                                        if (sdid > 0 )
                                        {
                                            if (PrintKitchen == "Disabled")
                                            {
                                                string q = "select * from saledetails where id='" + sdid + "'";
                                                DataSet dsdet = new DataSet();
                                                dsdet = objCore.funGetDataSet(q);
                                                if (dsdet.Tables[0].Rows.Count > 0)
                                                {
                                                    double inddis = 0;
                                                    try
                                                    {
                                                        inddis = getdiscountinddetails(dr.Cells["SaleDetailid"].Value.ToString());
                                                    }
                                                    catch (Exception)
                                                    {

                                                    }
                                                    double oldqty = 0, newqty = 0; ;
                                                    string temp = dsdet.Tables[0].Rows[0]["Quantity"].ToString();
                                                    if (temp == "")
                                                    {
                                                        temp = "0";
                                                    }
                                                    oldqty = Convert.ToDouble(temp);
                                                    temp = dr.Cells["Qty"].Value.ToString();
                                                    if (temp == "")
                                                    {
                                                        temp = "0";
                                                    }
                                                    newqty = Convert.ToDouble(temp);
                                                    q = "update saledetails set Quantity='" + dr.Cells["Qty"].Value.ToString() + "',Price='" + dr.Cells["Price"].Value.ToString() + "', Itemdiscount= '" + (discount + inddis) + "', ItemdiscountPerc='" + txtdiscount.Text + "', ItemGst='" + gstt + "', ItemGstPerc='" + gst + "'  where id='" + dr.Cells["SaleDetailid"].Value.ToString() + "'";
                                                    objCore.executeQuery(q);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            string q = "update sale set time='" + DateTime.Now + "' where id='" + saleid + "'";
                                            //objCore.executeQuery(q);
                                            id = 0;
                                            ds = new DataSet();
                                            double qtydel = 0;

                                            string indvdiscount = "0";
                                            try
                                            {
                                                // string q = "";// "select id,Discount,timeto from DiscountCompaign where Datefrom <='" + date + "' and DateTo >='" + date + "' and " + Convert.ToDateTime(date).DayOfWeek.ToString() + "='true' and TimeFrom <= '" + DateTime.Now.TimeOfDay + "' and type='Individual'";
                                                q = "SELECT        dbo.DiscountCompaign.Id, dbo.DiscountCompaign.Discount, dbo.DiscountCompaign.TimeTo FROM            dbo.DiscountCompaign INNER JOIN                         dbo.MenuItem ON dbo.DiscountCompaign.groupid = dbo.MenuItem.MenuGroupId  where dbo.DiscountCompaign.Datefrom <='" + date + "' and dbo.DiscountCompaign.DateTo >='" + date + "' and dbo.DiscountCompaign." + Convert.ToDateTime(date).DayOfWeek.ToString() + "='true' and dbo.DiscountCompaign.TimeFrom <= '" + DateTime.Now.TimeOfDay + "' and type='Individual' and dbo.menuitem.id='" + dr.Cells["Id"].Value.ToString() + "'  and dbo.DiscountCompaign.status='Active'";
                                                DataSet dsgst1 = new DataSet();
                                                dsgst1 = objCore.funGetDataSet(q);
                                                if (dsgst1.Tables[0].Rows.Count > 0)
                                                {
                                                    string timeto = dsgst1.Tables[0].Rows[0]["timeto"].ToString();
                                                    if (timeto == "")
                                                    {
                                                        indvdiscount = (dsgst1.Tables[0].Rows[0]["Discount"].ToString());

                                                    }
                                                    else
                                                    {
                                                        TimeSpan DBEndTime = (TimeSpan)dsgst1.Tables[0].Rows[0]["timeto"];

                                                        if (DateTime.Now.TimeOfDay <= DBEndTime)
                                                        {
                                                            indvdiscount = (dsgst1.Tables[0].Rows[0]["Discount"].ToString());

                                                        }
                                                        else
                                                        {
                                                            indvdiscount = "0";

                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    indvdiscount = "0";

                                                }
                                            }
                                            catch (Exception ex)
                                            {


                                            }

                                            double indvdiscountdetails = 0;

                                            if (indvdiscount == "")
                                            {
                                                indvdiscount = "0";
                                            }
                                            string dqty = "0", atid = "0", kdsidd = "0";
                                            // string q = "";
                                            if (dr.Cells["Id"].Value.ToString() == "")
                                            {
                                                dqty = dr.Cells["atid"].Value.ToString();
                                            }
                                            else
                                            {
                                                atid = dr.Cells["atid"].Value.ToString();
                                            }
                                            q = "";
                                            double updatedprice = 0;

                                            string tempp = dr.Cells["Qty"].Value.ToString();
                                            if (tempp == "")
                                            {
                                                tempp = "0";
                                            }
                                            qtydel = Convert.ToDouble(tempp);

                                            string price = dr.Cells["Price"].Value.ToString();
                                            if (price == "")
                                            {
                                                price = "0";
                                            }

                                            try
                                            {
                                                indvdiscountdetails = Math.Round((Convert.ToDouble(price) * (Convert.ToDouble(indvdiscount) / 100)), 2);
                                            }
                                            catch (Exception ex)
                                            {

                                            }

                                            bool chkkds = true;
                                            updatedprice = Convert.ToDouble(price);
                                            try
                                            {
                                                if (ordertype.ToLower() == "delivery")
                                                {
                                                    string temp1 = forms.NewLogIn.resordersource.Where(s => s.type == ordersource).ToList()[0].amount;
                                                    if (temp1 == "")
                                                    {
                                                        temp1 = "0";
                                                    }
                                                    double deliveryincreament = float.Parse(temp1);
                                                    if (deliveryincreament > 0)
                                                    {
                                                        double deliveryincreamentamount = updatedprice * deliveryincreament / 100;
                                                        deliveryincreamentamount = Math.Round(deliveryincreamentamount, 2);
                                                        updatedprice = updatedprice + deliveryincreamentamount;
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {

                                            }
                                            string temp = dr.Cells["MdId"].Value.ToString();
                                            if (temp == "")
                                            {
                                                temp = "0";
                                            }
                                            if (temp != "0")
                                            {
                                                kdsidd = getkdss(temp, "modifier");
                                                chkkds = false;
                                            }
                                            string mdid = temp;
                                            temp = dr.Cells["runtimeflavourid"].Value.ToString();
                                            if (temp == "")
                                            {
                                                temp = "0";
                                            }
                                            if (temp != "0")
                                            {
                                                kdsidd = getkdss(temp, "rmodifier");
                                                chkkds = false;
                                            }
                                            if (chkkds == true)
                                            {
                                                kdsidd = getkdss(dr.Cells["Id"].Value.ToString(), "");
                                            }
                                            if (System.Environment.MachineName.ToString().ToUpper() == "POS-DRIVE-THROUGH")
                                            {

                                                kdsidd = "10";
                                            }

                                            string rmdid = temp;
                                            temp = "";
                                            string priority = "Normal";
                                            if (saletype == "Old")
                                            {
                                                priority = "High";
                                            }
                                            q = "insert into saledetails (Priority,pointscode,kdsid,time,kdsgroup,atid,dealid,saleid,MenuItemId,ModifierId,Quantity,Price,status,Flavourid,comments,OrderStatus,RunTimeModifierId, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) values ('" + priority + "', '" + dr.Cells["code"].Value.ToString() + "','" + kdsidd + "','" + DateTime.Now + "','" + kdsgroup + "','" + atid + "','" + dqty + "','" + saleid + "','" + dr.Cells["Id"].Value.ToString() + "','" + dr.Cells["MdId"].Value.ToString() + "','" + dr.Cells["Qty"].Value.ToString() + "','" + updatedprice + "','Not Void','" + dr.Cells["flavourid"].Value.ToString() + "','" + dr.Cells["comments"].Value.ToString() + "','Pending','" + dr.Cells["runtimeflavourid"].Value.ToString() + "','" + discount + indvdiscountdetails + "','" + txtdiscount.Text + "','" + gstt + "','" + gst + "')";

                                            objCore.executeQuery(q);
                                            if (indvdiscountdetails > 0)
                                            {
                                                int sdetid = 0;
                                                try
                                                {
                                                    dsgroup = new DataSet();
                                                    string qry = "select max(id) as id from saledetails where saleid='" + saleid + "'";
                                                    dsgroup = objCore.funGetDataSet(qry);
                                                    if (dsgroup.Tables[0].Rows.Count > 0)
                                                    {
                                                        string i = dsgroup.Tables[0].Rows[0][0].ToString();
                                                        if (i == string.Empty)
                                                        {
                                                            i = "0";
                                                        }
                                                        sdetid = Convert.ToInt32(i);
                                                        q = "insert into DiscountIndividual (DiscountPerc,Discount, MenuItemId, Saleid, Userid, Date, Saledetailsid,Runtimemodifierid,flavourid)values('" + indvdiscount + "','" + indvdiscountdetails + "','" + dr.Cells["Id"].Value.ToString() + "','" + saleid + "','" + userid + "','" + DateTime.Now + "','" + sdetid + "','" + dr.Cells["runtimeflavourid"].Value.ToString() + "','" + dr.Cells["flavourid"].Value.ToString() + "')";
                                                        objCore.executeQuery(q);
                                                    }
                                                }
                                                catch (Exception ex)
                                                {


                                                }
                                                finally
                                                {
                                                    dsgroup.Dispose();
                                                }
                                            }
                                            chk = true;


                                        }

                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                txtdiscount.Enabled = false;
                //if (chk==true)
                //{
                //    bindreportkitchen(saleid.ToString());
                //}
                //MessageBox.Show("Sale Added Successfully");
                // bindreport(billtype,saleid.ToString());
            }
            catch (Exception ex)
            {

               // MessageBox.Show(ex.Message);
            }
        }
        protected string getkdss(string id, string type)
        {
            string q = "", kid = "";

            if (type.ToLower() == "modifier")
            {
                q = "select kdsid from Modifier where id='" + id + "'";

            }
            else
                if (type.ToLower() == "rmodifier")
                {
                    q = "select kdsid from RuntimeModifier where id='" + id + "'";

                }
                else
                {
                    q = "select kdsid from menuitem where id='" + id + "'";

                }
            DataSet dskds = new DataSet();
            dskds = objCore.funGetDataSet(q);
            if (dskds.Tables[0].Rows.Count > 0)
            {
                kid = dskds.Tables[0].Rows[0][0].ToString();
            }
            return kid;
        }
        public void sale(string billtype, string ordertype, string name, string tabname, DataTable dtdetails)
        {
            try
            {
                if (dtdetails.Rows.Count <= 0)
                {
                    return;
                }

            }
            catch (Exception ex)
            {

                // throw;
            }
            try
            {
                bool chk = false;
                string saletype = "";
                if (editsale == string.Empty)
                {
                    saletype = "New";
                }
                else
                {
                    saletype = "Old";
                }
                if (saleid == 0)
                {
                    saletype = "New";

                }
                else
                {
                    saletype = "Old";
                }
                if (saletype == "New")
                {
                    if (tabname.Contains("tab") || tabname == "")
                    {
                        saletype = "New";
                    }
                    else
                    {

                        saletype = "Old";
                        saleid = Convert.ToInt32(tabname.ToString());
                        arraysalid(saleid.ToString());
                    }
                }
                if (txtdiscount.Enabled == true)
                {
                    disc = true;
                }
                int id = 0;
                discountamount = txtdiscountamount.Text;
                if (discountamount == "")
                {
                    discountamount = "0";
                }
                if (saletype == "New")
                {

                    ds = new DataSet();
                    string qry = "";
                    //if (txtdiscount.Text == "100")
                    //{
                    //    qry = "select max(id) as id from sale1";
                    //}
                    //else
                    //{

                    //    qry = "select max(id) as id from sale";
                    //}
                    //ds = objCore.funGetDataSet(qry);
                    //if (ds.Tables[0].Rows.Count > 0)
                    //{
                    //    string i = ds.Tables[0].Rows[0][0].ToString();
                    //    if (i == string.Empty)
                    //    {
                    //        i = "0";
                    //    }
                    //    id = Convert.ToInt32(i) + 1;
                    //}
                    //else
                    //{
                    //    id = Convert.ToInt32("1");
                    //}

                    if (date == "")
                    {
                        ds = new DataSet();
                        try
                        {
                            ds = objCore.funGetDataSet("select top(1) * from dayend  where DayStatus='open'  order by id desc");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                date = ds.Tables[0].Rows[0]["Date"].ToString();
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {
                            ds.Dispose();
                        }
                    }
                    string gst = getgst();
                    string terminal = System.Environment.MachineName.ToString();
                    try
                    {
                        ds = new DataSet();
                        try
                        {
                            ds = objCore.funGetDataSet("select  *  from tabs where tabname='" + System.Environment.MachineName.ToString() + "'");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                terminal = ds.Tables[0].Rows[0]["targetterminal"].ToString();
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {
                            ds.Dispose();
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    //date = textBox1.Text;
                    string q = "";
                    //if (txtdiscount.Text == "100")
                    //{
                    //    q = "insert into sale1 (date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer) values ('" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "')";
                    //}
                    //else
                    {
                        q = "insert into sale (discountkeyid,UploadstatusDelivery,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer,servicecharges,TerminalOrder) values ('" + discountid + "','','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "','" + txtservice.Text + "','" + System.Environment.MachineName.ToString() + "')";

                    }
                    //if (txtdiscount.Text == "100")
                    //{
                    //    q = "insert into sale1 (id,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer) values ('" + id + "','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "')";
                    //}
                    //else
                    //{
                    //    q = "insert into sale (id,date,time,UserId,TotalBill,Discount,NetBill,BillType,OrderType,GST,BillStatus,Terminal,uploadstatus,OrderStatus,GSTPerc,Shiftid,customer,servicecharges,TerminalOrder) values ('" + id + "','" + date + "','" + DateTime.Now + "','" + userid + "','" + txttotal.Text + "','" + txtdiscount.Text + "','" + txtnettotal.Text + "','" + billtype + "','" + ordertype + "','" + lblgst.Text + "','Pending','" + terminal + "','Pending','Pending','" + gst + "','" + shiftid + "','" + name + "','" + txtservice.Text + "','" + System.Environment.MachineName.ToString() + "')";
                    //}
                    objCore.executeQuery(q);
                    if (txtdiscount.Text.Trim() != "" || txtdiscount.Text.Trim() != "0")
                    {
                        discountkeyrecord(id.ToString());
                    }
                    DataSet dssale = new DataSet();
                    //q = "select max(id) as id from sale where userid='" + userid + "'";
                    //dssale = objCore.funGetDataSet(q);
                    //if (dssale.Tables[0].Rows.Count > 0)
                    ds = new DataSet();
                    try
                    {
                        //if (txtdiscount.Text == "100")
                        //{
                        //    qry = "select max(id) as id from sale1 where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        //}
                        //else
                        {

                            qry = "select max(id) as id from sale  where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        }
                        ds = objCore.funGetDataSet(qry);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string i = ds.Tables[0].Rows[0][0].ToString();
                            if (i == string.Empty)
                            {
                                i = "0";
                            }
                            id = Convert.ToInt32(i);
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        ds.Dispose();
                    }
                    saleid = Convert.ToInt32(id);

                    if (complimentryreason != string.Empty)
                    {
                        savecomlimentrysale(saleid.ToString());
                    }
                }
                else
                {
                    string q = "update sale set TerminalOrder='" + System.Environment.MachineName.ToString() + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',servicecharges='" + txtservice.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + txtnettotal.Text.Trim() + "',GST='" + lblgst.Text + "',GSTPerc='" + gstperc + "'  where id='" + saleid + "'";
                    objCore.executeQuery(q);
                }
                if (this.tabControl1.InvokeRequired)
                {
                    SetTextCallback d = new SetTextCallback(SetText);
                    this.Invoke(d, new object[] { saleid.ToString() });
                }
                else
                {
                    tabControl1.SelectedTab.Name = saleid.ToString();
                }
                int kdsgroup = 1;
                DataSet dsgroup = new DataSet();
                try
                {
                    string qry = "select max(kdsgroup) as id from saledetails";
                    dsgroup = objCore.funGetDataSet(qry);
                    if (dsgroup.Tables[0].Rows.Count > 0)
                    {
                        string i = dsgroup.Tables[0].Rows[0][0].ToString();
                        if (i == string.Empty)
                        {
                            i = "0";
                        }
                        kdsgroup = Convert.ToInt32(i) + 1;
                    }
                }
                catch (Exception ex)
                {


                }
                finally
                {
                    dsgroup.Dispose();
                }
                arraysalid(saleid.ToString());
                //int count = tabControl1.TabCount;
                //TabPage page = tabControl1.SelectedTab;
                //var controls = page.Controls;
                //foreach (var control in controls)
                {
                    //if (control is DataGridView)
                    {
                        //DataGridView grid = control as DataGridView;
                        foreach (DataRow dr in dtdetails.Rows)
                        {
                            try
                            {
                                double discount = 0, gstt = 0, scarges = 0;
                                try
                                {
                                    string val = dr["Price"].ToString();
                                    if (val == "")
                                    {
                                        val = "0";
                                    }
                                    double price = Convert.ToDouble(val);
                                    scarges = (price * servicecharhes) / 100;
                                    val = txtdiscount.Text;
                                    if (val == "")
                                    {
                                        val = "0";
                                    }
                                    string ordertyppe = "";
                                    if (saleid > 0)
                                    {
                                        ordertyppe = getordertype();
                                    }
                                    else
                                    {
                                        ordertyppe = newordertype;
                                    }

                                    if (ordertyppe == "Take Away")
                                    {
                                        scarges = 0;
                                    }
                                    double dis = Convert.ToDouble(val);
                                    if (dis > 0 && price > 0)
                                    {
                                        discount = (price * dis) / 100;
                                        discount = Math.Round(discount, 2);
                                    }
                                    val = lblgst.Text;
                                    if (val == "")
                                    {
                                        val = "0";
                                    }
                                    gstt = Convert.ToDouble(gst);
                                    if (applydiscount() == "before")
                                    {
                                        if (gstt > 0 && price > 0)
                                        {

                                            gstt = ((price + scarges) * gstt) / 100;
                                            gstt = Math.Round(gstt, 2);
                                        }
                                        else
                                        {
                                            gstt = 0;
                                        }
                                    }
                                    else
                                    {
                                        if (gstt > 0 && price > 0)
                                        {
                                            gstt = ((price - discount) * gstt) / 100;
                                            gstt = Math.Round(gstt, 2);
                                        }
                                        else
                                        {
                                            gstt = 0;
                                        }
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                                if (dr["Id"].ToString() != string.Empty)
                                {
                                    if (dr["SaleType"].ToString() == "Old")
                                    {
                                        double inddis = 0;
                                        try
                                        {
                                            inddis = getdiscountinddetails(dr["SaleDetailid"].ToString());
                                        }
                                        catch (Exception)
                                        {

                                        }
                                        // saleid = Convert.ToInt32(editsale);
                                        string qq = "update saledetails set Quantity='" + dr["Qty"].ToString() + "',Price='" + dr["Price"].ToString() + "', Itemdiscount= '" + (discount + inddis) + "', ItemdiscountPerc='" + txtdiscount.Text + "', ItemGst='" + gstt + "', ItemGstPerc='" + gst + "'  where id='" + dr["SaleDetailid"].ToString() + "'";
                                        objCore.executeQuery(qq);
                                    }
                                    if (dr["SaleType"].ToString() == "New")
                                    {
                                        string q = "update sale set time='" + DateTime.Now + "' where id='" + saleid + "'";
                                        //objCore.executeQuery(q);
                                        id = 0;
                                        ds = new DataSet();
                                        q = "";
                                        //if (txtdiscount.Text == "100")
                                        //{
                                        //    q = "insert into saledetails1 (saleid,MenuItemId,ModifierId,Quantity,Price,status,Flavourid,comments,OrderStatus,RunTimeModifierId, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) values ('" + saleid + "','" + dr["Id"].ToString() + "','" + dr["MdId"].ToString() + "','" + dr["Qty"].ToString() + "','" + dr["Price"].ToString() + "','Not Void','" + dr["flavourid"].ToString() + "','" + dr["comments"].ToString() + "','Pending','" + dr["runtimeflavourid"].ToString() + "','" + discount + "','" + txtdiscount.Text + "','" + gstt + "','" + gst + "')";
                                        //}
                                        //else
                                        string kdsidd = "0";
                                        if (dr["MdId"].ToString() == "" || dr["MdId"].ToString() == "0")
                                        {
                                            kdsidd = getkdss(dr["MdId"].ToString(), "Modifier");
                                        }
                                        else
                                            if (dr["runtimeflavourid"].ToString() == "" || dr["runtimeflavourid"].ToString() == "0")
                                            {
                                                kdsidd = getkdss(dr["runtimeflavourid"].ToString(), "rModifier");
                                            }
                                            else
                                            {
                                                kdsidd = getkdss(dr["id"].ToString(), "");
                                            }
                                        {
                                            q = "insert into saledetails (kdsid,time,kdsgroup,saleid,MenuItemId,ModifierId,Quantity,Price,status,Flavourid,comments,OrderStatus,RunTimeModifierId, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) values ('" + kdsidd + "','" + DateTime.Now + "','" + kdsgroup + "','" + saleid + "','" + dr["Id"].ToString() + "','" + dr["MdId"].ToString() + "','" + dr["Qty"].ToString() + "','" + dr["Price"].ToString() + "','Not Void','" + dr["flavourid"].ToString() + "','" + dr["comments"].ToString() + "','Pending','" + dr["runtimeflavourid"].ToString() + "','" + discount + "','" + txtdiscount.Text + "','" + gstt + "','" + gst + "')";
                                        }
                                        //if (txtdiscount.Text == "100")
                                        //{
                                        //    q = "insert into saledetails1 (id,saleid,MenuItemId,ModifierId,Quantity,Price,status,Flavourid,comments,OrderStatus,RunTimeModifierId, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) values ('" + id + "','" + saleid + "','" + dr.Cells["Id"].Value.ToString() + "','" + dr.Cells["MdId"].Value.ToString() + "','" + dr.Cells["Qty"].Value.ToString() + "','" + dr.Cells["Price"].Value.ToString() + "','Not Void','" + dr.Cells["flavourid"].Value.ToString() + "','" + dr.Cells["comments"].Value.ToString() + "','Pending','" + dr.Cells["runtimeflavourid"].Value.ToString() + "','" + discount + "','" + txtdiscount.Text + "','" + gstt + "','" + gst + "')";
                                        //}
                                        //else
                                        //{
                                        //    q = "insert into saledetails (id,saleid,MenuItemId,ModifierId,Quantity,Price,status,Flavourid,comments,OrderStatus,RunTimeModifierId, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) values ('" + id + "','" + saleid + "','" + dr.Cells["Id"].Value.ToString() + "','" + dr.Cells["MdId"].Value.ToString() + "','" + dr.Cells["Qty"].Value.ToString() + "','" + dr.Cells["Price"].Value.ToString() + "','Not Void','" + dr.Cells["flavourid"].Value.ToString() + "','" + dr.Cells["comments"].Value.ToString() + "','Pending','" + dr.Cells["runtimeflavourid"].Value.ToString() + "','" + discount + "','" + txtdiscount.Text + "','" + gstt + "','" + gst + "')";
                                        //}
                                        objCore.executeQuery(q);
                                        chk = true;
                                        //try
                                        //{
                                        //    if (dr["SaleType"].ToString() == "New")
                                        //    {
                                        //        if (dr["flavourid"].ToString() == string.Empty)
                                        //        {
                                        //            if (dr["MdId"].ToString() == string.Empty)
                                        //            {
                                        //                if (dr["runtimeflavourid"].ToString() != string.Empty)
                                        //                {
                                        //                    recipiemodifierruntime(dr["runtimeflavourid"].ToString(), Convert.ToInt32(dr["Qty"].ToString()));
                                        //                }
                                        //                else
                                        //                {
                                        //                    recipie(dr["Id"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["flavourid"].ToString());
                                        //                }
                                        //            }
                                        //            else
                                        //            {
                                        //                if (dr["runtimeflavourid"].ToString() != string.Empty)
                                        //                {
                                        //                    recipiemodifierruntime(dr["runtimeflavourid"].ToString(), Convert.ToInt32(dr["Qty"].ToString()));
                                        //                }
                                        //                else
                                        //                {
                                        //                    recipiemodifier(dr["MdId"].ToString(), Convert.ToInt32(dr["Qty"].ToString()));
                                        //                }
                                        //            }
                                        //        }
                                        //        else
                                        //        {
                                        //            recipie(dr["Id"].ToString(), Convert.ToInt32(dr["Qty"].ToString()), dr["flavourid"].ToString());

                                        //        }
                                        //    }
                                        //}
                                        //catch (Exception ex)
                                        //{


                                        //}
                                    }

                                }
                            }
                            catch (Exception ex)
                            {
                            }
                        }
                    }
                }
                txtdiscount.Enabled = false;
                //if (chk==true)
                //{
                //    bindreportkitchen(saleid.ToString());
                //}
                //MessageBox.Show("Sale Added Successfully");
                // bindreport(billtype,saleid.ToString());
            }
            catch (Exception ex)
            {

               // MessageBox.Show(ex.Message);
            }
        }
        public void callrecipe(string type)
        {
            branchtype = "";
            int Reverse = 1;
            if (type == "Reverse")
            {
                Reverse = -1;
            }
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        foreach (DataGridViewRow dr in grid.Rows)
                        {
                            if (dr.Cells["flavourid"].Value.ToString() == string.Empty)
                            {
                                if (dr.Cells["MdId"].Value.ToString() == string.Empty)
                                {
                                    if (dr.Cells["runtimeflavourid"].Value.ToString() != string.Empty)
                                    {
                                        recipiemodifierruntime(dr.Cells["runtimeflavourid"].Value.ToString(), Convert.ToInt32(dr.Cells["Qty"].Value.ToString()) * Reverse,"");
                                    }
                                    else
                                    {
                                        recipie(dr.Cells["Id"].Value.ToString(), Convert.ToInt32(dr.Cells["Qty"].Value.ToString()) * Reverse, dr.Cells["flavourid"].Value.ToString(),"");
                                    }
                                }
                                else
                                {
                                    if (dr.Cells["runtimeflavourid"].Value.ToString() != string.Empty)
                                    {
                                        recipiemodifierruntime(dr.Cells["runtimeflavourid"].Value.ToString(), Convert.ToInt32(dr.Cells["Qty"].Value.ToString()) * Reverse, "");
                                    }
                                    else
                                    {
                                        recipiemodifier(dr.Cells["MdId"].Value.ToString(), Convert.ToInt32(dr.Cells["Qty"].Value.ToString()) * Reverse);
                                    }
                                }
                            }
                            else
                            {
                                recipie(dr.Cells["Id"].Value.ToString(), Convert.ToInt32(dr.Cells["Qty"].Value.ToString()) * Reverse, dr.Cells["flavourid"].Value.ToString(), "");

                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }
        public void recipie(string itmid, float itmqnty, string flid,string recipetype)
        {
            if (recipetype != "Attachmenu")
            {
                attachMenurecipie(itmid,flid, itmqnty,"MenuItem");
            }
            attachrecipie(itmid, itmqnty);
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";
                if (flid == "" || flid == "0")
                {
                    q = "SELECT        dbo.Recipe.RawItemId, dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.Recipe.MenuItemId, dbo.Recipe.Quantity, dbo.Recipe.type, dbo.Recipe.modifierid,                          dbo.MenuItem.KDSId FROM            dbo.Recipe INNER JOIN                         dbo.RawItem ON dbo.Recipe.RawItemId = dbo.RawItem.Id INNER JOIN                         dbo.UOM ON dbo.RawItem.UOMId = dbo.UOM.Id INNER JOIN                         dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId INNER JOIN                         dbo.MenuItem ON dbo.Recipe.MenuItemId = dbo.MenuItem.Id where dbo.Recipe.MenuItemId='" + itmid + "' and (dbo.Recipe.modifierid IS NULL) or dbo.Recipe.MenuItemId='" + itmid + "' and  (dbo.Recipe.modifierid ='0') or dbo.Recipe.MenuItemId='" + itmid + "' and  (dbo.Recipe.modifierid ='')";
                }
                else
                {
                    q = "SELECT        dbo.Recipe.RawItemId, dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.Recipe.MenuItemId, dbo.Recipe.Quantity, dbo.Recipe.type, dbo.Recipe.modifierid,                          dbo.MenuItem.KDSId FROM            dbo.Recipe INNER JOIN                         dbo.RawItem ON dbo.Recipe.RawItemId = dbo.RawItem.Id INNER JOIN                         dbo.UOM ON dbo.RawItem.UOMId = dbo.UOM.Id INNER JOIN                         dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId INNER JOIN                         dbo.MenuItem ON dbo.Recipe.MenuItemId = dbo.MenuItem.Id where dbo.Recipe.MenuItemId='" + itmid + "' and (dbo.Recipe.modifierid ='" + flid + "')";
                }
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        bool chk = true;
                        if (branchtype == "")
                        {
                            getbranchtype();
                        }
                        string type = dsrecipie.Tables[0].Rows[i]["type"].ToString();
                        if (type == "" || type.ToLower() == "both")
                        {

                        }
                        else
                        {
                            if (type.ToLower() == "dine in" && branchtype.ToLower() == "take away")
                            {
                                chk = false;
                            }
                            else
                                if (type.ToLower() == "take away" && branchtype.ToLower() == "dine in")
                                {
                                    chk = false;
                                }
                        }
                        if (chk == true)
                        {
                            string rawitmid = dsrecipie.Tables[0].Rows[i]["RawItemId"].ToString();
                            string kdsid = dsrecipie.Tables[0].Rows[i]["kdsid"].ToString();
                            float qnty = float.Parse(dsrecipie.Tables[0].Rows[i]["Qty"].ToString());
                            double convrate = double.Parse(dsrecipie.Tables[0].Rows[i]["ConversionRate"].ToString());
                            double recipiqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                            double amounttodeduct = recipiqnty;// (qnty / convrate) * recipiqnty;
                            amounttodeduct = amounttodeduct * itmqnty;
                            amounttodeduct = Math.Round(amounttodeduct, 3);
                            dsminus = new DataSet();
                            double inventryqty = 0;
                            //dsminus = objCore.funGetDataSet("select * from Inventory where RawItemId='" + rawitmid + "'");
                            //if (dsminus.Tables[0].Rows.Count > 0)
                            //{
                            //    inventryqty = double.Parse(dsminus.Tables[0].Rows[0]["Quantity"].ToString());
                            //    q = "update Inventory set Quantity='" + (inventryqty - amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[0]["id"].ToString() + "'";
                            //    objCore.executeQuery(q);
                            //}
                            //else
                            //{
                            //    ds = new DataSet();
                            //    int idcnsmd = 0;
                            //    ds = objCore.funGetDataSet("select MAX(ID) as id from Inventory");
                            //    if (ds.Tables[0].Rows.Count > 0)
                            //    {
                            //        string ii = ds.Tables[0].Rows[0][0].ToString();
                            //        if (ii == string.Empty)
                            //        {
                            //            ii = "0";
                            //        }
                            //        idcnsmd = Convert.ToInt32(ii) + 1;
                            //    }
                            //    else
                            //    {
                            //        idcnsmd = Convert.ToInt32("1");
                            //    }
                            //    //amounttodeduct = Math.Abs(amounttodeduct);
                            //    // idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                            //    q = "insert into Inventory ( Id, RawItemId, Quantity) values('" + idcnsmd + "','" + rawitmid + "','" + -amounttodeduct + "')";
                            //    objCore.executeQuery(q);
                            //}
                            dsminus = new DataSet();
                            dsminus = objCore.funGetDataSet("select * from InventoryConsumed where kdsid='" + kdsid + "' and RawItemId='" + rawitmid + "' and Date='" + date + "'");
                            if (dsminus.Tables[0].Rows.Count > 0)
                            {
                                double inventryconsumedqty = double.Parse(dsminus.Tables[0].Rows[0]["QuantityConsumed"].ToString());
                                double rem = double.Parse(dsminus.Tables[0].Rows[0]["RemainingQuantity"].ToString());
                                if (inventryqty > 0)
                                {
                                    rem = inventryqty;
                                }
                                q = "update InventoryConsumed set uploadstatus='Pending',RemainingQuantity='" + (rem - amounttodeduct) + "', QuantityConsumed='" + (inventryconsumedqty + amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[0]["id"].ToString() + "'";
                                objCore.executeQuery(q);
                            }
                            else
                            {
                                ds = new DataSet();
                                int idcnsmd = 0;
                                ds = objCore.funGetDataSet("select MAX(ID) as id from InventoryConsumed");
                                if (ds.Tables[0].Rows.Count > 0)
                                {
                                    string ii = ds.Tables[0].Rows[0][0].ToString();
                                    if (ii == string.Empty)
                                    {
                                        ii = "0";
                                    }
                                    idcnsmd = Convert.ToInt32(ii) + 1;
                                }
                                else
                                {
                                    idcnsmd = Convert.ToInt32("1");
                                }
                                // idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                                q = "insert into InventoryConsumed (kdsid,branchid,Id,RawItemId,QuantityConsumed,RemainingQuantity,Date) values('" + kdsid + "','" + branchid + "','" + idcnsmd + "','" + rawitmid + "','" + amounttodeduct + "','" + (inventryqty - amounttodeduct) + "','" + date + "')";
                                objCore.executeQuery(q);
                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public void attachMenurecipie(string itmid,string flvid, float itmqnty,string type)
        {
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";
                if (type == "RuntimeModifier")
                {
                    if (flvid == "" || flvid == "0")
                    {
                        q = "SELECT        TOP (200) id, menuitemid, Flavourid, attachmenuid, attachFlavourid, Quantity, status, userecipe FROM            Attachmenu1 where menuitemid='" + itmid + "' and status='Active' and userecipe='yes' and type='RuntimeModifier'";
                    }
                    else
                    {
                        q = "SELECT        TOP (200) id, menuitemid, Flavourid, attachmenuid, attachFlavourid, Quantity, status, userecipe FROM            Attachmenu1 where menuitemid='" + itmid + "' and Flavourid='" + flvid + "' and status='Active' and userecipe='yes' and type='RuntimeModifier'";
                    }
                }
                else
                {
                    if (flvid == "" || flvid == "0")
                    {
                        q = "SELECT        TOP (200) id, menuitemid, Flavourid, attachmenuid, attachFlavourid, Quantity, status, userecipe FROM            Attachmenu1 where menuitemid='" + itmid + "' and status='Active' and userecipe='yes'  and (type='MenuItem' or type is null)";
                    }
                    else
                    {
                        q = "SELECT        TOP (200) id, menuitemid, Flavourid, attachmenuid, attachFlavourid, Quantity, status, userecipe FROM            Attachmenu1 where menuitemid='" + itmid + "' and Flavourid='" + flvid + "' and status='Active' and userecipe='yes' and (type='MenuItem' or type is null)";
                    }
                }
                //q = "SELECT        dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.AttachRecipe.Quantity  AS attachQty, dbo.SubRecipe.type, dbo.SubItems.Name, dbo.AttachRecipe.Menuitemid, dbo.SubRecipe.RawItemId,    dbo.SubRecipe.Quantity FROM            dbo.UOM INNER JOIN                         dbo.RawItem ON dbo.UOM.Id = dbo.RawItem.UOMId INNER JOIN                         dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId INNER JOIN                         dbo.AttachRecipe INNER JOIN                         dbo.SubItems INNER JOIN                         dbo.SubRecipe ON dbo.SubItems.Id = dbo.SubRecipe.ItemId ON dbo.AttachRecipe.SubItemId = dbo.SubItems.Id ON dbo.RawItem.Id = dbo.SubRecipe.RawItemId where dbo.AttachRecipe.type='MenuItem' and  dbo.AttachRecipe.Menuitemid='" + itmid + "' ";
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        string menuid = dsrecipie.Tables[0].Rows[i]["attachmenuid"].ToString();
                        string flid = dsrecipie.Tables[0].Rows[i]["attachFlavourid"].ToString();
                        if (flid == "")
                        {
                            flid = "0";
                        }
                        float qty = float.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                        recipie(menuid, qty, flid, "Attachmenu");
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public void attachrecipie(string itmid, float itmqnty)
        {
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";
                q = "";

                q = "SELECT        dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.AttachRecipe.Quantity AS attachQty, dbo.SubRecipe.type, dbo.SubItems.Name, dbo.AttachRecipe.Menuitemid,                          dbo.SubRecipe.RawItemId, dbo.SubRecipe.Quantity, dbo.MenuItem.KDSId FROM            dbo.UOM INNER JOIN                         dbo.RawItem ON dbo.UOM.Id = dbo.RawItem.UOMId INNER JOIN                         dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId INNER JOIN                         dbo.AttachRecipe INNER JOIN                         dbo.SubItems INNER JOIN                         dbo.SubRecipe ON dbo.SubItems.Id = dbo.SubRecipe.ItemId ON dbo.AttachRecipe.SubItemId = dbo.SubItems.Id ON dbo.RawItem.Id = dbo.SubRecipe.RawItemId INNER JOIN                         dbo.MenuItem ON dbo.AttachRecipe.Menuitemid = dbo.MenuItem.Id WHERE        (dbo.AttachRecipe.type = 'MenuItem') and  dbo.AttachRecipe.Menuitemid='" + itmid + "' ";
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        bool chk = true;
                        if (branchtype == "")
                        {
                            getbranchtype();
                        }
                        string type = dsrecipie.Tables[0].Rows[i]["type"].ToString();
                        if (type == "" || type.ToLower() == "both")
                        {

                        }
                        else
                        {
                            if (type.ToLower() == "dine in" && branchtype.ToLower() == "take away")
                            {
                                chk = false;
                            }
                            else
                                if (type.ToLower() == "take away" && branchtype.ToLower() == "dine in")
                                {
                                    chk = false;
                                }
                        }
                        if (chk == true)
                        {
                            try
                            {
                                string rawitmid = dsrecipie.Tables[0].Rows[i]["RawItemId"].ToString();
                                string kdsid = dsrecipie.Tables[0].Rows[i]["KDSId"].ToString();
                                float qnty = float.Parse(dsrecipie.Tables[0].Rows[i]["Qty"].ToString());
                                double convrate = double.Parse(dsrecipie.Tables[0].Rows[i]["ConversionRate"].ToString());
                                double recipiqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                                double recipiattachqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["attachQty"].ToString());
                                double amounttodeduct = recipiqnty;// (qnty / convrate) * recipiqnty;
                                amounttodeduct = amounttodeduct * itmqnty;

                                amounttodeduct = amounttodeduct * recipiattachqnty;
                                amounttodeduct = Math.Round(amounttodeduct, 3);


                                dsminus = new DataSet();
                                double inventryqty = 0;
                                dsminus = objCore.funGetDataSet("select * from Inventory where RawItemId='" + rawitmid + "'");

                                dsminus = new DataSet();
                                dsminus = objCore.funGetDataSet("select * from InventoryConsumed where KDSId='" + kdsid + "' and RawItemId='" + rawitmid + "' and Date='" + date + "'");
                                if (dsminus.Tables[0].Rows.Count > 0)
                                {
                                    double inventryconsumedqty = double.Parse(dsminus.Tables[0].Rows[0]["QuantityConsumed"].ToString());
                                    double rem = double.Parse(dsminus.Tables[0].Rows[0]["RemainingQuantity"].ToString());
                                    if (inventryqty > 0)
                                    {
                                        rem = inventryqty;
                                    }
                                    q = "update InventoryConsumed set uploadstatus='Pending',RemainingQuantity='" + (rem - amounttodeduct) + "', QuantityConsumed='" + (inventryconsumedqty + amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[0]["id"].ToString() + "'";
                                    objCore.executeQuery(q);
                                }
                                else
                                {
                                    ds = new DataSet();
                                    int idcnsmd = 0;
                                    ds = objCore.funGetDataSet("select MAX(ID) as id from InventoryConsumed");
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        string ii = ds.Tables[0].Rows[0][0].ToString();
                                        if (ii == string.Empty)
                                        {
                                            ii = "0";
                                        }
                                        idcnsmd = Convert.ToInt32(ii) + 1;
                                    }
                                    else
                                    {
                                        idcnsmd = Convert.ToInt32("1");
                                    }
                                    // idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                                    q = "insert into InventoryConsumed (KDSId,branchid,Id,RawItemId,QuantityConsumed,RemainingQuantity,Date) values('" + kdsid + "','" + branchid + "','" + idcnsmd + "','" + rawitmid + "','" + amounttodeduct + "','" + (inventryqty - amounttodeduct) + "','" + date + "')";
                                    objCore.executeQuery(q);
                                }
                            }
                            catch (Exception exx)
                            {


                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public void recipiemodifier(string itmid, float itmqnty)
        {
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";// "SELECT     dbo.Recipe.RawItemId, dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.Recipe.MenuItemId, dbo.Recipe.Quantity FROM dbo.Recipe INNER JOIN                      dbo.UOMConversion ON dbo.Recipe.UOMCId = dbo.UOMConversion.Id where dbo.Recipe.MenuItemId='" + itmid + "'";
                q = "SELECT     dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.Modifier.RawItemId, dbo.Modifier.Quantity, dbo.Modifier.kdsid FROM         dbo.RawItem INNER JOIN                      dbo.Modifier ON dbo.RawItem.Id = dbo.Modifier.RawItemId INNER JOIN                      dbo.UOM ON dbo.RawItem.UOMId = dbo.UOM.Id INNER JOIN                      dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId where dbo.Modifier.Id='" + itmid + "'";
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        string rawitmid = dsrecipie.Tables[0].Rows[i]["RawItemId"].ToString();
                        string kdsid = dsrecipie.Tables[0].Rows[i]["kdsid"].ToString();
                        float qnty = float.Parse(dsrecipie.Tables[0].Rows[i]["Qty"].ToString());
                        double convrate = double.Parse(dsrecipie.Tables[0].Rows[i]["ConversionRate"].ToString());
                        double recipiqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                        double amounttodeduct = recipiqnty;// (qnty / convrate) * recipiqnty;
                        amounttodeduct = amounttodeduct * itmqnty;
                        amounttodeduct = Math.Round(amounttodeduct, 3);
                        dsminus = new DataSet();
                        double inventryqty = 0;
                       
                        dsminus = new DataSet();
                        dsminus = objCore.funGetDataSet("select * from InventoryConsumed where kdsid='" + kdsid + "' and RawItemId='" + rawitmid + "' and Date='" + date + "'");
                        if (dsminus.Tables[0].Rows.Count > 0)
                        {
                            double inventryconsumedqty = double.Parse(dsminus.Tables[0].Rows[i]["QuantityConsumed"].ToString());
                            q = "update InventoryConsumed set uploadstatus='Pending',RemainingQuantity='" + (inventryqty - amounttodeduct) + "', QuantityConsumed='" + (inventryconsumedqty + amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[i]["id"].ToString() + "'";
                            objCore.executeQuery(q);
                        }
                        else
                        {

                            ds = new DataSet();
                            int idcnsmd = 0;
                            ds = objCore.funGetDataSet("select MAX(ID) as id from InventoryConsumed");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                string ii = ds.Tables[0].Rows[0][0].ToString();
                                if (ii == string.Empty)
                                {
                                    ii = "0";
                                }
                                idcnsmd = Convert.ToInt32(ii) + 1;
                            }
                            else
                            {
                                idcnsmd = Convert.ToInt32("1");
                            }
                            //idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                            q = "insert into InventoryConsumed (kdsid,branchid,Id,RawItemId,QuantityConsumed,RemainingQuantity,Date) values('" + kdsid + "','" + branchid + "','" + idcnsmd + "','" + rawitmid + "','" + amounttodeduct + "','" + (inventryqty - amounttodeduct) + "','" + date + "')";
                            objCore.executeQuery(q);
                        }

                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public void recipiemodifierruntime(string itmid, float itmqnty, string recipetype)
        {
            if (recipetype != "Attachmenu")
            {
                attachMenurecipie(itmid, "", itmqnty, "RuntimeModifier");
            }
            attachrecipieruntime(itmid, itmqnty);
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";
                q = "SELECT     dbo.RuntimeModifier.RawItemId AS RawItemId, dbo.RuntimeModifier.Quantity, dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM,dbo.RuntimeModifier.kdsid FROM         dbo.RuntimeModifier INNER JOIN                      dbo.RawItem ON dbo.RuntimeModifier.RawItemId = dbo.RawItem.Id INNER JOIN                      dbo.UOM ON dbo.RawItem.UOMId = dbo.UOM.Id INNER JOIN                      dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId where dbo.RuntimeModifier.Id='" + itmid + "'";
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        string rawitmid = dsrecipie.Tables[0].Rows[i]["RawItemId"].ToString();
                        string kdsid = dsrecipie.Tables[0].Rows[i]["kdsid"].ToString();
                        float qnty = float.Parse(dsrecipie.Tables[0].Rows[i]["Qty"].ToString());
                        double convrate = double.Parse(dsrecipie.Tables[0].Rows[i]["ConversionRate"].ToString());
                        double recipiqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                        double amounttodeduct = recipiqnty;// (qnty / convrate) * recipiqnty;
                        amounttodeduct = amounttodeduct * itmqnty;
                        dsminus = new DataSet();
                        double inventryqty = 0;
                        
                        dsminus = new DataSet();
                        dsminus = objCore.funGetDataSet("select * from InventoryConsumed where kdsid='" + kdsid + "' and RawItemId='" + rawitmid + "' and Date='" + date + "'");
                        if (dsminus.Tables[0].Rows.Count > 0)
                        {
                            double inventryconsumedqty = double.Parse(dsminus.Tables[0].Rows[i]["QuantityConsumed"].ToString());
                            q = "update InventoryConsumed set uploadstatus='Pending',RemainingQuantity='" + (inventryqty - amounttodeduct) + "', QuantityConsumed='" + (inventryconsumedqty + amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[i]["id"].ToString() + "'";
                            objCore.executeQuery(q);
                        }
                        else
                        {
                            ds = new DataSet();
                            int idcnsmd = 0;

                            ds = objCore.funGetDataSet("select MAX(ID) as id from InventoryConsumed");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                string ii = ds.Tables[0].Rows[0][0].ToString();
                                if (ii == string.Empty)
                                {
                                    ii = "0";
                                }
                                idcnsmd = Convert.ToInt32(ii) + 1;
                            }
                            else
                            {
                                idcnsmd = Convert.ToInt32("1");
                            }
                            // idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                            q = "insert into InventoryConsumed (kdsid,branchid,Id,RawItemId,QuantityConsumed,RemainingQuantity,Date) values('" + kdsid + "','" + branchid + "','" + idcnsmd + "','" + rawitmid + "','" + amounttodeduct + "','" + (inventryqty - amounttodeduct) + "','" + date + "')";
                            objCore.executeQuery(q);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public void attachrecipieruntime(string itmid, float itmqnty)
        {
            DataSet dsrecipie = new DataSet();
            DataSet dsminus = new DataSet();
            try
            {

                string q = "";
                q = "";

                q = "SELECT        dbo.UOMConversion.Qty, dbo.UOMConversion.ConversionRate, dbo.UOMConversion.UOM, dbo.AttachRecipe.Quantity AS attachQty, dbo.SubRecipe.type, dbo.SubItems.Name, dbo.AttachRecipe.Menuitemid,                          dbo.SubRecipe.RawItemId, dbo.SubRecipe.Quantity, dbo.RuntimeModifier.kdsid FROM            dbo.UOM INNER JOIN                         dbo.RawItem ON dbo.UOM.Id = dbo.RawItem.UOMId INNER JOIN                         dbo.UOMConversion ON dbo.UOM.Id = dbo.UOMConversion.UOMId INNER JOIN                         dbo.AttachRecipe INNER JOIN                         dbo.SubItems INNER JOIN                         dbo.SubRecipe ON dbo.SubItems.Id = dbo.SubRecipe.ItemId ON dbo.AttachRecipe.SubItemId = dbo.SubItems.Id ON dbo.RawItem.Id = dbo.SubRecipe.RawItemId INNER JOIN                         dbo.RuntimeModifier ON dbo.AttachRecipe.Menuitemid = dbo.RuntimeModifier.id WHERE        (dbo.AttachRecipe.type = 'RuntimeModifier') and  dbo.AttachRecipe.Menuitemid='" + itmid + "' ";
                dsrecipie = objCore.funGetDataSet(q);
                if (dsrecipie.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsrecipie.Tables[0].Rows.Count; i++)
                    {
                        bool chk = true;
                        if (branchtype == "")
                        {
                            getbranchtype();
                        }
                        string type = dsrecipie.Tables[0].Rows[i]["type"].ToString();
                        if (type == "" || type.ToLower() == "both")
                        {

                        }
                        else
                        {
                            if (type.ToLower() == "dine in" && branchtype.ToLower() == "take away")
                            {
                                chk = false;
                            }
                            else
                                if (type.ToLower() == "take away" && branchtype.ToLower() == "dine in")
                                {
                                    chk = false;
                                }
                        }
                        if (chk == true)
                        {
                            try
                            {
                                string rawitmid = dsrecipie.Tables[0].Rows[i]["RawItemId"].ToString();
                                string kdsid = dsrecipie.Tables[0].Rows[i]["kdsid"].ToString();
                                float qnty = float.Parse(dsrecipie.Tables[0].Rows[i]["Qty"].ToString());
                                double convrate = double.Parse(dsrecipie.Tables[0].Rows[i]["ConversionRate"].ToString());
                                double recipiqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["Quantity"].ToString());
                                double recipiattachqnty = double.Parse(dsrecipie.Tables[0].Rows[i]["attachQty"].ToString());
                                double amounttodeduct = recipiqnty;// (qnty / convrate) * recipiqnty;
                                amounttodeduct = amounttodeduct * itmqnty;

                                amounttodeduct = amounttodeduct * recipiattachqnty;
                                amounttodeduct = Math.Round(amounttodeduct, 3);


                                dsminus = new DataSet();
                                double inventryqty = 0;
                               
                                dsminus = new DataSet();
                                dsminus = objCore.funGetDataSet("select * from InventoryConsumed where kdsid='"+kdsid+"' and RawItemId='" + rawitmid + "' and Date='" + date + "'");
                                if (dsminus.Tables[0].Rows.Count > 0)
                                {
                                    double inventryconsumedqty = double.Parse(dsminus.Tables[0].Rows[0]["QuantityConsumed"].ToString());
                                    double rem = double.Parse(dsminus.Tables[0].Rows[0]["RemainingQuantity"].ToString());
                                    if (inventryqty > 0)
                                    {
                                        rem = inventryqty;
                                    }
                                    q = "update InventoryConsumed set uploadstatus='Pending',RemainingQuantity='" + (rem - amounttodeduct) + "', QuantityConsumed='" + (inventryconsumedqty + amounttodeduct) + "' where id='" + dsminus.Tables[0].Rows[0]["id"].ToString() + "'";
                                    objCore.executeQuery(q);
                                }
                                else
                                {
                                    ds = new DataSet();
                                    int idcnsmd = 0;
                                    ds = objCore.funGetDataSet("select MAX(ID) as id from InventoryConsumed");
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        string ii = ds.Tables[0].Rows[0][0].ToString();
                                        if (ii == string.Empty)
                                        {
                                            ii = "0";
                                        }
                                        idcnsmd = Convert.ToInt32(ii) + 1;
                                    }
                                    else
                                    {
                                        idcnsmd = Convert.ToInt32("1");
                                    }
                                    // idcnsmd = Convert.ToInt32(branchid + idcnsmd.ToString());
                                    q = "insert into InventoryConsumed (kdsid,branchid,Id,RawItemId,QuantityConsumed,RemainingQuantity,Date) values('" + kdsid + "','" + branchid + "','" + idcnsmd + "','" + rawitmid + "','" + amounttodeduct + "','" + (inventryqty - amounttodeduct) + "','" + date + "')";
                                    objCore.executeQuery(q);
                                }
                            }
                            catch (Exception exx)
                            {


                            }

                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
                dsrecipie.Dispose();
                dsminus.Dispose();
            }
        }
        public string getordertype(string id)
        {
            DataSet dsgetordertype = new DataSet();
            string typ = "";
            try
            {

                string q = "select OrderType from sale where id='" + id + "'";
                dsgetordertype = objCore.funGetDataSet(q);
                if (dsgetordertype.Tables[0].Rows.Count > 0)
                {
                    typ = dsgetordertype.Tables[0].Rows[0][0].ToString();
                }
                else
                {
                    typ = "";
                }
            }
            catch (Exception)
            {


            }
            finally
            {
                dsgetordertype.Dispose();


            }
            return typ;
        }
        public void cleargrid()
        {
            string typ = getordertype(saleid.ToString());
            bindreportrefund("Cash", saleid.ToString(), "", typ, txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text.Trim());
            dt.Clear();
            MessageBox.Show("Bill Refund Operation Completed Successfully");
        }
        public void callrecalsale(string id, string status)
        {
            try
            {
                foreach (TabPage tab in tabControl1.TabPages)
                {
                    string name = tab.Name;
                    if (name == id)
                    {
                        tabControl1.SelectedTab = tab;
                    }
                }
                recalsale(id, status);
            }
            catch (Exception ex)
            {

                // throw;
            }
        }
        public void recalsale(string sid, string voidstatus)
        {
            redeemcode = "";
            DataSet dsrecalsale = new DataSet();
            DataSet dsgetkds = new DataSet();
            DataSet dscallgrid = new DataSet();
           
           
            try
            {
                editsale = sid;
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {

                }
                saleid = Convert.ToInt32(sid);
                tabControl1.SelectedTab.Name = saleid.ToString();
                arraysalid(saleid.ToString());
                label4.Text = saleid.ToString();
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        tbl.Clear();
                    }
                }

                string q = "";
                if (voidstatus == "yes")
                {
                    q = "SELECT        TOP (100) PERCENT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.RunTimeModifierId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name,                          dbo.Saledetails.ModifierId, dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer,dbo.Sale.OrderType, dbo.Saledetails.atid, dbo.Saledetails.dealid FROM            dbo.Saledetails INNER JOIN                         dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id LEFT OUTER JOIN                         dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'  order by dbo.Saledetails.id asc";
                }
                if (voidstatus == "no")
                {
                    q = "SELECT        TOP (100) PERCENT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.RunTimeModifierId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name,                          dbo.Saledetails.ModifierId, dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer,dbo.Sale.OrderType, dbo.Saledetails.atid, dbo.Saledetails.dealid FROM            dbo.Saledetails INNER JOIN                         dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id LEFT OUTER JOIN                         dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id  where dbo.Saledetails.saleid='" + sid + "' and dbo.Saledetails.Status ='Not Void' order by dbo.Saledetails.id asc";
                }
                dsrecalsale = objCore.funGetDataSet(q);
                if (dsrecalsale.Tables[0].Rows.Count > 0)
                {
                    //TabPage page = tabControl1.SelectedTab;
                    //var controls = page.Controls;
                    //foreach (var control in controls)
                    //{
                    //    if (control is DataGridView)
                    //    {
                    //        DataGridView grid = control as DataGridView;
                    //        DataTable tbl = grid.DataSource as DataTable;
                    //        tbl.Clear();
                    //    }
                    //}
                    orderservicesubtype = "";
                    try
                    {
                        string ordertype = dsrecalsale.Tables[0].Rows[0]["OrderType"].ToString();
                        ordertype1 = ordertype;
                        if (ordertype.ToLower() == "delivery")
                        {

                            q = "select type from delivery where saleid=" + sid + "";
                            DataSet dsdelievry = new DataSet();
                            dsdelievry = objCore.funGetDataSet(q);
                            if (dsdelievry.Tables[0].Rows.Count > 0)
                            {
                                ordersource = dsdelievry.Tables[0].Rows[0][0].ToString();
                            }
                        }
                        try
                        {
                            if (ordertype.ToLower() == "dine in")
                            {
                                string Customer = dsrecalsale.Tables[0].Rows[0]["Customer"].ToString();
                                q = "SELECT        Floor FROM            dbo.DineInTableDesign where TableNo='" + Customer + "'";
                                DataSet dstable = new DataSet();
                                dstable = objCore.funGetDataSet(q);
                                if (dstable.Tables[0].Rows.Count > 0)
                                {
                                    orderservicesubtype = dstable.Tables[0].Rows[0]["Floor"].ToString();
                                }
                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                    catch (Exception ex)
                    {

                    }
                    tabControl1.SelectedTab.Text = dsrecalsale.Tables[0].Rows[0]["Customer"].ToString();
                    for (int i = 0; i < dsrecalsale.Tables[0].Rows.Count; i++)
                    {
                        string mid = dsrecalsale.Tables[0].Rows[i]["ModifierId"].ToString();
                        string runtimid = dsrecalsale.Tables[0].Rows[i]["RunTimeModifierId"].ToString();
                        string flrid = dsrecalsale.Tables[0].Rows[i]["Flavourid"].ToString();
                        string quantoty = dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString();
                        string cmnts = dsrecalsale.Tables[0].Rows[i]["comments"].ToString();
                        string kds = "";
                        string atid = dsrecalsale.Tables[0].Rows[i]["atid"].ToString();
                        string dealid = dsrecalsale.Tables[0].Rows[i]["dealid"].ToString();
                        if (dealid == "")
                        {
                            dealid = "0";
                        }
                        if (atid == "")
                        {
                            atid = "0";
                        }
                        if (dsrecalsale.Tables[0].Rows[i]["Status"].ToString().ToLower() == "void" && voidstatus == "yes")
                        {
                            quantoty = "-1";
                        }
                        if (atid == "0" && dealid == "0")
                        {
                            if (runtimid == string.Empty || runtimid == "0")
                            {
                                if (flrid == string.Empty || flrid == "0")
                                {
                                    if (mid == "0")
                                    {
                                        mid = "";
                                        dsgetkds = new DataSet();
                                        q = "select kdsid from MenuItem where id='" + dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString() + "'";
                                        dsgetkds = objCore.funGetDataSet(q);
                                        if (dsgetkds.Tables[0].Rows.Count > 0)
                                        {
                                            kds = dsgetkds.Tables[0].Rows[0][0].ToString();
                                        }
                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), mid, dsrecalsale.Tables[0].Rows[i]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", kds, "", "", "", "");
                                    }
                                    else
                                    {
                                        dscallgrid = new DataSet();
                                        q = "SELECT        Id, Name AS ModifierName, Price, kdsid FROM            dbo.Modifier where id='" + mid + "'";
                                        dscallgrid = objCore.funGetDataSet(q);
                                        if (dscallgrid.Tables[0].Rows.Count > 0)
                                        {
                                            fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), dscallgrid.Tables[0].Rows[0]["id"].ToString(), "    " + dscallgrid.Tables[0].Rows[0]["ModifierName"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                        }
                                    }
                                    //fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["Name"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString(), "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "");

                                }
                                else
                                {
                                    dscallgrid = new DataSet();
                                    dscallgrid = objCore.funGetDataSet("SELECT     dbo.ModifierFlavour.name AS flavourname, dbo.MenuItem.Name, dbo.ModifierFlavour.price,dbo.ModifierFlavour.kdsid FROM         dbo.ModifierFlavour INNER JOIN                      dbo.MenuItem ON dbo.ModifierFlavour.MenuItemId = dbo.MenuItem.Id where dbo.ModifierFlavour.id='" + flrid + "'");
                                    if (dscallgrid.Tables[0].Rows.Count > 0)
                                    {
                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dscallgrid.Tables[0].Rows[0]["flavourname"].ToString() + "'" + dscallgrid.Tables[0].Rows[0]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), flrid, dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                    }
                                }
                            }
                            else
                            {
                                dscallgrid = new DataSet();
                                dscallgrid = objCore.funGetDataSet("SELECT        id, name, menuItemid, price, Quantity, status, branchid, kdsid, uploadStatus FROM            RuntimeModifier where id='" + runtimid + "'");
                                if (dscallgrid.Tables[0].Rows.Count > 0)
                                {
                                    fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", "    " + dscallgrid.Tables[0].Rows[0]["name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), runtimid, dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                }
                            }
                        }
                        else
                        {
                            string dealname = "";
                            if (dealid == "" || dealid == "0")
                            {
                                q = "SELECT dbo.Deals.name FROM  dbo.Deals INNER JOIN               dbo.AttachMenu ON dbo.Deals.id = dbo.AttachMenu.Dealid where dbo.AttachMenu.id='" + atid + "'";
                                DataSet dsdeal = new DataSet();
                                dsdeal = objCore.funGetDataSet(q);
                                if (dsdeal.Tables[0].Rows.Count > 0)
                                {
                                    dealname = dsdeal.Tables[0].Rows[0][0].ToString();
                                }
                                if (flrid == string.Empty || flrid == "0")
                                {

                                    {
                                        mid = "";
                                        dsgetkds = new DataSet();
                                        q = "select kdsid from MenuItem where id='" + dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString() + "'";
                                        dsgetkds = objCore.funGetDataSet(q);
                                        if (dsgetkds.Tables[0].Rows.Count > 0)
                                        {
                                            kds = dsgetkds.Tables[0].Rows[0][0].ToString();
                                        }
                                        string extrfl = "";
                                        DataSet dsgetsize = new DataSet();

                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), mid, extrfl + dsrecalsale.Tables[0].Rows[i]["Name"].ToString() + dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", kds, atid, "", "", "");
                                    }

                                    //fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["Name"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString(), "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "");

                                }
                                else
                                {

                                    dscallgrid = new DataSet();
                                    dscallgrid = objCore.funGetDataSet("SELECT     dbo.ModifierFlavour.name AS flavourname, dbo.ModifierFlavour.price,dbo.ModifierFlavour.kdsid, dbo.MenuItem.Name FROM         dbo.ModifierFlavour INNER JOIN                      dbo.MenuItem ON dbo.ModifierFlavour.MenuItemId = dbo.MenuItem.Id where dbo.ModifierFlavour.id='" + flrid + "'");
                                    if (dscallgrid.Tables[0].Rows.Count > 0)
                                    {
                                        DataSet dsgetsize = new DataSet();
                                        q = "select * from ModifierFlavour where id='" + flrid + "'";
                                        dsgetsize = objCore.funGetDataSet(q);
                                        if (dsgetsize.Tables[0].Rows.Count > 0)
                                        {
                                            size = dsgetsize.Tables[0].Rows[0]["name"].ToString();
                                            size = size + "'";//size.Substring(0, 1) + "'";
                                            sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
                                            string val = dsgetsize.Tables[0].Rows[0]["price"].ToString();
                                            if (val == "")
                                            {
                                                val = "0";
                                            }

                                            sizeprice = float.Parse(val);
                                        }
                                        string temp = dscallgrid.Tables[0].Rows[0]["price"].ToString();
                                        if (temp == "")
                                        {
                                            temp = "0";
                                        }
                                        string extrfl = "";
                                        dsgetsize = new DataSet();


                                        double prc = sizeprice + Convert.ToDouble(temp);
                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", size + extrfl + dscallgrid.Tables[0].Rows[0]["name"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), flrid, dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), dsrecalsale.Tables[0].Rows[i]["atid"].ToString(), "", "", "");
                                    }
                                }

                            }
                            else
                            {
                                try
                                {
                                    DataSet dsdeall = new DataSet();
                                    q = "select * from deals where id='" + dealid + "'";
                                    dsdeall = objCore.funGetDataSet(q);
                                    if (dsdeall.Tables[0].Rows.Count > 0)
                                    {
                                        fillgrid("", "", dsdeall.Tables[0].Rows[0]["name"].ToString(), dsrecalsale.Tables[0].Rows[i]["price"].ToString(), dsrecalsale.Tables[0].Rows[i]["quantity"].ToString(), "Old", "", "", "", "", kds, dsrecalsale.Tables[0].Rows[i]["dealid"].ToString(), "", "", "");
                                    }
                                }
                                catch (Exception ex)
                                {
                                    
                                    
                                }
                            }
                        }

                    }
                    //dtcopy = new DataTable();
                    //dtcopy = dt.Copy();
                    string dis = dsrecalsale.Tables[0].Rows[0]["Discount"].ToString();
                    if (dis == "")
                    {
                        dis = "0";
                    }
                    txtdiscount.Text = dis;
                    discountkeys(dis, "",Limit,"");

                }
            }
            catch (Exception ex)
            {
                
               // MessageBox.Show(ex.Message);
            }
            finally
            {
                dscallgrid.Dispose();
                dsrecalsale.Dispose();
                dsgetkds.Dispose();
            }
            gettotal();
        }
        //public void recalsale(string sid, string voidstatus)
        //{
        //    DataSet dsrecalsale = new DataSet();
        //    DataSet dsgetkds = new DataSet();
        //    DataSet dscallgrid = new DataSet();
        //    try
        //    {
        //        editsale = sid;
        //        try
        //        {
        //            obcustomerdisplay.clear();
        //        }
        //        catch (Exception ex)
        //        {

        //        }
        //        saleid = Convert.ToInt32(sid);
        //        tabControl1.SelectedTab.Name = saleid.ToString();
        //        arraysalid(saleid.ToString());
        //        label4.Text = saleid.ToString();
        //        TabPage page = tabControl1.SelectedTab;
        //        var controls = page.Controls;
        //        foreach (var control in controls)
        //        {
        //            if (control is DataGridView)
        //            {
        //                DataGridView grid = control as DataGridView;
        //                DataTable tbl = grid.DataSource as DataTable;
        //                tbl.Clear();
        //            }
        //        }

        //        string q = "";
        //        if (voidstatus == "yes")
        //        {
        //            q = "SELECT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name, dbo.Saledetails.ModifierId,               dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer FROM  dbo.Saledetails INNER JOIN              dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id INNER JOIN dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id where dbo.Saledetails.saleid='" + sid + "'  order by dbo.Saledetails.id asc";
        //        }
        //        if (voidstatus == "no")
        //        {
        //            q = "SELECT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name, dbo.Saledetails.ModifierId,               dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer FROM  dbo.Saledetails INNER JOIN              dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id INNER JOIN dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id where dbo.Saledetails.saleid='" + sid + "' and dbo.Saledetails.Status ='Not Void' order by dbo.Saledetails.id asc";
        //        }
        //        dsrecalsale = objCore.funGetDataSet(q);
        //        if (dsrecalsale.Tables[0].Rows.Count > 0)
        //        {
        //            //TabPage page = tabControl1.SelectedTab;
        //            //var controls = page.Controls;
        //            //foreach (var control in controls)
        //            //{
        //            //    if (control is DataGridView)
        //            //    {
        //            //        DataGridView grid = control as DataGridView;
        //            //        DataTable tbl = grid.DataSource as DataTable;
        //            //        tbl.Clear();
        //            //    }
        //            //}

        //            #region MyRegion
        //            //if (tabControl1.SelectedIndex == 0)
        //            //{
        //            //    dt.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 1)
        //            //{
        //            //    dt2.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 2)
        //            //{
        //            //    dt3.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 3)
        //            //{
        //            //    dt4.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 4)
        //            //{
        //            //    dt5.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 5)
        //            //{
        //            //    dt6.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 6)
        //            //{
        //            //    dt7.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 7)
        //            //{
        //            //    dt8.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 8)
        //            //{
        //            //    dt9.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 9)
        //            //{
        //            //    dt10.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 10)
        //            //{
        //            //    dt11.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 11)
        //            //{
        //            //    dt12.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 12)
        //            //{
        //            //    dt13.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 13)
        //            //{
        //            //    dt14.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 14)
        //            //{
        //            //    dt15.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 15)
        //            //{
        //            //    dt16.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 16)
        //            //{
        //            //    dt17.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 17)
        //            //{
        //            //    dt18.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 18)
        //            //{
        //            //    dt19.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 19)
        //            //{
        //            //    dt20.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 20)
        //            //{
        //            //    dt21.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 21)
        //            //{
        //            //    dt22.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 22)
        //            //{
        //            //    dt23.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 23)
        //            //{
        //            //    dt24.Rows.Clear();
        //            //}
        //            //if (tabControl1.SelectedIndex == 24)
        //            //{
        //            //    dt25.Rows.Clear();
        //            //} 
        //            #endregion
        //            tabControl1.SelectedTab.Text = dsrecalsale.Tables[0].Rows[0]["Customer"].ToString();
        //            for (int i = 0; i < dsrecalsale.Tables[0].Rows.Count; i++)
        //            {
        //                string mid = dsrecalsale.Tables[0].Rows[i]["ModifierId"].ToString();
        //                string flrid = dsrecalsale.Tables[0].Rows[i]["Flavourid"].ToString();
        //                string quantoty = dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString();
        //                string cmnts = dsrecalsale.Tables[0].Rows[i]["comments"].ToString();
        //                string kds = "";
        //                if (dsrecalsale.Tables[0].Rows[i]["Status"].ToString().ToLower() == "void" && voidstatus == "yes")
        //                {
        //                    quantoty = "-1";
        //                }
        //                if (flrid == string.Empty || flrid == "0")
        //                {
        //                    if (mid == "0")
        //                    {
        //                        mid = "";
        //                        dsgetkds = new DataSet();
        //                        q = "select kdsid from MenuItem where id='" + dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString() + "'";
        //                        dsgetkds = objCore.funGetDataSet(q);
        //                        if (dsgetkds.Tables[0].Rows.Count > 0)
        //                        {
        //                            kds = dsgetkds.Tables[0].Rows[0][0].ToString();
        //                        }
        //                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), mid, dsrecalsale.Tables[0].Rows[i]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", kds);
        //                    }
        //                    else
        //                    {
        //                        dscallgrid = new DataSet();
        //                        dscallgrid = objCore.funGetDataSet("SELECT     dbo.Modifier.Id, dbo.Modifier.Name AS ModifierName, dbo.Modifier.Price, dbo.RawItem.ItemName AS name,dbo.Modifier.kdsid FROM         dbo.Modifier INNER JOIN                     dbo.RawItem ON dbo.Modifier.RawItemId = dbo.RawItem.Id where dbo.Modifier.id='" + mid + "'");
        //                        if (dscallgrid.Tables[0].Rows.Count > 0)
        //                        {
        //                            fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), dscallgrid.Tables[0].Rows[0]["id"].ToString(), dscallgrid.Tables[0].Rows[0]["ModifierName"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString());
        //                        }
        //                    }
        //                    //fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["Name"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString(), "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "");

        //                }
        //                else
        //                {
        //                    dscallgrid = new DataSet();
        //                    dscallgrid = objCore.funGetDataSet("SELECT     dbo.ModifierFlavour.name AS flavourname, dbo.MenuItem.Name, dbo.ModifierFlavour.price,dbo.ModifierFlavour.kdsid FROM         dbo.ModifierFlavour INNER JOIN                      dbo.MenuItem ON dbo.ModifierFlavour.MenuItemId = dbo.MenuItem.Id where dbo.ModifierFlavour.id='" + flrid + "'");
        //                    if (dscallgrid.Tables[0].Rows.Count > 0)
        //                    {
        //                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dscallgrid.Tables[0].Rows[0]["flavourname"].ToString().Substring(0, 1) + "'" + dscallgrid.Tables[0].Rows[0]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), flrid, dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString());
        //                    }
        //                }

        //            }
        //            //dtcopy = new DataTable();
        //            //dtcopy = dt.Copy();
        //            string dis = dsrecalsale.Tables[0].Rows[0]["Discount"].ToString();
        //            if (dis == "")
        //            {
        //                dis = "0";
        //            }
        //            txtdiscount.Text = dis;
        //            discountkeys(dis, "");

        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //        MessageBox.Show(ex.Message);
        //    }
        //    finally
        //    {
        //        dscallgrid.Dispose();
        //        dsrecalsale.Dispose();
        //        dsgetkds.Dispose();
        //    }
        //    //  gettotal();
        //}
        public void recalsaleprevious(string sid, string voidstatus)
        {
            DataSet dsrecalsale = new DataSet();
            DataSet dsgetkds = new DataSet();
            DataSet dscallgrid = new DataSet();
            try
            {
                // editsale = sid;

                try
                {
                    //obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {

                }
                //  saleid = Convert.ToInt32(sid);
                //tabControl1.SelectedTab.Name = saleid.ToString();
                //arraysalid(saleid.ToString());


                string q = "";
                if (voidstatus == "yes")
                {
                    q = "SELECT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name, dbo.Saledetails.ModifierId, dbo.Saledetails.RunTimeModifierId,               dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer FROM  dbo.Saledetails INNER JOIN              dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id INNER JOIN dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id where dbo.Saledetails.saleid='" + sid + "'  order by dbo.Saledetails.id asc";
                }
                if (voidstatus == "no")
                {
                    q = "SELECT dbo.Saledetails.comments, dbo.Saledetails.Flavourid, dbo.Saledetails.Id, dbo.Saledetails.MenuItemId, dbo.Saledetails.saleid, dbo.Sale.Discount, dbo.MenuItem.Name, dbo.Saledetails.ModifierId, dbo.Saledetails.RunTimeModifierId,               dbo.Saledetails.Quantity, dbo.Saledetails.Price, dbo.Saledetails.Status, dbo.Sale.Customer FROM  dbo.Saledetails INNER JOIN              dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id INNER JOIN dbo.Sale ON dbo.Saledetails.saleid = dbo.Sale.Id where dbo.Saledetails.saleid='" + sid + "' and dbo.Saledetails.Status ='Not Void' order by dbo.Saledetails.id asc";
                }
                dsrecalsale = objCore.funGetDataSet(q);
                if (dsrecalsale.Tables[0].Rows.Count > 0)
                {
                    saleid = Convert.ToInt32(sid);

                    //tabControl1.SelectedTab.Text = dsrecalsale.Tables[0].Rows[0]["Customer"].ToString();
                    for (int i = 0; i < dsrecalsale.Tables[0].Rows.Count; i++)
                    {
                        string mid = dsrecalsale.Tables[0].Rows[i]["ModifierId"].ToString();
                        string flrid = dsrecalsale.Tables[0].Rows[i]["Flavourid"].ToString();
                        string runtimid = dsrecalsale.Tables[0].Rows[i]["RunTimeModifierId"].ToString();
                        string quantoty = dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString();
                        string cmnts = dsrecalsale.Tables[0].Rows[i]["comments"].ToString();
                        string kds = "";
                        if (dsrecalsale.Tables[0].Rows[i]["Status"].ToString().ToLower() == "void" && voidstatus == "yes")
                        {
                            quantoty = "-1";
                        }
                        if (flrid == string.Empty || flrid == "0")
                        {
                            if (runtimid == string.Empty || runtimid == "0")
                            {
                                if (flrid == string.Empty || flrid == "0")
                                {
                                    if (mid == "0")
                                    {
                                        mid = "";
                                        dsgetkds = new DataSet();
                                        q = "select kdsid from MenuItem where id='" + dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString() + "'";
                                        dsgetkds = objCore.funGetDataSet(q);
                                        if (dsgetkds.Tables[0].Rows.Count > 0)
                                        {
                                            kds = dsgetkds.Tables[0].Rows[0][0].ToString();
                                        }
                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), mid, dsrecalsale.Tables[0].Rows[i]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", kds, "", "", "", "");
                                    }
                                    else
                                    {
                                        dscallgrid = new DataSet();
                                        q = "SELECT        Id, Name AS ModifierName, Price, kdsid FROM            dbo.Modifier where id='" + mid + "'";
                                        dscallgrid = objCore.funGetDataSet(q);
                                        if (dscallgrid.Tables[0].Rows.Count > 0)
                                        {
                                            fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), dscallgrid.Tables[0].Rows[0]["id"].ToString(), "    " + dscallgrid.Tables[0].Rows[0]["ModifierName"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                        }
                                    }
                                    //fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["Name"].ToString(), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), dsrecalsale.Tables[0].Rows[i]["Quantity"].ToString(), "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "");

                                }
                                else
                                {
                                    dscallgrid = new DataSet();
                                    dscallgrid = objCore.funGetDataSet("SELECT     dbo.ModifierFlavour.name AS flavourname, dbo.MenuItem.Name, dbo.ModifierFlavour.price,dbo.ModifierFlavour.kdsid FROM         dbo.ModifierFlavour INNER JOIN                      dbo.MenuItem ON dbo.ModifierFlavour.MenuItemId = dbo.MenuItem.Id where dbo.ModifierFlavour.id='" + flrid + "'");
                                    if (dscallgrid.Tables[0].Rows.Count > 0)
                                    {
                                        fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dscallgrid.Tables[0].Rows[0]["flavourname"].ToString() + "'" + dscallgrid.Tables[0].Rows[0]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), flrid, dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                    }
                                }
                            }
                            else
                            {
                                dscallgrid = new DataSet();
                                dscallgrid = objCore.funGetDataSet("SELECT        id, name, menuItemid, price, Quantity, status, branchid, kdsid, uploadStatus FROM            RuntimeModifier where id='" + runtimid + "'");
                                if (dscallgrid.Tables[0].Rows.Count > 0)
                                {
                                    fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", "    " + dscallgrid.Tables[0].Rows[0]["name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), "", dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), runtimid, dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                                }
                            }
                        }
                        else
                        {
                            dscallgrid = new DataSet();
                            dscallgrid = objCore.funGetDataSet("SELECT     dbo.ModifierFlavour.name AS flavourname, dbo.MenuItem.Name, dbo.ModifierFlavour.price,dbo.ModifierFlavour.kdsid FROM         dbo.ModifierFlavour INNER JOIN                      dbo.MenuItem ON dbo.ModifierFlavour.MenuItemId = dbo.MenuItem.Id where dbo.ModifierFlavour.id='" + flrid + "'");
                            if (dscallgrid.Tables[0].Rows.Count > 0)
                            {
                                fillgrid(dsrecalsale.Tables[0].Rows[i]["menuItemId"].ToString(), "", dscallgrid.Tables[0].Rows[0]["flavourname"].ToString() + "'" + dscallgrid.Tables[0].Rows[0]["Name"].ToString().Replace("Open Item", ""), dsrecalsale.Tables[0].Rows[i]["Price"].ToString(), quantoty, "Old", dsrecalsale.Tables[0].Rows[i]["id"].ToString(), flrid, dsrecalsale.Tables[0].Rows[i]["comments"].ToString(), "", dscallgrid.Tables[0].Rows[0]["kdsid"].ToString(), "", "", "", "");
                            }
                        }

                    }

                    string dis = dsrecalsale.Tables[0].Rows[0]["Discount"].ToString();
                    if (dis == "")
                    {
                        dis = "0";
                    }
                    txtdiscount.Text = dis;
                    // discountkeys(dis);

                }
            }
            catch (Exception ex)
            {

                //MessageBox.Show(ex.Message);
            }
            finally
            {
                dscallgrid.Dispose();
                ds.Dispose();
                dsgetkds.Dispose();
            }
            gettotal();
        }
        public string getkds(string menuitem)
        {
            string kdsid = "";
            DataSet dskds = new DataSet();
            try
            {
                string q = "select KDSId from MenuItem where id='" + menuitem + "'";
                dskds = objCore.funGetDataSet(q);
                if (dskds.Tables[0].Rows.Count > 0)
                {
                    kdsid = dskds.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {

                dskds.Dispose();
            }
            return kdsid;
        }
        public void fillgridruntimemodifier(string id, string mid, string itmname, string price, string q, string saletyp, string saledetailsid, string flavrid, string comnts, string runtimflid, string kdsid, int rowindex)
        {
            try
            {
                if (price == "0")
                {
                    price = "";
                }
                //if (mid != string.Empty)
                {
                    try
                    {
                        obcustomerdisplay.fillgrid(id, mid, itmname, price.ToString(), q.ToString(), txtdiscount.Text, getdiscountind(saleid), saledetailsid);
                    }
                    catch (Exception ex)
                    {


                    }
                }
                //string kdid = getkds(id);
                // dt.Rows.Add(id, mid, q, itmname, price, saletyp, saledetailsid, flavrid, comnts, runtimflid, kdid);
                DataRow dr;
                dr = dt.NewRow();
                dr[0] = id;
                dr[1] = mid;
                dr[2] = q;
                dr[3] = itmname;
                dr[4] = price;
                dr[5] = saletyp;
                dr[6] = saledetailsid;
                dr[7] = flavrid;
                dr[8] = comnts;
                dr[9] = runtimflid;
                dr[10] = kdsid;
                dt.Rows.InsertAt(dr, rowindex);
                dataGridView1.DataSource = dt;
                gettotal();
            }
            catch (Exception ex)
            {


            }

        }
        public void fillgridmodifier(string id, string mid, string itmname, string price, string q, string saletyp, string saledetailsid, string flavrid, string comnts, string runtimflid, string kdsid, int indx)
        {
            try
            {
                if (price == "0")
                {
                    price = "";
                }
                //if (mid != string.Empty)
                {
                    try
                    {
                        obcustomerdisplay.fillgrid(id, mid, itmname, price.ToString(), q.ToString(), txtdiscount.Text, getdiscountind(saleid), saledetailsid);
                    }
                    catch (Exception ex)
                    {


                    }
                }
                string kdid = "";
                if (kdsid == "")
                {
                    kdid = getkds(id);
                }
                else
                {
                    kdid = kdsid;
                }
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        if (tabControl1.SelectedIndex == 0)
                        {
                            DataRow dr = tbl.NewRow();
                            dr[0] = id;
                            dr[1] = mid; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                            dr[6] = saledetailsid; dr[7] = flavrid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid;

                            tbl.Rows.InsertAt(dr, indx);
                            //dt.Rows.Add(id, mid, q, itmname, price, saletyp, saledetailsid, flavrid, comnts, runtimflid, kdid);
                            grid.DataSource = tbl;
                        }

                        //grid.Columns[0].Visible = false;
                        //grid.Columns[7].Visible = false;
                        //grid.Columns[8].Visible = false;
                        //foreach (DataGridViewRow dr in grid.Rows)
                        //{
                        //    dr.Height = 40;
                        //}
                    }
                }

                gettotal();
                addon = "new";
            }
            catch (Exception ex)
            {


            }
        }
        public void fillgrideal(string id, string dealid, string itmname, string price, string q, string saletyp, string saledetailsid, string flavrid, string comnts, string runtimflid, string kdsid, int indx, string atid, string flid, string extraid)
        {
            try
            {
                if (price == "0")
                {
                    price = "";
                }
                //if (mid != string.Empty)
                {
                    try
                    {
                        obcustomerdisplay.fillgrid(id, "", itmname + " " + comnts, price.ToString(), q.ToString(), txtdiscount.Text, getdiscountind(saleid), saledetailsid);
                    }
                    catch (Exception ex)
                    {


                    }

                }
                string kdid = "";
                if (kdsid == "")
                {
                    kdid = getkds(id);
                }
                else
                {
                    kdid = kdsid;
                }
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            indx = grid.Rows.Count;
                        }
                        else
                        {
                            indx = 0;
                        }

                        DataTable tbl = grid.DataSource as DataTable;
                        //DataRow dr = dt.NewRow();
                        //dr[0] = id;
                        //dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //dr["extraid"] = extraid;
                        //dt.Rows.InsertAt(dr);
                        tbl.Rows.Add(id, "", q, itmname + " " + comnts, price, saletyp, saledetailsid, flavrid, comnts, runtimflid, kdid, extraid, atid);
                        grid.DataSource = tbl;


                        //if (tabControl1.SelectedIndex == 0)
                        //{
                        //    DataRow dr = dt.NewRow();
                        //    dr[0] = id;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dr["extraid"] = extraid;
                        //    dt.Rows.InsertAt(dr, indx);
                        //    //dt.Rows.Add(id, mid, q, itmname, price, saletyp, saledetailsid, flavrid, comnts, runtimflid, kdid);
                        //    grid.DataSource = dt;
                        //}
                        //if (tabControl1.SelectedIndex == 1)
                        //{
                        //    DataRow dr = dt2.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt2.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt2;
                        //}
                        //if (tabControl1.SelectedIndex == 2)
                        //{
                        //    DataRow dr = dt3.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt3.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt3;
                        //}
                        //if (tabControl1.SelectedIndex == 3)
                        //{
                        //    DataRow dr = dt4.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt4.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt4;
                        //}
                        //if (tabControl1.SelectedIndex == 4)
                        //{
                        //    DataRow dr = dt5.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt5.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt5;
                        //}
                        //if (tabControl1.SelectedIndex == 5)
                        //{
                        //    DataRow dr = dt6.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt6.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt6;
                        //}
                        //if (tabControl1.SelectedIndex == 6)
                        //{
                        //    DataRow dr = dt7.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt7.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt7;
                        //}
                        //if (tabControl1.SelectedIndex == 7)
                        //{
                        //    DataRow dr = dt8.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt8.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt8;
                        //}
                        //if (tabControl1.SelectedIndex == 8)
                        //{
                        //    DataRow dr = dt9.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt9.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt9;
                        //}
                        //if (tabControl1.SelectedIndex == 9)
                        //{
                        //    DataRow dr = dt10.NewRow();
                        //    dr[0] = id;
                        //    dr["extraid"] = extraid;
                        //    dr[1] = ""; dr[2] = q; dr[3] = itmname; dr[4] = price; dr[5] = saletyp;
                        //    dr[6] = saledetailsid; dr[7] = flid; dr[8] = comnts; dr[9] = runtimflid; dr[10] = kdid; dr[12] = atid;
                        //    dt10.Rows.InsertAt(dr, indx);
                        //    grid.DataSource = dt10;
                        //}
                        try
                        {
                            grid.Columns[0].Visible = false;
                            grid.Columns[1].Visible = false;
                            grid.Columns[5].Visible = false;
                            grid.Columns[6].Visible = false;
                            grid.Columns[7].Visible = false;
                            grid.Columns[8].Visible = false;
                            grid.Columns[9].Visible = false;
                            grid.Columns[10].Visible = false;
                            grid.Columns[11].Visible = false;
                            grid.Columns[12].Visible = false;
                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {

                            tbl.Dispose();
                        }
                        grid.ClearSelection();
                        grid.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        grid.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
                        grid.AllowUserToAddRows = false;
                        grid.AllowUserToDeleteRows = false;
                        grid.AllowUserToOrderColumns = false;
                        grid.ReadOnly = true;
                        grid.Rows[grid.Rows.Count - 1].Selected = true;
                        grid.Rows[grid.Rows.Count - 1].Cells[grid.Rows.Count - 1].Selected = true;
                        grid.CurrentCell = grid.Rows[grid.Rows.Count - 1].Cells[2];
                        grid.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                    }
                }

                gettotal();
            }
            catch (Exception ex)
            {


            }
            gettotal();
        }
        public string pricemethod = "";
        protected string getpricemethod()
        {
            string pricemethod = "net";
            string q = "select * from pricesetting";
            SqlDataReader dr = objCore.funGetDataReader1(q);
            try
            {

                if (dr.Read())
                {
                    pricemethod = dr["type"].ToString();
                    if (pricemethod == "")
                    {
                        pricemethod = "net";
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {


            }
            CacheClass.Cache.Insert("pricemethod", pricemethod, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
            return pricemethod;
        }
        string allownewline = "";
        public void fillgrid(string id, string mid, string itmname, string price, string q, string saletyp, string saledetailsid, string flavrid, string comnts, string runtimflid, string kdsid, string atid, string flid, string extraid,string code)
        {
            if (code.Length > 0)
            {
                DataSet dsmenu = new DataSet();
                try
                {

                    if (CacheClass.Cache["menuitem"] != null)
                    {
                        dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                    }
                    else
                    {
                        getmenuitemname();
                        dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                    }
                }
                catch (Exception)
                {


                }
                DataRow[] drr = dsmenu.Tables[0].Select("id=" + id);

                try
                {
                    runtimeremaining = 0;
                    modifiercount = drr[0]["modifiercount"].ToString();
                    if (modifiercount == "")
                    {
                        modifiercount = "0";
                    }
                }
                catch (Exception ex)
                {


                }
            }
            try
            {
                double temp = 0;

                try
                {
                    temp = Math.Round(Convert.ToDouble(price), 2);

                }
                catch (Exception ex)
                {

                }

                price = temp.ToString();
                if (price == "0")
                {
                    price = "";
                }
                //if (mid != string.Empty)
                {
                    try
                    {
                        obcustomerdisplay.fillgrid(id, mid, itmname + " " + comnts, price.ToString(), q.ToString(), txtdiscount.Text, getdiscountind(saleid), saledetailsid);
                    }
                    catch (Exception ex)
                    {


                    }
                }
                string kdid = "";
                if (kdsid == "")
                {
                    kdid = getkds(id);
                }
                else
                {
                    kdid = kdsid;
                }
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;


                        bool chk = false;
                        try
                        {
                            if (CacheClass.Cache["allownewline"] != null)
                            {
                                allownewline = (string)CacheClass.Cache["allownewline"];
                            }
                            else
                            {
                                try
                                {
                                    DataSet dss = new DataSet();
                                    dss = objCore.funGetDataSet("select * from DeviceSetting where device='Allow New Line'");
                                    if (dss.Tables[0].Rows.Count>0)
                                    {
                                        allownewline = (dss.Tables[0].Rows[0]["Status"].ToString());
                                        CacheClass.Cache.Insert("allownewline", allownewline, null, Cache.NoAbsoluteExpiration, TimeSpan.FromDays(2));
                                    }

                                }
                                catch (Exception ex)
                                {

                                }
                                allownewline = (string)CacheClass.Cache["allownewline"];
                            }
                        }
                        catch (Exception ex)
                        {
                            
                            
                        }

                        if (allownewline == "Enabled")
                        {
                            try
                            {
                                if (saletyp == "New")
                                {
                                    if ((runtimflid + mid).Length <= 0)
                                    {
                                        DataRow drrc = tbl.AsEnumerable().FirstOrDefault(r => r.Field<string>("Id") == id);
                                        // DataRow[] drrc = tbl.Select("Id=" + id);

                                        string tempp = drrc["price"].ToString();
                                        if (tempp == "")
                                        {
                                            tempp = "0";
                                        }
                                        float prc = float.Parse(tempp);

                                        float quantity = float.Parse(drrc["qty"].ToString());
                                        prc = float.Parse(Math.Round(prc / quantity, 2).ToString());

                                        drrc["price"] = prc * (quantity + 1);
                                        drrc["qty"] = quantity + 1;

                                        drrc["Saletype"] = "New";
                                        addon = "new";
                                        chk = true;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                //MessageBox.Show(ex.Message);
                               
                            }
                        }
                        if (chk == false)
                        {
                            tbl.Rows.Add(id, mid, q, itmname + " " + comnts, price, saletyp, saledetailsid, flavrid, comnts, runtimflid, kdid, extraid, atid, code);
                            grid.DataSource = tbl;
                        }

                        try
                        {
                            grid.Columns[0].Visible = false;
                            grid.Columns[1].Visible = false;
                            grid.Columns[5].Visible = false;
                            grid.Columns[6].Visible = false;
                            grid.Columns[7].Visible = false;
                            grid.Columns[8].Visible = false;
                            grid.Columns[9].Visible = false;
                            grid.Columns[10].Visible = false;
                            grid.Columns[11].Visible = false;
                            grid.Columns[12].Visible = false;
                            grid.Columns[13].Visible = false;
                        }
                        catch (Exception ex)
                        {
                        }
                        finally
                        {

                            tbl.Dispose();
                        }
                        grid.ClearSelection();
                        grid.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                        grid.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
                        grid.AllowUserToAddRows = false;
                        grid.AllowUserToDeleteRows = false;
                        grid.AllowUserToOrderColumns = false;
                        grid.ReadOnly = true;
                        grid.Rows[grid.Rows.Count - 1].Selected = true;
                        grid.Rows[grid.Rows.Count - 1].Cells[grid.Rows.Count - 1].Selected = true;
                        grid.CurrentCell = grid.Rows[grid.Rows.Count - 1].Cells[2];
                        grid.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);


                        foreach (DataGridViewColumn dc in grid.Columns)
                        {
                            if (dc.Index.Equals(2) || dc.Index.Equals(4))
                            {
                                dc.ReadOnly = false;
                            }
                            else
                            {
                                dc.ReadOnly = true;
                            }
                        }


                        //foreach (DataGridViewRow dr in grid.Rows)
                        //{
                        //    dr.Height = 40;
                        //}
                    }
                }

            }
            catch (Exception ex)
            {


            }
            finally
            {


            }
            gettotal();
        }

        public void calltabletorder(string table)
        {
            int count = tabControl1.TabCount;
            if (count < 10)
            {
                if (dataGridView1.Rows.Count > 0)
                {
                    neworder((count + 1).ToString());
                }
                else
                {
                    neworder(count.ToString());
                }
                //POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
                //obj.Show();
            }
            try
            {
                obcustomerdisplay.clear();
            }
            catch (Exception ex)
            {

            }
            try
            {
                DataSet dstabltorder = new DataSet();
                string q = "select * from TabletOrders where tableno='" + table + "' order by id";
                dstabltorder = objCore.funGetDataSet(q);
                for (int i = 0; i < dstabltorder.Tables[0].Rows.Count; i++)
                {
                    //lblordertype.Text = "Din In";
                    ds = new DataSet();
                    q = "select * from Menuitem where id='" + dstabltorder.Tables[0].Rows[i]["MenuItemId"].ToString() + "'";
                    ds = objCore.funGetDataSet(q);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        string menuid = dstabltorder.Tables[0].Rows[i]["MenuItemId"].ToString();
                        string flavrid = dstabltorder.Tables[0].Rows[i]["Flavourid"].ToString();
                        string modid = dstabltorder.Tables[0].Rows[i]["ModifierId"].ToString();
                        string rdid = dstabltorder.Tables[0].Rows[i]["RuntimeModifier"].ToString();
                        string kd = dstabltorder.Tables[0].Rows[i]["kdsid"].ToString();
                        int tbltquantity = Convert.ToInt32(dstabltorder.Tables[0].Rows[0]["quantity"].ToString());
                        string val = "";
                        val = dstabltorder.Tables[0].Rows[i]["price"].ToString();
                        if (val == "")
                        {
                            val = "0";
                        }
                        float prc = float.Parse(val);
                        //prc = prc * tbltquantity;
                        fillgrid(dstabltorder.Tables[0].Rows[i]["MenuItemId"].ToString(), modid, dstabltorder.Tables[0].Rows[i]["menuitem"].ToString().Replace("&#39;", "'"), prc.ToString(), tbltquantity.ToString(), "New", "", flavrid, "", rdid, kd, "", "", "", "");

                        try
                        {
                            // obcustomerdisplay.fillgrid(dstabltorder.Tables[0].Rows[i]["MenuItemId"].ToString(), "", dstabltorder.Tables[0].Rows[i]["menuitem"].ToString(), prc.ToString(), quantity.ToString());

                        }
                        catch (Exception ex)
                        {


                        }
                        // quantity = 1;
                        calculateqty = string.Empty;
                        // flavour(ds.Tables[0].Rows[0]["id"].ToString());
                        //modifier(ds.Tables[0].Rows[0]["id"].ToString());
                    }
                    tablettableno = table;
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void callrmodifierpoints(string id)
        {
            try
            {
                DataSet dsruntimemodifier = new DataSet();
                try
                {

                    if (CacheClass.Cache["runtimemodifier"] != null)
                    {
                        dsruntimemodifier = (DataSet)CacheClass.Cache["runtimemodifier"];
                    }
                    else
                    {
                        getmenuitemname();
                        dsruntimemodifier = (DataSet)CacheClass.Cache["runtimemodifier"];
                    }
                }
                catch (Exception)
                {


                }
                DataRow[] drrRuntime = dsruntimemodifier.Tables[0].Select("menuItemid=" + id);
                if (drrRuntime.Length > 0)
                {
                    runtimecount = drrRuntime.Length;
                    menutype = "runtime";
                    getruntimemodifier(id, "group");
                }
            }
            catch (Exception ex)
            {

            }
        }
        bool chkruntime = false;
        float atachmenupricee = 0;
        public void callfillgrid(Button btn,float quantity)
        {
            cs = objCore.getConnectionString();
            SqlDataReader dr = null;
            SqlConnection conn = new SqlConnection(cs);
            conn.Close();

            SqlCommand cmd = conn.CreateCommand();
            DataTable dtstr = new DataTable();
            try
            {
                DataSet dsgst = new DataSet();
                if (date == "")
                {
                    try
                    {
                        cs = objCore.getConnectionString();
                        dr = null;
                        conn = new SqlConnection(cs);
                        conn.Close();
                        conn.Open();
                        cmd = conn.CreateCommand();
                        cmd.CommandText = "str_Getdate";
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("DayStatus", "open");


                        dtstr = new DataTable();
                        dtstr.Load(cmd.ExecuteReader());
                        conn.Close();
                        dsgst = new DataSet();
                        dsgst.Tables.AddRange(new DataTable[] { dtstr });
                        if (dsgst.Tables[0].Rows.Count > 0)
                        {
                            date = dsgst.Tables[0].Rows[0]["Date"].ToString();
                            DateTime datetemp = Convert.ToDateTime(date);
                            date = datetemp.ToShortDateString();
                            lbldate.Text = "Sale Date: " + date.ToString();
                            //lbldate.Visible = true;
                            string day = dsgst.Tables[0].Rows[0]["DayStatus"].ToString();
                            if (day == "Close")
                            {
                                daystatus = "Day Start";
                            }
                            else
                            {
                                daystatus = "Day End";
                            }
                        }
                        else
                        {
                            daystatus = "Day Start";
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        dsgst.Dispose();
                    }


                    if (daystatus == "Day Start")
                    {
                        MessageBox.Show("Please Start Day First");
                        return;
                    }
                }

                {
                    if (shiftid.Trim().ToString() == "" || shiftid.Trim().ToString() == "0")
                    {


                        try
                        {
                            cs = objCore.getConnectionString();
                            dr = null;
                            conn = new SqlConnection(cs);
                            conn.Close();
                            conn.Open();
                            cmd = conn.CreateCommand();
                            cmd.CommandText = "str_Getshift";
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.AddWithValue("status", "open");
                            cmd.Parameters.AddWithValue("date", date);
                            cmd.Parameters.AddWithValue("Terminal", System.Environment.MachineName.ToString());

                            dtstr = new DataTable();
                            dtstr.Load(cmd.ExecuteReader());
                            conn.Close();
                            dsgst = new DataSet();
                            dsgst.Tables.AddRange(new DataTable[] { dtstr });
                            if (dsgst.Tables[0].Rows.Count > 0)
                            {
                                shiftid = dsgst.Tables[0].Rows[0]["shiftid"].ToString();
                            }

                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {
                            dsgst.Dispose();
                        }


                    }
                    if (shiftid.Trim().ToString() == "")
                    {
                        MessageBox.Show("Please Start Shift First");
                        return;
                    }
                    if (shiftid.Trim().ToString() == "0")
                    {
                        MessageBox.Show("Please Start Shift First");
                        return;
                    }
                }

                ds = new DataSet();

                float qntytemp = 0;
                if (quantity == 0)
                {
                    qntytemp = 1;
                }
                else
                {
                    qntytemp = quantity;
                }
                chkruntime = false;
                modifiercount = "0";
                //this.TopMost = false;
                if (pricemethod == "")
                {
                    try
                    {
                        string value1;
                        value1 = CacheClass.Cache["pricemethod"] as string;
                        if (null == value1)
                        {

                        }
                        else
                        {
                            pricemethod = value1;
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
                if (pricemethod == "")
                {
                    getpricemethod();
                }

                DataSet dsmenu = new DataSet();
                try
                {

                    if (CacheClass.Cache["menuitem"] != null)
                    {
                        dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                    }
                    else
                    {
                        getmenuitemname();
                        dsmenu = (DataSet)CacheClass.Cache["menuitem"];
                    }
                }
                catch (Exception)
                {


                }
                DataRow[] drr = dsmenu.Tables[0].Select("id=" + btn.Name);

                try
                {
                    modifiercount = drr[0]["modifiercount"].ToString();
                    if (modifiercount == "")
                    {
                        modifiercount = "0";
                    }
                }
                catch (Exception ex)
                {


                }






                //objCore = new classes.Clsdbcon();
                //ds = new DataSet();
                //string q = "select * from Menuitem where name='" + name.Text + "'";               
                //cs = objCore.getConnectionString();
                //dr = null;
                //conn = new SqlConnection(cs);
                //conn.Close();
                //conn.Open();
                //cmd = conn.CreateCommand();
                //cmd.CommandText = "str_GetmenuitemByname";
                //cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("name", name.Text);


                //dtstr = new DataTable();
                //dtstr.Load(cmd.ExecuteReader());
                //conn.Close();

                //ds.Tables.AddRange(new DataTable[] { dtstr });


                // if (ds.Tables[0].Rows.Count > 0)
                for (int i = 0; i < 1; i++)
                {
                    float prc = float.Parse(drr[0]["price"].ToString());

                    if (pricemethod.ToLower() == "gross")
                    {
                        string temp = drr[0]["GrossPrice"].ToString();
                        if (temp == "")
                        {
                            temp = "0";
                        }
                        prc = float.Parse(temp);

                        float g = float.Parse(gstperc) + 100;
                        g = g / 100;

                        prc = prc / g;
                    }
                    prc = prc + sizeprice;
                    // 
                    
                    if (prc <= 0)
                    {

                        if (sizechk == "")
                        {
                            if (flavourcheck == true)
                            {
                                MessageBox.Show("Please Select Size");
                                return;
                            }
                        }
                        else
                        {
                            MessageBox.Show("Invalid Menu Size");
                            sizechk = "";
                            menusize = "";
                            return;
                        }
                    }
                    if (attachmenuprice == true)
                    {
                        prc = 0;
                        prc = atachmenupricee;
                    }

                    prc = prc * qntytemp;
                    //fillgrid(ds.Tables[0].Rows[0]["id"].ToString(), "", size + ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString(), "New", "", sizeid, "", "", ds.Tables[0].Rows[0]["KDSId"].ToString(), "", "", "");
                    fillgrid(drr[0]["id"].ToString(), "", size + drr[0]["name"].ToString(), prc.ToString(), qntytemp.ToString(), "New", "", sizeid, "", "", drr[0]["KDSId"].ToString(), "", "", "", "");
                    addon = "new";

                    DataSet dsruntimemodifier = new DataSet();
                    try
                    {

                        if (CacheClass.Cache["runtimemodifier"] != null)
                        {
                            dsruntimemodifier = (DataSet)CacheClass.Cache["runtimemodifier"];
                        }
                        else
                        {
                            getmenuitemname();
                            dsruntimemodifier = (DataSet)CacheClass.Cache["runtimemodifier"];
                        }
                    }
                    catch (Exception)
                    {
                    }
                    //DataRow[] drrRuntime = dsruntimemodifier.Tables[0].Select("menuItemid=" + btn.Name);
                    //if (drrRuntime.Length > 0)
                    //{
                    //    runtimecount = drrRuntime.Length;
                    //    menutype = "runtime";
                    //    getruntimemodifier(drr[0]["id"].ToString(), "group");
                    //}

                    try
                    {
                        if (Convert.ToInt32(modifiercount) > 0)
                        {
                            try
                            {

                                string q = "SELECT        id, name, menuItemid, price, Quantity, kdsid, Type, quantityallowed,  GrossPrice,'ColorName' as ColorName,'Fontcolor' as Fontcolor FROM            RuntimeModifier where status='Active' and menuItemid='" + btn.Name + "'";
                                DataSet dsmenuruntime = new DataSet();
                                dsmenuruntime = objCore.funGetDataSet(q);

                                runtimecount = dsmenuruntime.Tables[0].Rows.Count;
                                menutype = "runtime";
                                getruntimemodifier(btn.Name.ToString(), "group");

                            }
                            catch (Exception ex)
                            {


                            }
                        }
                    }
                    catch (Exception exx)
                    {
                        
                       
                    }


                    //string q1 = "select * from RuntimeModifier where menuItemid='" + drr[0]["id"].ToString() + "' and status='Active'";
                    //DataSet ds1 = new DataSet();// objCore.funGetDataSet(q1);

                    //cs = objCore.getConnectionString();
                    //dr = null;
                    //conn = new SqlConnection(cs);
                    //conn.Close();
                    //conn.Open();
                    //cmd = conn.CreateCommand();
                    //cmd.CommandText = "str_Getruntimemodifier";
                    //cmd.CommandType = CommandType.StoredProcedure;
                    //cmd.Parameters.AddWithValue("menuItemid", drr[0]["id"].ToString());


                    //dtstr = new DataTable();
                    //dtstr.Load(cmd.ExecuteReader());
                    //conn.Close();

                    //ds1.Tables.AddRange(new DataTable[] { dtstr });



                    //if (ds1.Tables[0].Rows.Count > 0)
                   
                    try
                    {
                        //obcustomerdisplay.fillgrid(ds.Tables[0].Rows[0]["id"].ToString(), "", ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString());

                    }
                    catch (Exception ex)
                    {
                    }
                    calculateqty = string.Empty;
                    //flavour(ds.Tables[0].Rows[0]["id"].ToString());
                    quantity = 0;
                    if (attachmenuprice == true)
                    {
                        //tableLayoutPanelmenuitem.Controls.Clear();
                    }
                    //attachmenuprice = false;
                    //modifier(ds.Tables[0].Rows[0]["id"].ToString());
                }
            }
            catch (Exception ex)
            {

               // MessageBox.Show(ex.Message);
            }
            finally
            {
                ds.Dispose();
            }
        }

        SerialPort sp;
        public void openlinedisplay(string port)
        {
            try
            {
                sp = new SerialPort();
                sp.PortName = port;
                sp.BaudRate = 9600;
                sp.Parity = Parity.None;
                sp.DataBits = 8;
                sp.StopBits = StopBits.One;
                sp.Open();
                sp.Write(Convert.ToString((char)12));
            }
            catch (Exception ex)
            {


            }
        }
        public void closelinedisplay()
        {
            try
            {

                sp.Close();
                sp.Dispose();
                sp = null;
            }
            catch (Exception ex)
            {

            }
        }
        public void LineDisplay()
        {
            DataGridView grid = new DataGridView();
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        grid = control as DataGridView;
                    }
                }
            }
            catch (Exception ex)
            {

            }
            try
            {
                int totallength = 40;
                DataSet dslin = new DataSet();
                string q = "select * from linelength where printr='linedisplay'";
                dslin = objCore.funGetDataSet(q);
                if (dslin.Tables[0].Rows.Count > 0)
                {
                    string temp = dslin.Tables[0].Rows[0]["length"].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    totallength = Convert.ToInt32(temp);
                }
                string item = "", qty = "", price = "";
                // sp.Write(Convert.ToString((char)12));
                int count = dataGridView1.Rows.Count;
                //count = count - linedisplayqty;
                //int j = 1;
                //bool print = true;
                //foreach (DataGridViewRow dg in grid.Rows)
                //{
                //    if (count > 0)
                //    {
                //        if (j > count)
                //        {
                //            print = true;
                //        }
                //        else
                //        {
                //            print = false;
                //        }
                //    }
                //    j++;
                //    if (print == true)
                //    {
                //        item = dg.Cells["Item"].Value.ToString();
                //        qty = dg.Cells["qty"].Value.ToString();
                //        price = dg.Cells["price"].Value.ToString();
                //        if (item.Length > totallength - 10)
                //        {
                //            item = item.Substring(0, totallength - 12) + "..";
                //        }
                //        int length = item.Length;
                //        length = (totallength - 10) - length;
                //        int pad = length + 1;
                //        pad = pad + (2 - qty.Length);
                //        string temp = "";
                //        temp = temp.PadLeft(pad);
                //        qty = temp + qty;

                //        pad = 1 + (6 - price.Length);
                //        temp = "";
                //        temp = temp.PadLeft(pad);
                //        price = temp + price;
                //        sp.WriteLine((char)13 + item+"," + qty+","+  price);

                //    }
                //}
                //return;

                {

                    //  sp.WriteLine((char)13 + line);
                    if (txttotal.Text != "" && txttotal.Text != "0")
                    {
                        string total = "Total:" + txttotal.Text;
                        string gst = "GST:" + lblgst.Text;
                        string diss = "Dis.:(" + txtdiscount.Text + "%)" + txtdiscountamount.Text;
                        string net = "Net Total:  " + txtnettotal.Text;
                        if (txtdiscount.Text == "0")
                        {
                            diss = "";
                        }
                        if (lblgst.Text == "0")
                        {
                            gst = "";
                        }
                        sp.WriteLine((char)13 + net);
                    }
                }


            }
            catch (Exception ex)
            {


            }


        }
        //public void LineDisplay()
        //{
        //    DataGridView grid = new DataGridView();
        //    try
        //    {
        //        int count = tabControl1.TabCount;
        //        TabPage page = tabControl1.SelectedTab;
        //        var controls = page.Controls;
        //        foreach (var control in controls)
        //        {
        //            if (control is DataGridView)
        //            {
        //                grid = control as DataGridView;
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //    try
        //    {
        //        int totallength = 40;
        //        DataSet dslin = new DataSet();
        //        string q = "select * from linelength where printr='linedisplay'";
        //        dslin = objCore.funGetDataSet(q);
        //        if (dslin.Tables[0].Rows.Count > 0)
        //        {
        //            string temp = dslin.Tables[0].Rows[0]["length"].ToString();
        //            if (temp == "")
        //            {
        //                temp = "0";
        //            }
        //            totallength = Convert.ToInt32(temp);
        //        }
        //        string item = "", qty = "", price = "";
        //        sp.Write(Convert.ToString((char)12));
        //        int count = dataGridView1.Rows.Count;
        //        count = count - linedisplayqty;
        //        int j = 1;
        //        bool print = true;
        //        foreach (DataGridViewRow dg in grid.Rows)
        //        {
        //            if (count > 0)
        //            {
        //                if (j > count)
        //                {
        //                    print = true;
        //                }
        //                else
        //                {
        //                    print = false;
        //                }
        //            }
        //            j++;
        //            if (print == true)
        //            {
        //                item = dg.Cells["Item"].Value.ToString();
        //                qty = dg.Cells["qty"].Value.ToString();
        //                price = dg.Cells["price"].Value.ToString();
        //                if (item.Length > totallength - 10)
        //                {
        //                    item = item.Substring(0, totallength - 12) + "..";
        //                }
        //                int length = item.Length;
        //                length = (totallength - 10) - length;
        //                int pad = length + 1;
        //                pad = pad + (2 - qty.Length);
        //                string temp = "";
        //                temp = temp.PadLeft(pad);
        //                qty = temp + qty;

        //                pad = 1 + (6 - price.Length);
        //                temp = "";
        //                temp = temp.PadLeft(pad);
        //                price = temp + price;
        //                sp.WriteLine((char)13 + item + "," + qty + "," + price);

        //            }
        //        }
        //        return;
        //        if (print == true)
        //        {
        //            string line = "";
        //            for (int i = 0; i < totallength; i++)
        //            {
        //                line = line + "-";
        //            }
        //            sp.WriteLine((char)13 + line);
        //            if (txttotal.Text != "" && txttotal.Text != "0")
        //            {
        //                string total = "Total:" + txttotal.Text;
        //                string gst = "GST:" + lblgst.Text;
        //                string diss = "Dis.:(" + txtdiscount.Text + "%)" + txtdiscountamount.Text;
        //                string net = "Net:" + txtnettotal.Text;
        //                if (txtdiscount.Text == "0")
        //                {
        //                    diss = "";
        //                }
        //                if (lblgst.Text == "0")
        //                {
        //                    gst = "";
        //                }
        //                sp.WriteLine((char)13 + total + " " + gst + " " + diss + " " + net);
        //            }
        //        }


        //    }
        //    catch (Exception ex)
        //    {


        //    }


        //}
        public void modifier(string menuid, int qty)
        {
            DataSet dsmodifier = new DataSet();
            try
            {
                string q = "select * from modifier where menuitemid='" + menuid + "'";
                dsmodifier = objCore.funGetDataSet(q);
                if (dsmodifier.Tables[0].Rows.Count > 0)
                {
                    POSRestaurant.Sale.Modifier objmd = new Modifier(this);
                    objmd.id = menuid;
                    objmd.qty = qty;
                    objmd.Show();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsmodifier.Dispose();
            }
        }
        public string getsaleid()
        {
            string qry = "";
            int id = 0;

            ds = new DataSet();
                    try
                    {
                        //if (txtdiscount.Text == "100")
                        //{
                        //    qry = "select max(id) as id from sale1 where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        //}
                        //else
                        {

                            qry = "select max(id) as id from sale  where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                        }
                        ds = objCore.funGetDataSet(qry);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string i = ds.Tables[0].Rows[0][0].ToString();
                            if (i == string.Empty)
                            {
                                i = "0";
                            }
                            id = Convert.ToInt32(i);
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        ds.Dispose();
                    }
                    saleid = Convert.ToInt32(id);

            return saleid.ToString();
        }

        public string getOldsaleid()
        {
            string qry = "";
            int id = 0;

            ds = new DataSet();
            try
            {
                //if (txtdiscount.Text == "100")
                //{
                //    qry = "select max(id) as id from sale1 where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                //}
                //else
                {

                    qry = "select max(id) as id from sale  where TerminalOrder='" + System.Environment.MachineName.ToString() + "'";
                }
                ds = objCore.funGetDataSet(qry);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string i = ds.Tables[0].Rows[0][0].ToString();
                    if (i == string.Empty)
                    {
                        i = "0";
                    }
                    id = Convert.ToInt32(i);
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
            OldSaleId = Convert.ToString(id);

            return OldSaleId.ToString();
        }

        public void flavour(string menuid)
        {
            DataSet dsflavr = new DataSet();
            try
            {
                dsflavr = objCore.funGetDataSet("SELECT  * from ModifierFlavour where MenuItemId='" + menuid + "'");
                int qntytemp = 1;
                if (quantity == 0)
                {
                    qntytemp = 1;
                }
                else
                {
                    qntytemp = quantity;
                }
                if (dsflavr.Tables[0].Rows.Count > 0)
                {

                    ModifierFlaour obj = new ModifierFlaour(this);
                    obj.menuitemid = menuid;

                    obj.quantity = qntytemp;
                    //obj.id = dscallgrid.Tables[0].Rows[0]["id"].ToString();
                    obj.Show();
                }
                else
                {
                    modifier(menuid, qntytemp);
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsflavr.Dispose();
            }
        }
        private void grid1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            DataGridView dg = sender as DataGridView;
            DataGridViewRow row = dg.Rows[e.RowIndex];

            row.DefaultCellStyle.ForeColor = Color.Blue;
        }
        public string servicetype = "", servicesubtype = "", orderservicesubtype = "", servicegsttype = "";
        public void gettotal()
        {
           
            try
            {
                DataSet dsgst = new DataSet();
                dsgst = objCore.funGetDataSet("select * from SerivceCharges");
                if (dsgst.Tables[0].Rows.Count > 0)
                {
                    servicecharhes =float.Parse(dsgst.Tables[0].Rows[0]["charges"].ToString());
                    servicetype = dsgst.Tables[0].Rows[0]["OrderType"].ToString();
                    servicegsttype = dsgst.Tables[0].Rows[0]["GstType"].ToString();
                    servicechargestitle = dsgst.Tables[0].Rows[0]["Title"].ToString();
                    servicesubtype = dsgst.Tables[0].Rows[0]["SubType"].ToString();
                }
                else
                {
                    servicecharhes = 0;
                }
            }
            catch (Exception ex)
            {


            }
            try
            {
                if (servicecharhes > 0)
                {
                    string q = "select cancelservicecharges from sale where id='" + saleid + "'";
                    DataSet dschrg = new DataSet();
                    dschrg = objCore.funGetDataSet(q);
                    if (dschrg.Tables[0].Rows.Count > 0)
                    {
                        if (dschrg.Tables[0].Rows[0][0].ToString() == "yes")
                        {
                            servicecharhes = 0;

                        }
                    }
                }
            }
            catch (System.Exception ex)
            {

            }
            try
            {
                if (tabControl1.SelectedTab.Name == "Previous")
                {
                }
                else
                {
                    {
                        string q = "select sum(amount) as amount from advancecash where saleid='" + saleid + "'";
                        DataSet dsadv = new DataSet();
                        dsadv = objCore.funGetDataSet(q);
                        if (dsadv.Tables[0].Rows.Count > 0)
                        {
                            string val = dsadv.Tables[0].Rows[0][0].ToString();
                            if (val == "")
                            {
                                val = "0";
                            }
                            txtadvanc.Text = val;
                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            double voucherdiscount = 0;
            try
            {
                if (voucheramount > 0)
                {
                    if (applydiscount() == "before")
                    {
                        voucherdiscount = voucheramount;// -(voucheramount / 100);
                    }
                    else
                    {
                        voucherdiscount = voucheramount - (voucheramount * gst / 100);
                    }

                   double DisAmt = (Math.Round((voucherdiscount / Convert.ToDouble(txttotal.Text) * 100), 2));

                   if (DisAmt > Convert.ToDouble(Limit))
                   {
                       if (Convert.ToDouble(Limit) > 0)
                       {
                           txtdiscount.Text = Limit.ToString();
                       }
                       else {
                           txtdiscount.Text = (Math.Round((voucherdiscount / Convert.ToDouble(txttotal.Text) * 100), 2)).ToString();
                       
                       }
                   }
                   else
                   {
                       txtdiscount.Text = (Math.Round((voucherdiscount / Convert.ToDouble(txttotal.Text) * 100), 2)).ToString();
                   }


                }
            }
            catch (Exception ex)
            {


            }
            try
            {

                if (txtdiscount.Text == string.Empty)
                { }
                else
                {
                    float Num;
                    bool isNum = float.TryParse(txtdiscount.Text.ToString(), out Num); //c is your variable
                    if (isNum)
                    {

                    }
                    else
                    {

                        MessageBox.Show("Invalid Discount Value. Only Nymbers are allowed");
                        return;
                    }
                }
                double amout = 0, amountindvidualdiscount = 0;
                DataGridViewCellStyle RedCellStyle = null;
                RedCellStyle = new DataGridViewCellStyle();
                RedCellStyle.ForeColor = Color.RoyalBlue;

                DataGridViewCellStyle oldCellStyle = null;
                oldCellStyle = new DataGridViewCellStyle();
                oldCellStyle.ForeColor = Color.Black;

                DataGridViewCellStyle GreenCellStyle = null;
                GreenCellStyle = new DataGridViewCellStyle();
                GreenCellStyle.ForeColor = Color.Green;
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                IList<DiscountIndividualClass> DiscountIndividual = null;
                try
                {
                    DataSet dsindividual = new DataSet();
                    string q = "select id,convert(varchar(100), DiscountPerc) as DiscountPerc,convert(varchar(100), MenuItemId) as MenuItemId,convert(varchar(100), Saleid) as Saleid,convert(varchar(100), Saledetailsid) as Saledetailsid,convert(varchar(100), Runtimemodifierid) as Runtimemodifierid,convert(varchar(100), flavourid) as flavourid  from DiscountIndividual where Saleid='" + saleid + "'";
                    dsindividual = objCore.funGetDataSet(q);

                    DiscountIndividual = dsindividual.Tables[0].AsEnumerable().Select(row =>
                    new DiscountIndividualClass
                    {
                        DiscountPerc = row.Field<string>("DiscountPerc"),
                        MenuItemId = row.Field<string>("MenuItemId"),
                        Saleid = row.Field<string>("Saleid"),
                        Saledetailsid = row.Field<string>("Saledetailsid"),
                        Runtimemodifierid = row.Field<string>("Runtimemodifierid"),
                        flavourid = row.Field<string>("flavourid")


                    }).ToList();
                }
                catch (Exception ex)
                {


                }

                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        try
                        {
                            //dt.Columns.Add("Id", typeof(string));
                            //dt.Columns.Add("MdId", typeof(string));
                            //dt.Columns.Add("Qty", typeof(string));
                            //dt.Columns.Add("Item", typeof(string));
                            //dt.Columns.Add("Price", typeof(string));
                            string ordertypp = "";
                            obcustomerdisplay.clear();
                            if (saleid > 0)
                            {
                                ordertypp = getordertype();
                            }
                            else
                            {
                                ordertypp = newordertype;
                            }
                            obcustomerdisplay.newordertype = ordertypp;
                            obcustomerdisplay.servicetype = servicetype;
                            obcustomerdisplay.servicegsttype = servicegsttype;
                            obcustomerdisplay.servicecharhes = servicecharhes;
                            foreach (DataGridViewRow dgr in grid.Rows)
                            {
                                obcustomerdisplay.fillgrid(dgr.Cells["Id"].Value.ToString(), dgr.Cells["MdId"].Value.ToString(), dgr.Cells["Item"].Value.ToString(), dgr.Cells["Price"].Value.ToString(), dgr.Cells["Qty"].Value.ToString(), txtdiscount.Text, getdiscountind(saleid), dgr.Cells["SaleDetailid"].Value.ToString());
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                        foreach (DataGridViewRow gr in grid.Rows)
                        {
                            string gcell = string.Empty;
                            try
                            {
                                string sdid = "";
                                try
                                {
                                    sdid = DiscountIndividual.Where(x => x.Saledetailsid == gr.Cells["SaleDetailid"].Value.ToString()).Select(x => x.Saledetailsid).FirstOrDefault();
                                }
                                catch (Exception ex)
                                {
                                    
                                }
                                if (gr.Cells["SaleDetailid"].Value.ToString() == sdid)
                                {

                                }
                                else
                                {
                                    gcell = gr.Cells["price"].Value.ToString();
                                    
                                    if (gcell.Trim() == string.Empty)
                                    {
                                    }
                                    else
                                    {
                                        amountindvidualdiscount = amountindvidualdiscount + Convert.ToDouble(gcell);
                                    }
                                }
                                gcell = gr.Cells["price"].Value.ToString();
                                string mdval = gr.Cells["Mdid"].Value.ToString();
                                string type = gr.Cells["saletype"].Value.ToString();
                                if (type == "New")
                                {
                                    gr.DefaultCellStyle = RedCellStyle;
                                }
                                else
                                {
                                    gr.DefaultCellStyle = oldCellStyle;
                                }
                                // grid.ClearSelection();
                            }
                            catch (Exception ex)
                            {
                            }
                            if (gcell.Trim() == string.Empty)
                            {
                            }
                            else
                            {
                                amout = amout + Convert.ToDouble(gcell);
                            }
                        }
                        if (txtdiscount.Text.Trim() == string.Empty)
                        {
                            txtdiscount.Text = "0";
                        }
                    }
                }
                //foreach (DataGridViewRow gr in dataGridView1.Rows)
                //{

                //    string gcell = string.Empty;
                //    try
                //    {
                //        gcell = gr.Cells["price"].Value.ToString();
                //        string mdval = gr.Cells["Mdid"].Value.ToString();
                //        if (mdval != string.Empty)
                //        {
                //            gr.DefaultCellStyle = RedCellStyle;
                //        }
                //    }
                //    catch (Exception ex)
                //    {


                //    }
                //    if (gcell == string.Empty)
                //    {

                //    }
                //    else
                //    {
                //        amout = amout + Convert.ToDouble(gcell);
                //    }
                //}
                //string chkgst = "yes";
                //string q = "SELECT        dbo.MenuGroup.gst, dbo.MenuItem.Id FROM            dbo.MenuItem INNER JOIN                         dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.Id='"++"'";
                if (txtdiscount.Text.Trim() == string.Empty)
                {
                    txtdiscount.Text = "0";
                }
                int POSFee = 0;
               

                txttotal.Text = amout.ToString();
                double service = 0;
                double dscount = Convert.ToDouble(txtdiscount.Text.Trim());
                //dscount = (dscount * amout) / 100;
                dscount = (dscount * amountindvidualdiscount) / 100;
                dscount = Math.Round(dscount, 2);
                double discountedtotal = 0;



                double totalgst = 0;
                string ordertyppe = "";
                dscount = dscount + Convert.ToDouble(getdiscountind(saleid));
                if (saleid > 0)
                {
                    DataSet dsDis = new DataSet();
                     DataSet DisLimit = new DataSet();

                    string y = "SELECT discountid FROM dbo.Sale WHERE Id= " +saleid;
                    dsDis=  objCore.funGetDataSet(y);

                    if(dsDis.Tables.Count>0)
                    {
                    
                          string z = "SELECT limit FROM dbo.DiscountKeys WHERE id= " +dsDis.Tables[0].Rows[0][0].ToString();
                            DisLimit=  objCore.funGetDataSet(z);
                            if (DisLimit.Tables.Count > 0)
                            {
                                double disCount = Convert.ToDouble(DisLimit.Tables[0].Rows[0][0]);
                                Limit = disCount.ToString();
                            }
                    }

                  

                        
                   
                }

               // discountamount

              if(!string.IsNullOrEmpty(Limit)){
                  if(Convert.ToDouble(Limit)>0){
                    double disAmt =dscount;
                    if(disAmt > Convert.ToDouble(Limit))
                    {
                        dscount= Convert.ToDouble(Limit);
                        txtdiscountamount.Text = dscount.ToString();
                        discountamount = dscount.ToString();
                    }
                  }
                }


                if (saleid > 0)
                {
                    ordertyppe = getordertype();
                }
                else
                {
                    ordertyppe = newordertype;
                }
                if (applydiscount() == "before")
                {
                    discountedtotal = amout;// -dscount;
                    service = (servicecharhes * discountedtotal) / 100;
                    if (servicegsttype == "" && servicetype == "")
                    {
                        if (ordertyppe == "Take Away")
                        {
                            service = 0;
                        }
                    }
                    else
                    {
                        if (servicetype.Length > 0)
                        {
                            if (servicesubtype.Length > 0)
                            {
                                if (ordertyppe == servicetype || servicetype.ToLower() == "all")
                                {
                                    if ((servicegsttype == "Cash" && rdcash.Checked == true) && servicesubtype == orderservicesubtype || (servicegsttype == "Card" && rdcard.Checked == true && servicesubtype == orderservicesubtype) || (servicegsttype.ToLower() == "all" && servicesubtype == orderservicesubtype))
                                    {

                                    }
                                    else
                                    {
                                        service = 0;
                                    }
                                }
                                else
                                {
                                    service = 0;
                                }
                            }
                            else
                            {
                                if (ordertyppe == servicetype || servicetype.ToLower() == "all")
                                {
                                    if ((servicegsttype == "Cash" && rdcash.Checked == true) || (servicegsttype == "Card" && rdcard.Checked == true) || (servicegsttype.ToLower() == "all"))
                                    {

                                    }
                                    else
                                    {
                                        service = 0;
                                    }
                                }
                                else
                                {
                                    service = 0;
                                }
                            }
                        }
                    }                    
                    discountedtotal = discountedtotal + service;
                    totalgst = (gst * discountedtotal) / 100;
                    discountedtotal = discountedtotal - dscount;
                }
                else
                {
                    discountedtotal = amout - dscount;
                    service = (servicecharhes * discountedtotal) / 100;
                    if (servicegsttype == "" && servicetype == "")
                    {
                        if (ordertyppe == "Take Away")
                        {
                            service = 0;
                        }
                    }
                    else
                    {
                        if (servicesubtype.Length > 0)
                        {
                            if (servicetype.Length > 0)
                            {
                                if (ordertyppe == servicetype || servicetype.ToLower() == "all")
                                {
                                    if ((servicegsttype == "Cash" && rdcash.Checked == true && servicesubtype == orderservicesubtype) || (servicegsttype == "Card" && rdcard.Checked == true && servicesubtype == orderservicesubtype) || (servicegsttype.ToLower() == "all" && servicesubtype == orderservicesubtype))
                                    {
                                    }
                                    else
                                    {
                                        service = 0;
                                    }
                                }
                                else
                                {
                                    service = 0;
                                }
                            }
                        }
                        else
                        {
                            if (servicetype.Length > 0)
                            {
                                if (ordertyppe == servicetype || servicetype.ToLower() == "all")
                                {
                                    if ((servicegsttype == "Cash" && rdcash.Checked == true) || (servicegsttype == "Card" && rdcard.Checked == true) || (servicegsttype.ToLower() == "all"))
                                    {
                                    }
                                    else
                                    {
                                        service = 0;
                                    }
                                }
                                else
                                {
                                    service = 0;
                                }
                            }
                        }
                    }
                    totalgst = (gst * discountedtotal) / 100;
                    discountedtotal = discountedtotal + service;
                }
                discountedtotal = discountedtotal;
                txtservice.Text = Math.Round(service, 2).ToString();
                totalgst = Math.Round(totalgst, 2);
                discountamount = dscount.ToString();
                //discountamount = (Convert.ToDouble(discountamount) + Convert.ToDouble(getdiscountind(saleid))).ToString();
                if (Convert.ToDouble(discountamount) > Convert.ToDouble(Limit))
                {
                    if (Convert.ToDouble(Limit) > 0)
                    {
                        txtdiscountamount.Text = Limit.ToString();
                    }
                    else {
                        txtdiscountamount.Text = discountamount.ToString();
                    }
                }
                else
                {
                    txtdiscountamount.Text = discountamount.ToString();
                }
                lblgst.Text = totalgst.ToString();
                string tax = applytax();
                if (tax == "no")
                {
                    totalgst = 0;
                    lblgst.Text = "0";
                }
                double advance = 0;
                try
                {
                    string temp = txtadvanc.Text;
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    advance = Convert.ToDouble(temp);
                }
                catch (Exception ex)
                {
                }
                double newtotal = Math.Round(((totalgst + discountedtotal) - advance), 2) ;

                DataSet dsPosFee = new DataSet();
                string xy = "SELECT Id, Name, Amount FROM POSFee";
                dsPosFee = objCore.funGetDataSet(xy);
                if (dsPosFee.Tables[0].Rows.Count > 0)
                {
                    POSFee = Convert.ToInt32(dsPosFee.Tables[0].Rows[0][2]);

                }
                if (POSFee > 0)
                {
                    newtotal += POSFee;
                }


                txtnettotal.Text = newtotal.ToString();

                getnetval = Math.Round(((totalgst + discountedtotal) - advance), 2).ToString();

                obcustomerdisplay.filltotal(txttotal.Text, txtdiscountamount.Text, lblgst.Text, txtservice.Text, txtnettotal.Text);
            }
            catch (Exception ex)
            {
                string q = "insert into errors  (query,date,message) values('Gettotal','" + DateTime.Now.ToString() + "','" + ex.Message.Replace("'", "") + "')";
                objCore.executeQuery(q);
                //MessageBox.Show(ex.Message);
            }

        }

        protected string getdiscountind(int sid)
        {
            string amount = "0";
            try
            {
                string q = "select sum(Discount) from DiscountIndividual where saleid='" + sid + "'";
                DataSet dsf = new DataSet();
                dsf = objCore.funGetDataSet(q);
                if (dsf.Tables[0].Rows.Count > 0)
                {
                    string temp = dsf.Tables[0].Rows[0][0].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    amount = (temp);
                }
            }
            catch (Exception ex)
            {


            }
            return amount;
        }
        protected double getdiscountinddetails(string sid)
        {
            double amount = 0;
            try
            {
                string q = "select sum(Discount) from DiscountIndividual where Saledetailsid='" + sid + "'";
                DataSet dsf = new DataSet();
                dsf = objCore.funGetDataSet(q);
                if (dsf.Tables[0].Rows.Count > 0)
                {
                    string temp = dsf.Tables[0].Rows[0][0].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    amount = Convert.ToDouble(temp);
                }
            }
            catch (Exception ex)
            {


            }
            return amount;
        }
        public static string applydis = "";
        public string applydiscount()
        {
            string apply = "before";
            apply = applydis;
            if (apply == "")
            {
                apply = "before";
            }
            else
            {
                return apply;
            }
            DataSet dsdis = new DataSet();
            try
            {
                string q = "select * from applydiscount ";

                dsdis = objCore.funGetDataSet(q);
                if (dsdis.Tables[0].Rows.Count > 0)
                {
                    apply = dsdis.Tables[0].Rows[0]["apply"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsdis.Dispose();
            }
            if (apply == "")
            {
                apply = "before";
            }
            return apply;
        }
        public string applytax()
        {
            string tax = "yes";
            DataSet dsdis = new DataSet();
            try
            {
                string q = "select * from discountkeys where discount='" + txtdiscount.Text + "'";

                dsdis = objCore.funGetDataSet(q);
                if (dsdis.Tables[0].Rows.Count > 0)
                {
                    tax = dsdis.Tables[0].Rows[0]["tax"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsdis.Dispose();
            }
            if (tax == "")
            {
                tax = "yes";
            }
            return tax;
        }
        #region
        //private void button21_Click(object sender, EventArgs e)
        //{
        //    if (button21.Text != string.Empty)
        //    {
        //        callfillgrid(button21);
        //    }
        //}

        //private void button22_Click(object sender, EventArgs e)
        //{
        //    if (button22.Text != string.Empty)
        //    {
        //        callfillgrid(button22);
        //    }
        //}

        //private void button23_Click(object sender, EventArgs e)
        //{
        //    if (button23.Text != string.Empty)
        //    {
        //        callfillgrid(button23);
        //    }

        //}

        //private void button24_Click(object sender, EventArgs e)
        //{
        //    if (button24.Text != string.Empty)
        //    {
        //        callfillgrid(button24);
        //    }
        //}

        //private void button25_Click(object sender, EventArgs e)
        //{
        //    if (button25.Text != string.Empty)
        //    {
        //        callfillgrid(button25);
        //    }
        //}

        //private void button27_Click(object sender, EventArgs e)
        //{
        //    if (button27.Text != string.Empty)
        //    {
        //        callfillgrid(button27);
        //    }
        //}

        //private void button28_Click(object sender, EventArgs e)
        //{
        //    if (button28.Text != string.Empty)
        //    {
        //        callfillgrid(button28);
        //    }
        //}

        //private void button29_Click(object sender, EventArgs e)
        //{
        //    if (button29.Text != string.Empty)
        //    {
        //        callfillgrid(button29);
        //    }
        //}

        //private void button30_Click(object sender, EventArgs e)
        //{
        //    if (button30.Text != string.Empty)
        //    {
        //        callfillgrid(button30);
        //    }
        //}

        //private void button31_Click(object sender, EventArgs e)
        //{
        //    if (button31.Text != string.Empty)
        //    {
        //        callfillgrid(button31);
        //    }
        //}

        //private void button32_Click(object sender, EventArgs e)
        //{
        //    if (button32.Text != string.Empty)
        //    {
        //        callfillgrid(button32);
        //    }
        //}

        //private void button33_Click(object sender, EventArgs e)
        //{
        //    if (button33.Text != string.Empty)
        //    {
        //        callfillgrid(button33);
        //    }
        //}

        //private void button34_Click(object sender, EventArgs e)
        //{
        //    if (button34.Text != string.Empty)
        //    {
        //        callfillgrid(button34);
        //    }
        //}

        //private void button35_Click(object sender, EventArgs e)
        //{
        //    if (button35.Text != string.Empty)
        //    {
        //        callfillgrid(button35);
        //    }
        //}

        //private void button36_Click(object sender, EventArgs e)
        //{
        //    if (button36.Text != string.Empty)
        //    {
        //        callfillgrid(button36);
        //    }
        //}

        //private void button40_Click(object sender, EventArgs e)
        //{
        //    if (button40.Text != string.Empty)
        //    {
        //        callfillgrid(button40);
        //    }
        //}

        //private void button39_Click(object sender, EventArgs e)
        //{
        //    if (button39.Text != string.Empty)
        //    {
        //        callfillgrid(button39);
        //    }
        //}

        //private void button38_Click(object sender, EventArgs e)
        //{
        //    if (button38.Text != string.Empty)
        //    {
        //        callfillgrid(button38);
        //    }
        //}

        //private void button37_Click(object sender, EventArgs e)
        //{
        //    if (button37.Text != string.Empty)
        //    {
        //        callfillgrid(button37);
        //    }
        //}
        #endregion
        public void deleteitems(string Id, string mid, string rmId, string flid, int RowIndex)
        {
            //if (type == "New")
            try
            {
                {
                    int i = 0, j = 0;
                    int count = tabControl1.TabCount;
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;
                            DataTable tbl = grid.DataSource as DataTable;
                            foreach (DataGridViewRow dr in grid.Rows)
                            {
                                try
                                {
                                    if (rmId != "")
                                    {
                                        DataRow dgr = tbl.Rows[i];
                                        if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        {
                                            dgr.Delete();
                                        }
                                        #region MyRegion
                                        //if (tabControl1.SelectedIndex == 0)
                                        //{
                                        //    DataRow dgr = dt.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 1)
                                        //{
                                        //    DataRow dgr = dt2.Rows[i]; 
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 2)
                                        //{
                                        //    DataRow dgr = dt3.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 3)
                                        //{
                                        //    DataRow dgr = dt4.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 4)
                                        //{
                                        //    DataRow dgr = dt5.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 5)
                                        //{
                                        //    DataRow dgr = dt6.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 6)
                                        //{
                                        //    DataRow dgr = dt7.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 7)
                                        //{
                                        //    DataRow dgr = dt8.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 8)
                                        //{
                                        //    DataRow dgr = dt9.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 9)
                                        //{
                                        //    DataRow dgr = dt10.Rows[i];
                                        //    if (dr.Cells["runtimeflavourid"].Value.ToString() == rmId)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //} 
                                        #endregion

                                    }
                                    else if (mid != "")
                                    {
                                        DataRow dgr = tbl.Rows[i];
                                        if (dr.Cells["MdId"].Value.ToString() == mid)
                                        {
                                            dgr.Delete();
                                        }
                                        #region MyRegion
                                        //if (tabControl1.SelectedIndex == 0)
                                        //{
                                        //    DataRow dgr = dt.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 1)
                                        //{
                                        //    DataRow dgr = dt2.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 2)
                                        //{
                                        //    DataRow dgr = dt3.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 3)
                                        //{
                                        //    DataRow dgr = dt4.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 4)
                                        //{
                                        //    DataRow dgr = dt5.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 5)
                                        //{
                                        //    DataRow dgr = dt6.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 6)
                                        //{
                                        //    DataRow dgr = dt7.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 7)
                                        //{
                                        //    DataRow dgr = dt8.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 8)
                                        //{
                                        //    DataRow dgr = dt9.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 9)
                                        //{
                                        //    DataRow dgr = dt10.Rows[i];
                                        //    if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //} 
                                        #endregion
                                        //if (dr.Cells["MdId"].Value.ToString() == mid)
                                        //{
                                        //    dgr.Delete();
                                        //}
                                    }
                                    else
                                    {
                                        DataRow dgr = tbl.Rows[i];
                                        if (dr.Cells["id"].Value.ToString() == Id)
                                        {
                                            dgr.Delete();
                                        }
                                        #region MyRegion
                                        //if (tabControl1.SelectedIndex == 0)
                                        //{
                                        //    DataRow dgr = dt.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 1)
                                        //{
                                        //    DataRow dgr = dt2.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 2)
                                        //{
                                        //    DataRow dgr = dt3.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 3)
                                        //{
                                        //    DataRow dgr = dt4.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 4)
                                        //{
                                        //    DataRow dgr = dt5.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 5)
                                        //{
                                        //    DataRow dgr = dt6.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 6)
                                        //{
                                        //    DataRow dgr = dt7.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 7)
                                        //{
                                        //    DataRow dgr = dt8.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 8)
                                        //{
                                        //    DataRow dgr = dt9.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //}
                                        //if (tabControl1.SelectedIndex == 9)
                                        //{
                                        //    DataRow dgr = dt10.Rows[i];
                                        //    if (dr.Cells["id"].Value.ToString() == Id)
                                        //    {
                                        //        dgr.Delete();
                                        //    }
                                        //} 
                                        #endregion
                                        //DataRow dgr = dt.Rows[i];
                                        //if (dr.Cells["id"].Value.ToString() == Id)
                                        //{
                                        //    dgr.Delete();
                                        //}
                                    }
                                    i++;

                                }
                                catch (Exception ex)
                                {


                                }
                            }
                            grid.Refresh();
                        }
                    }
                    //DataRow dgr = dt.Rows[e.RowIndex];
                    //if (dgr["id"].ToString() == Id)
                    //{
                    //    dgr.Delete();
                    //}
                    //dataGridView1.Refresh();
                    gettotal();
                }
            }
            catch (Exception ex)
            {


            }
        }
        private void dataGridView1_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {

            //try
            //{
            //  //  if (editsale == string.Empty)
            //    {
            //        string Id = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString();
            //        string mid = dataGridView1.Rows[e.RowIndex].Cells["MdId"].Value.ToString();
            //        string flid = dataGridView1.Rows[e.RowIndex].Cells["flavourid"].Value.ToString();
            //        string rmId = dataGridView1.Rows[e.RowIndex].Cells["runtimeflavourid"].Value.ToString();
            //        string type = dataGridView1.Rows[e.RowIndex].Cells[5].Value.ToString();
            //        int lenght = dataGridView1.Rows.Count;
            //        for (int i = 0; i < lenght; i++)
            //        {
            //            if (type == "New")
            //            {
            //                deleteitems(Id, mid, rmId, flid,e.RowIndex);
            //                try
            //                {
            //                    obcustomerdisplay.deleteitems(Id, mid, rmId, flid, e.RowIndex);
            //                }
            //                catch (Exception ex)
            //                {


            //                }
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{


            //}

        }
        bool chk1 = false;
        private void button41_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button41.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button41.Text;
            //        }
            //        return;
            //    }


            //    {
            //        calculateqty = calculateqty + "1";
            //        quantity = Convert.ToInt32(calculateqty);
            //    }
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}

        }

        private void button42_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button42.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button42.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "2";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //quantity = 2;
        }

        private void button43_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button43.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button43.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "3";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
        }

        private void button44_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button44.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button44.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "4";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            // quantity = 4;
        }

        private void button45_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button45.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button45.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "5";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //quantity = 5;
        }

        private void button46_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button46.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button46.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "6";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //quantity = 6;
        }

        private void button47_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button47.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button47.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "7";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            // quantity = 7;
        }

        private void button48_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button48.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button48.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "8";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //quantity = 8;
        }

        private void button49_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button49.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button49.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "9";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //quantity = 9;
        }

        private void button50_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    if (focusedTextbox != null)
            //    {
            //        if (focusedTextbox.Text == "0")
            //        {
            //            focusedTextbox.Text = button50.Text;
            //        }
            //        else
            //        {
            //            focusedTextbox.Text = focusedTextbox.Text + button50.Text;
            //        }
            //        return;
            //    }
            //    calculateqty = calculateqty + "0";
            //    quantity = Convert.ToInt32(calculateqty);
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
            //string qtemp = quantity.ToString() + "0";
            //quantity = Convert.ToInt32(qtemp) ;
        }

        private void txtdiscount_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtdiscount.Text.Trim() == string.Empty)
                {
                    txtdiscount.Text = "0";
                }
                if (Convert.ToInt32(txtdiscount.Text.Trim()) > 100)
                {
                    txtdiscount.Text = "100";
                }
                if (txtdiscount.Text == string.Empty)
                { }
                else
                {
                    float Num;
                    bool isNum = float.TryParse(txtdiscount.Text.ToString(), out Num); //c is your variable
                    if (isNum)
                    {

                    }
                    else
                    {

                        MessageBox.Show("Invalid Discount Value. Only Nymbers are allowed");
                        return;
                    }
                }
                gettotal();
                try
                {
                    obcustomerdisplay.changtxtdscount(txtdiscount.Text);
                }
                catch (Exception ex)
                {


                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void txtcashrecvd_TextChanged(object sender, EventArgs e)
        {
            try
            {
                //txtchange.Text = ((Convert.ToDouble(txtcashrecvd.Text.Trim()) - (Convert.ToDouble(txtnettotal.Text.Trim())))).ToString();
                //obcustomerdisplay.changtext(txtcashrecvd.Text);
            }
            catch (Exception ex)
            {

                //MessageBox.Show(ex.Message);
            }
        }

        private void txtcashrecvd_Leave(object sender, EventArgs e)
        {
            try
            {
                //if ((Convert.ToDouble(txtcashrecvd.Text.Trim()) < (Convert.ToDouble(txtnettotal.Text.Trim()))))
                //{
                //    MessageBox.Show("Received Cash Can Not be Less Than Net total");
                //    txtcashrecvd.Focus();
                //}
            }
            catch (Exception ex)
            {


            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            //sale("Cash", saletype);
        }

        private void pictureBox2_Click(object sender, EventArgs e)
        {
            //sale("Credit Card", saletype);
        }

        private void pictureBox3_Click(object sender, EventArgs e)
        {
            //sale("Master Card", saletype);
        }
        public void discount()
        {
            txtdiscount.Enabled = true;
        }

        private void button52_Click(object sender, EventArgs e)
        {

            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.Show();
        }

        private void pictureBox4_Click(object sender, EventArgs e)
        {
            DuplicaeBill objd = new DuplicaeBill(this);
            objd.id = userid;
            objd.Show();
        }
        public void checktbltorder()
        {
            try
            {
                DataSet dschkorders = new DataSet();
                string q = "select DISTINCT tableno FROM         TabletOrders WHERE     (status = 'pending')";
                dschkorders = objCore.funGetDataSet(q);
                if (dschkorders.Tables[0].Rows.Count > 0)
                {
                    toolTip1.ToolTipTitle = dschkorders.Tables[0].Rows.Count.ToString() + " New Order(s)";
                    toolTip1.UseFading = true;
                    toolTip1.UseAnimation = false;
                    toolTip1.IsBalloon = false;
                    toolTip1.ShowAlways = true;
                    toolTip1.AutoPopDelay = 5000;
                    toolTip1.InitialDelay = 1000;
                    toolTip1.ReshowDelay = 500;
                    toolTip1.Show("Click Tablet Orders to View.", btntablet);
                }
            }
            catch (Exception ex)
            {


            }
        }
        private void timer1_Tick(object sender, EventArgs e)
        {
            //label4.Text = DateTime.Now.ToString();
            // checktbltorder();
        }

        private void pictureBox5_Click(object sender, EventArgs e)
        {
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "Discount";
            ob.Show();
        }

        private void panel15_Paint(object sender, PaintEventArgs e)
        {

        }

        private void pictureBox6_Click(object sender, EventArgs e)
        {
            RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.id = userid;
            ob.editmode = "VoidBill";
            ob.Show();
        }

        private void button1_Click_1(object sender, EventArgs e)
        {

        }
        public void savecomlimentrysale(string saleid)
        {
            DataSet dss = new DataSet();
            try
            {

                int idd = 0;
                dss = objCore.funGetDataSet("select max(id) as id from ComplimentryDiscount");
                if (dss.Tables[0].Rows.Count > 0)
                {
                    string ii = dss.Tables[0].Rows[0][0].ToString();
                    if (ii == string.Empty)
                    {
                        ii = "0";
                    }
                    idd = Convert.ToInt32(ii) + 1;
                }
                else
                {
                    idd = 1;
                }
                string q = "insert into ComplimentryDiscount (id,SaleId,Reason) values('" + idd + "','" + saleid + "','" + complimentryreason + "')";
                complimentryreason = "";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dss.Dispose();
            }
        }
        public void savecardinfo(string cardno)
        {
            DataSet dss = new DataSet();
            try
            {

                int idd = 0;
                dss = objCore.funGetDataSet("select max(id) as id from UserCardInfo");
                if (dss.Tables[0].Rows.Count > 0)
                {
                    string ii = dss.Tables[0].Rows[0][0].ToString();
                    if (ii == string.Empty)
                    {
                        ii = "0";
                    }
                    idd = Convert.ToInt32(ii) + 1;
                }
                else
                {
                    idd = 1;
                }
                string q = "insert into UserCardInfo (id,SaleId,cardno) values('" + idd + "','" + saleid + "','" + cardno + "')";

                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dss.Dispose();
            }
        }
        public string sid;
        public void billtype(string sid, string type, string amount, string recvid)
        {
            try
            {
                //DataSet dss = new DataSet();
                //int idd = 0;
                //dss = objCore.funGetDataSet("select max(id) as id from BillType");
                //if (dss.Tables[0].Rows.Count > 0)
                //{
                //    string ii = dss.Tables[0].Rows[0][0].ToString();
                //    if (ii == string.Empty)
                //    {
                //        ii = "0";
                //    }
                //    idd = Convert.ToInt32(ii) + 1;
                //}
                //else
                //{
                //    idd = 1;
                //}
                sid = saleid.ToString();
                if (sid == "0")
                {
                    sid = sid1;
                }
                string q = "delete from  BillType where SaleId='" + sid + "' and type='" + type + "' and amount='" + amount + "'";
                objCore.executeQuery(q);
                q = "insert into BillType (SaleId,type,Amount,recvid,cashoutime) values('" + sid + "','" + type + "','" + amount + "','" + recvid + "','" + DateTime.Now + "')";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {


            }
        }
        public int totalprints()
        {
            int prints = 1;
            DataSet ds = new DataSet();
            try
            {

                string q = "select * from printers where type='opos'";
                ds = objCore.funGetDataSet(q);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string temp = ds.Tables[0].Rows[0]["prints"].ToString();
                    if (temp == "")
                    {
                        temp = "1";
                    }
                    prints = Convert.ToInt32(temp);
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
            return prints;
        }
        public void updatetabletorder()
        {
            string q = "update TabletOrders set status='Completed' where tableno='" + tablettableno + "'";
            objCore.executeQuery(q);
        }
        bool isThreadRunningkitchen = false;
        protected void sendtokot(string printype)
        {
            string invoiceno = "";
            if (printinvoiceno.Trim() == "yes")
            {
                invoiceno = getinvoicenopaid(saleid.ToString());
            }
            Thread salethreadkitchen;
            string ordertype = "";
            string otype = "";
            if (tablettableno == "")
            {
                otype = "Take Away";
            }
            else
            {
                otype = "Tablet";
            }
            string total = txttotal.Text.Trim();
            string nettotal = txtnettotal.Text.Trim();
            string discount = txtdiscount.Text.Trim();
            string gst = lblgst.Text.Trim();
            int count = tabControl1.TabCount;
            TabPage page = tabControl1.SelectedTab;
            string cname = page.Text;
            string recvd = "0", chng = "0";
            string cusid = "";
            cusid = getcustomerid(saleid.ToString());
            var controls = page.Controls;
            string type = printtypekds();
            if (type == "")
            {
                type = "opos";
            }
            bool chknew = false;
            foreach (var control in controls)
            {
                if (control is DataGridView)
                {
                    bool checkprint = false;
                    dtcopy = new DataTable();
                    DataGridView grid = control as DataGridView;
                    foreach (DataGridViewRow dr in grid.Rows)
                    {
                        //DataSet dsgrp = new DataSet();
                        try
                        {
                            if (dr.Cells["Saletype"].Value.ToString() == "New")
                            {
                                chknew = true;
                                string id = dr.Cells[0].Value.ToString();
                                string q = "SELECT dbo.MenuGroup.type, dbo.MenuItem.KDSId FROM  dbo.MenuItem INNER JOIN               dbo.MenuGroup ON dbo.MenuItem.MenuGroupId = dbo.MenuGroup.Id where dbo.MenuItem.id='" + id + "'";
                                SqlDataReader drr = objCore.funGetDataReader1(q);
                                if (drr.Read())
                                {
                                    string temp = drr[0].ToString();
                                    if (temp.ToLower() == "print")
                                    {
                                        checkprint = true;
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        finally
                        {

                        }
                    }
                    //if (chknew == true)
                    //{
                    //    playbuzz();
                    //}
                    if (printype == "main kot")
                    {
                        checkprint = true;
                    }
                    DataTable tbl = grid.DataSource as DataTable;
                    //DataTable dtcopykitchen = new DataTable();
                    //dtcopykitchen = tbl.Copy();



                    DataTable dttableNew = new DataTable();
                    //Adding the Columns.
                    foreach (DataGridViewColumn column in grid.Columns)
                    {
                        dttableNew.Columns.Add(column.HeaderText, column.ValueType);
                    }

                    //Adding the Rows.
                    foreach (DataGridViewRow row in grid.Rows)
                    {
                        dttableNew.Rows.Add();
                        foreach (DataGridViewCell cell in row.Cells)
                        {
                            dttableNew.Rows[dttableNew.Rows.Count - 1][cell.ColumnIndex] = cell.Value.ToString();
                        }
                    }




                    if (type == "opos")
                    {
                        if (checkprint == true)
                        {
                            if (threading().ToLower() == "yes")
                            {
                                //OPOSPOSPrinter printer = new OPOSPOSPrinter();   

                                if (isThreadRunningkitchen == false)
                                {
                                    salethreadkitchen = new Thread(() => PrintReceiptkitchenThread(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype));
                                    salethreadkitchen.IsBackground = true;
                                    salethreadkitchen.Start();
                                }
                            }
                            else
                            {
                                PrintReceiptkitchen(dttableNew, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype);
                            }

                            //Thread FirstThread = new Thread(() => PrintReceiptkitchen(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype));
                            //FirstThread.Start();
                        }
                    }
                    else if (type.ToLower() == "generic")
                    {
                        if (checkprint == true)
                        {
                            if (printmain == "Enabled")
                            {
                                Printkitchen("", saleid.ToString(), cname, cusid, saletype, "", dt, recvd, chng, total, txtdiscountamount.Text, gst, "kot", dttableNew, ordertype1, printype, invoiceno);
                            }
                            else
                            {
                                salethreadkitchen = new Thread(() => Printkitchen("", saleid.ToString(), cname, cusid, saletype, "", dt, recvd, chng, total, txtdiscountamount.Text, gst, "kot", dttableNew, ordertype1, printype, invoiceno));
                                salethreadkitchen.IsBackground = true;
                                salethreadkitchen.Start();

                            }
                           
                            
                            
                        }
                    }
                    else
                    {
                        //bindreport(tbl, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                    }


                }
            }
        }

      
        protected void sendtokotrefund(string printype, DataTable tbl)
        {
            string invoiceno = "";
            if (printinvoiceno.Trim() == "yes")
            {
                invoiceno = getinvoicenopaid(saleid.ToString());
            }
            Thread salethreadkitchen;
            string ordertype = "";
            string otype = "";
            if (tablettableno == "")
            {
                otype = "Take Away";
            }
            else
            {
                otype = "Tablet";
            }
            string total = txttotal.Text.Trim();
            string nettotal = txtnettotal.Text.Trim();
            string discount = txtdiscount.Text.Trim();
            string gst = lblgst.Text.Trim();
            int count = tabControl1.TabCount;
            TabPage page = tabControl1.SelectedTab;
            string cname = page.Text;
            string recvd = "0", chng = "0";
            var controls = page.Controls;
            string type = printtypekds();
            bool chknew = false;
            if (checkprint("Print Kitchen") == "Enabled")
            {
                if (type.ToLower() == "opos")
                {
                    //if (checkprint == true)
                    {
                        if (threading().ToLower() == "yes")
                        {
                            //OPOSPOSPrinter printer = new OPOSPOSPrinter();   

                            if (isThreadRunningkitchen == false)
                            {
                                salethreadkitchen = new Thread(() => PrintReceiptkitchenThread(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype));
                                salethreadkitchen.IsBackground = true;
                                salethreadkitchen.Start();
                            }
                        }
                        else
                        {
                            PrintReceiptkitchen(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype);
                        }

                        //Thread FirstThread = new Thread(() => PrintReceiptkitchen(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype));
                        //FirstThread.Start();
                    }
                }
                else if (type.ToLower() == "generic")
                {
                    //if (checkprint == true)
                    {
                        Printkitchen("", saleid.ToString(), cname, "", saletype, "Void", dt, recvd, chng, total, txtdiscountamount.Text, gst, "kot", tbl,ordertype1,"",invoiceno);
                    }
                }
                else
                {
                    //  bindreport(tbl, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                }


                //PrintReceiptkitchenrefund(tbl, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), "Refund", total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, printype);
            }
        }


        public void payadvance(string amount)
        {
            try
            {
                string q = "insert into advancecash (saleid, amount) values('" + saleid + "','" + amount + "')";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            gettotal();
        }
        delegate void SetTextCallback(string text);
        private void SetText(string text)
        {
            tabControl1.SelectedTab.Name = text;
        }
        bool isThreadRunningsale = false;

        public void sendmessage(string net)
        {
            try
            {
                string message = "";
                string Phon = "";
                string url = "";
                string q = "select * from messages where type='sale'";
                SqlDataReader dr = objCore.funGetDataReader1(q);

                if (dr.Read())
                {
                    message = dr["message"].ToString();

                    // message =System.Web.HttpContext.Current.Server.UrlEncode(message);
                    url = dr["url"].ToString();

                    q = "select * from sale where id='" + saleid + "'";
                    dr = null;
                    dr = objCore.funGetDataReader1(q);
                    if (dr.Read())
                    {
                        message = message.Replace("{customer}", dr["customer"].ToString()).Replace("{bill}", net);
                        message = HttpUtility.UrlEncode(message);
                        Phon = dr["phone"].ToString();
                        Phon = Phon.Substring(1);

                    }
                    if (Phon.Length > 0 && url.Length > 0)
                    {
                        Phon = "92" + Phon;
                        url = url.Replace("{phone}", Phon).Replace("{message}", message);
                        ////url =System.Web.Server.UrlEncode(url);
                        //url = HttpContext.Current.Server.UrlEncode(url);
                        // url = "http://sms.smsonthego.com/api/?username=GJCJT&password=Admin%23*02&receiver=923137807024&msgdata=testmessage";
                        HttpWebRequest request1 = WebRequest.Create(url) as HttpWebRequest;

                        HttpWebResponse response1 = request1.GetResponse() as HttpWebResponse;
                        Stream stream1 = response1.GetResponseStream();
                    }
                }
                //string message = "--------------\n";
                //message = message + "Chicken%20Briayni%20Full-2- 500\n";
                //message = message + "Chicken%20Briayni%20Half-2- 300\n";
                //message = message + "----------\n";
                //message = message + "Total:%20%20800";
                //message = message + "----------\n";
                //message = message + "Customer%20Name\n";
                //message = message + "Customer%20Phone\n";
                //message = message + "Customer%20Address\n";
            }
            catch (Exception ex)
            {
            }
        }
        DataTable dtparal = new DataTable();
        private List<InvoiceItems> Items()
        {
            List<InvoiceItems> lst = new List<InvoiceItems>();


            InvoiceItems objitem = new InvoiceItems();
            objitem.ItemCode = "000";
            objitem.ItemName = "Fish";
            objitem.PCTCode = "98012000";
            objitem.Quantity = 1;



            objitem.TotalAmount = 106;
            objitem.SaleValue = 100;
            objitem.TaxCharged = 16;
            objitem.Discount = 10;
            objitem.TaxRate = 16;
            objitem.FurtherTax = 0;
            objitem.InvoiceType = 1;
            objitem.RefUSIN = "";
            lst.Add(objitem);


            return lst;
        }
        public string qrcode = "";
        protected void fillparral(DataTable dt, string totalsale, string tax, string discountamount, string discount, string net, string mop, string invoicetype, string furthertax)
        {
            

            try
            {
                if (furthertax == "")
                {
                    furthertax = "0";
                }
              //  MessageBox.Show(dtparal.Rows[0]["POSID"].ToString());
                Invoice objinv = new Invoice();
                objinv.Invoicenumber = "";
                objinv.POSID = Convert.ToInt32(dtparal.Rows[0]["POSID"].ToString().Trim());
                objinv.USIN = saleid.ToString();
                objinv.DateTime = Convert.ToDateTime(date);
                objinv.BuyerName = "Walk in Customer";
                objinv.TotalSaleValue = Convert.ToDouble(totalsale);
                objinv.TotalTaxCharged = Convert.ToDouble(tax);
                objinv.FurtherTax = Convert.ToDouble(furthertax);
                objinv.Discount = Convert.ToDouble(discountamount);
                objinv.TotalBillAmount = Convert.ToDouble(net);
                objinv.PaymentMode = Convert.ToInt32(mop);
                objinv.InvoiceType = Convert.ToInt32(invoicetype);
                objinv.Items = Items(dt, discount, invoicetype);


                string URI = "http://localhost:8524/api/IMSFiscal/GetInvoiceNumberByModel";
                HttpResponseMessage response = null;
                HttpClient client = new HttpClient();

                client = new HttpClient();

                string param = JsonConvert.SerializeObject(objinv);
                var content = new StringContent(JsonConvert.SerializeObject(objinv), Encoding.UTF8, "application/json");
                HttpResponseMessage res = client.PostAsync(URI, content).Result;
                string result = res.Content.ReadAsStringAsync().Result;
               //  MessageBox.Show(result);
                result = "[" + result + "]";
                List<FbrResponse> fbrresponse = new List<FbrResponse>();


                fbrresponse = (List<FbrResponse>)JsonConvert.DeserializeObject(result, typeof(List<FbrResponse>));
               //  MessageBox.Show(result.ToString());
                qrcode = fbrresponse[0].InvoiceNumber;
               // MessageBox.Show(qrcode);

            }
            catch (Exception ex)
            {
                  MessageBox.Show(ex.Message);
            }

        }
        private List<InvoiceItems> Items(DataTable dt, string discountt, string invtype)
        {
            string ordertyppe = "";
            List<InvoiceItems> lst = new List<InvoiceItems>();
            foreach (DataRow rows in dt.Rows)
            {


                InvoiceItems objitem = new InvoiceItems();
                objitem.ItemCode = "000";
                objitem.ItemName = rows["Item"].ToString();
                objitem.PCTCode = dtparal.Rows[0]["PCTCode"].ToString();
                objitem.Quantity = Convert.ToDouble(rows["Qty"].ToString());
                string temp = rows["Price"].ToString();

                if (temp == "")
                {
                    temp = "0";
                }
                double price = Convert.ToDouble(temp);
                string val = "";
                double discount = 0, gstt = 0, scarges = 0;
                double totalsrvctax = 0;


                try
                {

                    scarges = (price * servicecharhes) / 100;
                    scarges = Math.Round(scarges, 2);
                    val = txtdiscount.Text;
                    if (val == "")
                    {
                        val = "0";
                    }
                    if (ordertyppe == "")
                    {
                        ordertyppe = getordertype();
                    }
                    if (ordertyppe == "Take Away")
                    {
                        scarges = 0;
                    }
                    double dis = Convert.ToDouble(discountt);
                    if (dis > 0 && price > 0)
                    {
                        discount = (price * dis) / 100;
                        discount = Math.Round(discount, 2);
                    }



                    gstt = Convert.ToDouble(gstperc);
                    if (applydiscount() == "before")
                    {

                        if (gstt > 0 && price > 0)
                        {
                            gstt = ((price) * gstt) / 100;
                            gstt = Math.Round(gstt, 2);
                        }
                        else
                        {
                            gstt = 0;
                        }
                    }
                    else
                    {
                        if (gstt > 0 && price > 0)
                        {
                            gstt = ((price - discount) * gstt) / 100;
                            gstt = Math.Round(gstt, 2);
                        }
                        else
                        {
                            gstt = 0;
                        }
                    }
                }
                catch (Exception ex)
                {
                }
                try
                {
                    totalsrvctax = (Convert.ToDouble(gstperc) * scarges) / 100;
                }
                catch (Exception e)
                {

                }

                objitem.TotalAmount = (price + gstt);
                objitem.SaleValue = price;
                objitem.TaxCharged = gstt;
                objitem.Discount = discount;
                objitem.TaxRate = gst;
                objitem.Discount = discount;
                objitem.FurtherTax = totalsrvctax;
                objitem.InvoiceType = Convert.ToInt32(invtype);

                lst.Add(objitem);

            }
            return lst;
        }
        BackgroundWorker bg2 = new BackgroundWorker();
        private void myBGWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                getcompany();
                int print = 1;
                string printername = "";
                DataSet dsprint = new DataSet();
                string q = "select * from Printers where type='Receipt'";
                SqlDataReader dr = objCore.funGetDataReader1(q);

                try
                {
                    if (dr.Read())
                    {
                        printername = dr["name"].ToString();
                        string temp = dr["Prints"].ToString();
                        if (temp == "")
                        {
                            temp = "1";
                        }
                        print = Convert.ToInt32(temp);
                    }
                }
                catch (Exception ex)
                {
                }
                string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                string svschrgs = txtservice.Text;
                string info = getdeliveryinfo(saleid.ToString());
                bindreport(tblthread, saletype1, sid1.ToString(), "", ordertype1, total1, nettotal1, discount1, gst1, recvd1, chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs);

            }
            catch (Exception ex)
            {
            }
        }
        DataTable tblthread;
        string sid1 = "";
        static string printtypee = "", printernamee = "", printernameegeneric = "";
        public void ringbell()
        {

            try
            {
                if (printtypee == "opos")
                {
                    OPOSPOSPrinter printer = new OPOSPOSPrinter(); ;
                    try
                    {

                        string pname = printernamee;// printername("opos");
                        printer.Open(pname);
                        printer.ClaimDevice(10000);
                        printer.DeviceEnabled = true;
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        printer.ReleaseDevice();
                        printer.Close();

                    }
                    catch (Exception ex)
                    {

                    }
                }
                else if (printtypee == "generic")
                {

                    EmployeeFunctions obj = new EmployeeFunctions(this);

                    obj.Print(printernamee);
                }

            }
            catch (Exception ex)
            {
                
            }
        }
        public void opendrawer1()
        {

            try
            {
                if (printtypee == "opos")
                {
                    OPOSPOSPrinter printer = new OPOSPOSPrinter(); ;
                    try
                    {

                        string pname = printernamee;// printername("opos");
                        printer.Open(pname);
                        printer.ClaimDevice(10000);
                        printer.DeviceEnabled = true;
                        printer.PrintNormal(2, System.Text.ASCIIEncoding.ASCII.GetString(new byte[] { 27, 112, 48, 55, 121 }));
                        printer.ReleaseDevice();
                        printer.Close();

                    }
                    catch (Exception ex)
                    {

                    }
                }
                else
                {

                    EmployeeFunctions obj = new EmployeeFunctions(this);

                    obj.Print(printernameegeneric);
                }

            }
            catch (Exception ex)
            {

            }
        }
        public  string ordersource = "";
        public  float ordersourceamount = 0;
        public void pay(string saletype, string recvd, string chng, string cname, string pasotype, string phone,string gsttype)
        {
            qrcode = "";
            try
            {
                string nettotal = txtnettotal.Text.Trim();
                
                try
                {
                    if (Convert.ToDouble(recvd) > 0)
                    {
                        if (opendrawer().ToLower() != "printer")
                        {
                            //OPOSCashDrawer myCashDrawer = new OPOSCashDrawer();
                            //myCashDrawer.Open(cashdrawername());
                            //myCashDrawer.ClaimDevice(1000);
                            //myCashDrawer.DeviceEnabled = true;
                            //myCashDrawer.OpenDrawer();
                            //myCashDrawer.DeviceEnabled = false;
                            //myCashDrawer.ReleaseDevice();
                            //myCashDrawer.Close();
                        }
                        else
                        {
                            //try
                            //{
                            //    EmployeeFunctions ob = new EmployeeFunctions(this);
                            //    // ob.opencashdrawer();
                            //    Thread drawerthread;
                            //    drawerthread = new Thread(() => ob.opencashdrawer("Bill Closing", userid));
                            //    drawerthread.IsBackground = true;
                            //    drawerthread.Start();
                            //}
                            //catch (Exception ex)
                            //{
                            //}
                        }
                        try
                        {
                            int countpral = 0;
                            try
                            {
                                countpral = dtparal.Rows.Count;
                            }
                            catch (Exception ex)
                            {

                            }
                            if (countpral <= 0)
                            {
                                string q = "select * from fbrinfo where terminal='"+System.Environment.MachineName+"'";
                                dtparal = objCore.funGetDataSet(q).Tables[0];

                            }
                            if (dtparal.Rows.Count <= 0)
                            {
                                string q = "select * from fbrinfo";
                                dtparal = objCore.funGetDataSet(q).Tables[0];

                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        
                        if (dtparal.Rows.Count > 0)
                        {
                            // MessageBox.Show(dtparal.Rows.Count.ToString());
                            TabPage page = tabControl1.SelectedTab;
                            var controls = page.Controls;
                            foreach (var control in controls)
                            {
                                if (control is DataGridView)
                                {
                                    // MessageBox.Show(dtparal.Rows.Count.ToString());
                                    DataGridView grid = control as DataGridView;
                                    DataTable tbl = grid.DataSource as DataTable;

                                    
                                    datatableprint = new DataTable();
                                    datatableprint = tbl;


                                    string invoicetype = "";
                                    if (saletype.ToLower().Contains("cash"))
                                    {
                                        invoicetype = "1";
                                    }
                                    if (saletype.ToLower().Contains("visa"))
                                    {
                                        invoicetype = "2";
                                    }
                                    if (saletype.ToLower().Contains("cash,visa"))
                                    {
                                        invoicetype = "5";
                                    }

                                    double totalsrvctax = 0;
                                    double totalsgst = 0;
                                    try
                                    {
                                        totalsrvctax = (Convert.ToDouble(gstperc) * Convert.ToDouble(txtservice.Text)) / 100;
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                    try
                                    {
                                        totalsgst = Convert.ToDouble(lblgst.Text) - totalsrvctax;
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                   // MessageBox.Show(tbl.Rows.Count.ToString());
                                    fillparral(tbl, txttotal.Text, totalsgst.ToString(), txtdiscountamount.Text, txtdiscount.Text, txtnettotal.Text, invoicetype, "1", totalsrvctax.ToString());
                                }
                            }
                        }

                        //Thread sf = new Thread(new ThreadStart(sendmessage));
                        //sf.Start();
                        //sendmessage(nettotal);

                    }
                }
                catch (Exception ex)
                {

                     //MessageBox.Show(ex.Message);
                }
                string otype = pasotype;
                //if (tablettableno == "")
                //{
                //    otype = "Take Away";
                //}
                //else
                //{
                //    otype = "Tablet";
                //}
                string ordertype = otype;
                ordertype1 = ordertype;
                string total = txttotal.Text.Trim();

                string discount = txtdiscount.Text.Trim();
                string discountamount = txtdiscountamount.Text.Trim();
                string gst = lblgst.Text.Trim();
                string adv = txtadvanc.Text;
                if (adv == "")
                {
                    adv = "0";
                }

                double advance = 0;
                try
                {
                    advance = Convert.ToDouble(adv);
                }
                catch (Exception ex)
                {


                }
                double net = 0;
                net = Convert.ToDouble(nettotal) + advance;
                tabControl1.SelectedTab.Text = cname;

                Thread salethreadnew;
                sale(saletype, otype, cname);

                if (addon == "new")
                {
                    if (PrintKitchen == "Enabled")
                    {
                        sendtokot("kitchen");
                    }
                    if (printmain == "Enabled")
                    {
                        sendtokot("main kot");
                    }
                    if (kitchenbell == "Enabled")
                    {
                        ringbell();
                    }
                }

                if (recvd == "")
                {

                    getorders("new");
                    recalsale(saleid.ToString(), "no");
                    return;
                }
                string invoiceno = "";
                if (printinvoiceno.Trim().ToLower() == "yes")
                {
                    invoiceno = getinvoicenopaid(saleid.ToString());
                }
                //dtcopy = new DataTable();
                //dtcopy = dt.Copy();
                //if (vBtnkot.Enabled == false)
                {


                    try
                    {
                        advance = Convert.ToDouble(adv);
                    }
                    catch (Exception ex)
                    {


                    }
                    callrecipe("New");
                    cname1 = cname; date1 = date; cashr1 = cashr; recvd1 = recvd; chng1 = chng; saletype1 = saletype; total1 = total; gst1 = gst; discount1 = discount; nettotal1 = nettotal.ToString(); otype1 = otype; discountamount1 = discountamount;
                    advance1 = advance;
                    sid1 = saleid.ToString();
                    updatesales(saleid.ToString(), saletype,gsttype);
                    Thread salethread;
                    //recalsale(saleid.ToString());

                    int count = tabControl1.TabCount;
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    string type = printtype();
                    try
                    {
                        foreach (var control in controls)
                        {
                            if (control is DataGridView)
                            {
                                dtcopy = new DataTable();
                                DataGridView grid = control as DataGridView;
                                DataTable tbl = grid.DataSource as DataTable;
                                DataTable tblcopy = tbl;
                               


                                datatableprint = new DataTable();
                                datatableprint = tblcopy.Copy();

                                if (type == "opos")
                                {
                                    for (int i = 0; i < totalprints(); i++)
                                    {
                                        if (threading() == "yes")
                                        {
                                            if (isThreadRunningsalee == false)
                                            {
                                                salethreadnew = new Thread(() => PrintReceiptThreadingsale(tblcopy, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net.ToString(), otype));
                                                salethreadnew.IsBackground = true;
                                                salethreadnew.Start();
                                            }
                                        }
                                        else
                                        {
                                            PrintReceipt(tbl, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net.ToString(), otype,invoiceno);
                                        }
                                    }
                                }
                                else if (type == "generic")
                                {
                                    for (int i = 0; i < totalprints(); i++)
                                    {
                                        Print(printername("generic"), saleid.ToString(), cashr, cname, saletype, "", tbl, recvd, chng, total, txtdiscountamount.Text, gst, "", ordertype, date.ToString(),invoiceno);

                                    }
                                }
                                else if (type == "rdlc")
                                {
                                    string path = Path.GetDirectoryName(Application.ExecutablePath);
                                    int print = 1;
                                    string printername = "";
                                    DataSet dsprint = new DataSet();
                                    string q = "select * from Printers where type='Receipt'";
                                    SqlDataReader dr = objCore.funGetDataReader1(q);

                                    try
                                    {
                                        if (dr.Read())
                                        {
                                            printername = dr["name"].ToString();
                                            string temp = dr["Prints"].ToString();
                                            if (temp == "")
                                            {
                                                temp = "1";
                                            }
                                            print = Convert.ToInt32(temp);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    getcompany();
                                    string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                                    string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                                    string svschrgs = txtservice.Text;
                                    string info = "";// getdeliveryinfo(saleid.ToString());
                                    if (ordertype == "Dine In")
                                    {
                                        string tblno = gettbleno(saleid.ToString());
                                        info = "Table No: " + tblno;
                                    }
                                    else if (ordertype == "Take Away")
                                    {
                                        string cusid = getcustomerid(saleid.ToString());
                                        info = "Customer Id: " + cusid;
                                    }
                                    else
                                    {

                                        info = getdeliveryinfo(saleid.ToString());
                                    }
                                    if (pointsurl == "")
                                    {
                                        try
                                        {
                                            string value;
                                            value = CacheClass.Cache["pointsurl"] as string;
                                            if (null == value)
                                            {

                                            }
                                            else
                                            {
                                                pointsurl = value;
                                            }
                                        }
                                        catch (Exception ex)
                                        {


                                        }
                                    }
                                    salethread = new Thread(() => PrintClass.Printt(path, datatableprint, saletype, sid1.ToString(), "", ordertype, total1, nettotal1, discount1, gstperc, (Convert.ToDouble(recvd) + advance).ToString(), chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs, cashr1, date1, "", this, qrcode, pointsurl, invoiceno, "Sale Slip"));
                                    salethread.IsBackground = true;
                                    salethread.Start();
                                    opendrawer1();
                                }
                                else
                                {
                                    getcompany();
                                    int print = 1;
                                    string printername = "";
                                    DataSet dsprint = new DataSet();
                                    string q = "select * from Printers where type='Receipt'";
                                    SqlDataReader dr = objCore.funGetDataReader1(q);

                                    try
                                    {
                                        if (dr.Read())
                                        {
                                            printername = dr["name"].ToString();
                                            string temp = dr["Prints"].ToString();
                                            if (temp == "")
                                            {
                                                temp = "1";
                                            }
                                            print = Convert.ToInt32(temp);
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                    }
                                    string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                                    string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                                    string svschrgs = txtservice.Text;
                                    string info = getdeliveryinfo(saleid.ToString());

                                    //bg2.DoWork += new DoWorkEventHandler(myBGWorker_DoWork);                                    
                                    //bg2.WorkerReportsProgress = true;
                                    //bg2.WorkerSupportsCancellation = true;
                                    //bg2.RunWorkerAsync();



                                    salethread = new Thread(() => bindreport(tblcopy, saletype1, sid1.ToString(), "", ordertype, total1, nettotal1, discount1, gst1, recvd, chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs));
                                    salethread.IsBackground = true;
                                    salethread.Start();
                                }
                                tbl.Clear();

                                #region MyRegion
                                //if (tabControl1.SelectedIndex.ToString()== "0")
                                //{
                                //    dtcopy = dt.Clone();

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }                                
                                //    }

                                //    dt.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "1")
                                //{
                                //    dtcopy = new DataTable();


                                //    if (type == "opos")
                                //    {
                                //        for (int i = 0; i < totalprints(); i++)
                                //        {
                                //            PrintReceipt(dt2, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //        }
                                //    }
                                //    else
                                //    {
                                //        bindreport(dt2, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //    }


                                //    dtcopy = dt2.Copy();
                                //    dt2.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "2")
                                //{
                                //    dtcopy = new DataTable();


                                //    if (type == "opos")
                                //    {
                                //        for (int i = 0; i < totalprints(); i++)
                                //        {
                                //            PrintReceipt(dt3, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //        }
                                //    }
                                //    else
                                //    {
                                //        bindreport(dt3, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //    }



                                //    dtcopy = dt3.Copy();
                                //    dt3.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "3")
                                //{
                                //    dtcopy = new DataTable();

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt4, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt4, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = dt4.Copy();
                                //    dt4.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "4")
                                //{
                                //    dtcopy = new DataTable();

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt5, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt5, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = dt5.Copy();
                                //    dt5.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "5")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt6, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt6, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt6.Copy();
                                //    dt6.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "6")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt7, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt7, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt7.Copy();
                                //    dt7.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "7")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt8, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt8, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt8.Copy();
                                //    dt8.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "8")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt9, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt9, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt9.Copy();
                                //    dt9.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "9")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt10, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt10, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt10.Copy();
                                //    dt10.Clear();
                                //    grid.Refresh();
                                //}

                                //if (tabControl1.SelectedIndex.ToString() == "10")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt11, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt11, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt11.Copy();
                                //    dt11.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "11")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt12, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt12, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt12.Copy();
                                //    dt12.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "12")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt13, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt13, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt13.Copy();
                                //    dt13.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "13")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt14, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt14, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt14.Copy();
                                //    dt14.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "14")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt15, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt15, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt15.Copy();
                                //    dt15.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "15")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt16, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt16, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt16.Copy();
                                //    dt16.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "16")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt17, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt17, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt17.Copy();
                                //    dt17.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "17")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt18, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt18, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt18.Copy();
                                //    dt18.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "18")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt19, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt19, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt19.Copy();
                                //    dt19.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "19")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt20, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt20, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt20.Copy();
                                //    dt20.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "20")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt21, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt21, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt21.Copy();
                                //    dt21.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "21")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt22, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt22, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt22.Copy();
                                //    dt22.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "22")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt23, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt23, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt23.Copy();
                                //    dt23.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "23")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt24, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt24, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt24.Copy();
                                //    dt24.Clear();
                                //    grid.Refresh();
                                //}
                                //if (tabControl1.SelectedIndex.ToString() == "24")
                                //{

                                //    {
                                //        if (type == "opos")
                                //        {
                                //            for (int i = 0; i < totalprints(); i++)
                                //            {
                                //                PrintReceipt(dt25, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                                //            }
                                //        }
                                //        else
                                //        {
                                //            bindreport(dt25, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                                //        }

                                //    }

                                //    dtcopy = new DataTable();
                                //    dtcopy = dt25.Copy();
                                //    dt25.Clear();
                                //    grid.Refresh();
                                //} 
                                #endregion
                            }
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                    //getorders("new");
                    try
                    {
                        int indx = tabControl1.SelectedIndex;
                        tabsarraysaleid[indx] = "0";

                    }
                    catch (Exception ex)
                    {


                    }
                    try
                    {

                        int indx = tabControl1.SelectedIndex;
                        tabsarray[indx] = "0";

                    }
                    catch (Exception ex)
                    {


                    }
                    try
                    {
                        //for (int i = tabControl1.SelectedIndex; i < tabsarraysaleid.Length; i++)
                        //{
                        //    if ((i + 1) < tabsarraysaleid.Length)
                        //    {
                        //        tabsarraysaleid[i] = tabsarraysaleid[i + 1];
                        //    }
                        //}
                    }
                    catch (Exception ex)
                    {

                    }
                    sid1 = saleid.ToString();
                    saleid = 0;
                    try
                    {

                        if (tabControl1.TabCount > 1)
                        {
                            tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                        }
                        else
                        {
                            tabControl1.SelectedTab.Text = "";
                            tabControl1.SelectedTab.Name = "tab";
                        }
                    }
                    catch (Exception ex)
                    {
                    }

                    System.GC.Collect();
                    clear();
                    // bindreport(saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);//skipped for threading
                    //SaleMessage obj = new SaleMessage(this);
                    //obj.Islbltotal = txtnettotal.Text;
                    ////obj.Islblreceived = txtcashrecvd.Text;
                    ////obj.Islblchange = txtchange.Text;
                    //obj.Show();
                    //if (lblordertype.Text != "Din In")
                    //string custid = getcustomerid(saleid.ToString());
                    //{

                    //    //System.Threading.Thread kotThread = new System.Threading.Thread(() => bindreportkitchen(saleid.ToString(), "", ordertype, custid));

                    //    //kotThread.Start();
                    //    bindreportkitchen(saleid.ToString(), "", ordertype, custid);
                    //}
                    if (tablettableno != "")
                    {
                        updatetabletorder();
                        tablettableno = "";
                    }
                    try
                    {
                        obcustomerdisplay.clear();
                    }
                    catch (Exception ex)
                    {
                    }
                    newordertype = "";
                    editsale = string.Empty;
                }
            }
            catch (Exception ex)
            {

               // MessageBox.Show(ex.Message);
            }

            getorders("new");
            tabControl1.TabPages.Clear();
            int countt = tabControl1.TabCount;
            if (countt < 25)
            {
                saleid = 0;

                newordertype = "";
                neworder(countt.ToString());
            }
        }

        public string getphone()
        {
            string phone = "";
            DataSet dsphone = new DataSet();
            try
            {
                string q = "select phone from sale where id='" + saleid + "'";

                dsphone = objCore.funGetDataSet(q);
                if (dsphone.Tables[0].Rows.Count > 0)
                {
                    phone = dsphone.Tables[0].Rows[0][0].ToString();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                //dstype.Dispose();
            }
            return phone;

        }
        private void vButton1_Click(object sender, EventArgs e)
        {
            if (shiftid == "0" || shiftid == "")
            {
                MessageBox.Show("Please Start Shift");
                return;
            }
            this.TopMost = false;
            //TopMost = false;
            gettotal();
            try
            {
                if (tabControl1.SelectedTab.Name == "Previous")
                {
                    return;
                }
                if (saleid <= 0)
                {
                    MessageBox.Show("Please Cash Tender this bill");
                    return;
                }
                else
                {
                    DataSet dsbill = new DataSet();
                    try
                    {
                        string q = "select BillStatus from sale where id='" + saleid + "' and billstatus='Paid'";

                        dsbill = objCore.funGetDataSet(q);
                        if (dsbill.Tables[0].Rows.Count > 0)
                        {

                            if (tabControl1.TabCount > 1)
                            {
                                saleid = 0;
                                tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                            }
                            else
                            {
                                TabPage page1 = tabControl1.SelectedTab;
                                var controls1 = page1.Controls;
                                foreach (var control in controls1)
                                {
                                    if (control is DataGridView)
                                    {
                                        tabControl1.SelectedTab.Name = "";
                                        tabControl1.SelectedTab.Text = "";
                                        DataGridView grid = control as DataGridView;
                                        DataTable tbl = grid.DataSource as DataTable;
                                        tbl.Clear();
                                        saleid = 0;
                                    }
                                };
                            }
                            return;
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                    finally
                    {
                        dsbill.Dispose();
                    }
                }
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            //POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
                            //obj.total = txtnettotal.Text;
                            //obj.Show();
                            //string q = "delete from billtype where saleid='"+saleid+"'";
                            //objCore.executeQuery(q);
                            //if (getselectordertype().ToLower() == "yes")
                            //{
                            //    NewBillType obj = new Sale.NewBillType(this);
                            //    obj.total = txtnettotal.Text;
                            //    obj.saleid = saleid.ToString();
                            //    obj.advance = txtadvanc.Text;
                            //    obj.name = tabControl1.SelectedTab.Text;
                            //    obj.Show();
                            //}
                            //else
                            {
                                Sale.SaleAfter obj = new Sale.SaleAfter(this);
                                obj.total = txtnettotal.Text;
                                obj.id = saleid.ToString();
                                obj.advance = txtadvanc.Text;
                                obj.name = tabControl1.SelectedTab.Text;
                                obj.type = getordertype();
                                obj.phone = getphone();
                                obj.Show();
                            }

                        }
                        else
                        {
                            return;
                        }

                    }
                }
            }
            catch (Exception ex)
            {


            }
        }
        public string printername(string type)
        {
            string name = "";
            string temp = "";
            if (type.ToLower() == "tablet")
            {
                temp = "tablet";
            }
            else if (type == "kitchen")
            {
                temp = "kitchen";
            }
            else if (type == "generic")
            {
                temp = "generic";
            }
            else if (type == "kds")
            {
                temp = "kds";
            }
            else
            {
                temp = "opos";
            }
            string q = "";
            DataSet ds = new DataSet();
            try
            {
                try
                {
                    q = "select * from printers where type='" + temp + "' and terminal='" + System.Environment.MachineName + "'";
                    ds = objCore.funGetDataSet(q);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        name = ds.Tables[0].Rows[0]["name"].ToString();
                    }
                }
                catch (Exception ex)
                {


                }
                if (name == "")
                {
                    q = "select * from printers where type='" + temp + "'";
                    ds = new DataSet();
                    ds = objCore.funGetDataSet(q);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        name = ds.Tables[0].Rows[0]["name"].ToString();
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
            return name;
        }
        public string cashdrawername()
        {
            string name = "";

            DataSet ds = new DataSet();
            try
            {
                string q = "select * from printers where type='Cash Drawer'";
                ds = objCore.funGetDataSet(q);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    name = ds.Tables[0].Rows[0]["name"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds.Dispose();
            }
            return name;
        }
        public string printtype()
        {
            string type = "";

            DataSet ds1 = new DataSet();
            try
            {
                string q = "select * from printtype where terminal='" + System.Environment.MachineName + "' and printer is null or terminal='" + System.Environment.MachineName + "' and printer='receipt'";
                ds1 = objCore.funGetDataSet(q);
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    type = ds1.Tables[0].Rows[0]["type"].ToString();
                }
                if (type == "")
                {
                    ds1 = new DataSet();
                    q = "select * from printtype where  printer is null or printer='receipt'";
                    ds1 = objCore.funGetDataSet(q);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        type = ds1.Tables[0].Rows[0]["type"].ToString().ToLower();
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                ds1.Dispose();
            }
            return type;
        }
        public string cardid = "";
        public string printtypekds()
        {
            string type = "";


            try
            {
                string q = "select * from printtype where printer='kitchen'";
                SqlDataReader dr = objCore.funGetDataReader1(q);
                if (dr.Read())
                {
                    type = dr["type"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {

            }
            return type;
        }
        public string getinvoiceno()
        {
            string inv = "1";
            try
            {
                string q = "select max(invoice) as invoice from sale where terminal='" + System.Environment.MachineName + "' and TerminalOrder='" + System.Environment.MachineName + "'";
                q = "select max(invoice) as invoice from sale";// where terminal='" + System.Environment.MachineName + "' and TerminalOrder='" + System.Environment.MachineName + "'";
              
                DataSet dsinvoice = new DataSet();
                dsinvoice = objCore.funGetDataSet(q);
                if (dsinvoice.Tables[0].Rows.Count > 0)
                {
                    string temp = dsinvoice.Tables[0].Rows[0][0].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    inv = (Convert.ToDouble(temp) + 1).ToString();

                }
            }
            catch (Exception ex)
            {


            }
            return inv;
        }
        public string getinvoicenopaid(string sid)
        {
            string inv = "1";
            try
            {
                string q = "select (invoice) as invoice from sale where id='" + sid + "'";
                DataSet dsinvoice = new DataSet();
                dsinvoice = objCore.funGetDataSet(q);
                if (dsinvoice.Tables[0].Rows.Count > 0)
                {
                    string temp = dsinvoice.Tables[0].Rows[0][0].ToString();
                    if (temp == "")
                    {
                        temp = "0";
                    }
                    inv = (Convert.ToDouble(temp)).ToString();

                }
            }
            catch (Exception ex)
            {


            }
            return inv;
        }
        public void updatesales(string saleid, string billtype, string gsttype)
        {
            if (branchid == "")
            {
                getbranchid();
            }
            try
            {
                if (discountdetailsid == "")
                {
                    discountdetailsid = "0";
                }
                if (Convert.ToInt32(discountdetailsid) > 0)
                {
                    string q = "update DiscountDetails set saleid='" + saleid + "' where id='" + discountdetailsid + "'";
                    objCore.executeQuery(q);
                    discountdetailsid = "0";
                }
            }
            catch (Exception ex)
            {


            }
            DataSet dsgst = new DataSet();
            try
            {
                dsgst = new DataSet();
                dsgst = objCore.funGetDataSet("select top(1) * from ShiftStart where date='" + date + "' and status='Open' and Terminal='" + System.Environment.MachineName.ToString() + "'  order by id desc");
                if (dsgst.Tables[0].Rows.Count > 0)
                {
                    shiftid = dsgst.Tables[0].Rows[0]["shiftid"].ToString();

                }
            }
            catch (Exception ex)
            {

                // MessageBox.Show(ex.Message);
            }
            finally
            {
                dsgst.Dispose();
            }
            string servc = "0";
            servc = txtservice.Text;
            if (servc == "")
            {
                servc = "0";
            }
            try
            {
                discountamount = txtdiscountamount.Text;
                if (discountamount == "")
                {
                    discountamount = "0";
                }
                try
                {
                    if (Convert.ToDouble(discountamount) > 0)
                    {
                        if (loyality == true)
                        {
                            string q = "delete from  LoyalityCardsales where saleid ='" + saleid + "'";
                            objCore.executeQuery(q);
                            q = "insert into LoyalityCardsales (saleid, cardid) values ('" + saleid + "','" + cardid + "')";
                            objCore.executeQuery(q);
                        }
                    }
                }
                catch (Exception ex)
                {


                }
                updatedetails(saleid.ToString());
                if (billtype == "previous")
                {
                    double total = 0;
                    string net = "0", advance = "0";
                    advance = txtadvanc.Text;
                    net = txtnettotal.Text;
                    if (net == "")
                    {
                        net = "0";
                    }
                    if (advance == "")
                    {
                        advance = "0";
                    }
                    try
                    {
                        total = Convert.ToDouble(net) + Convert.ToDouble(advance);
                    }
                    catch (Exception ex)
                    {


                    }
                    string q = "update sale set branchid='"+branchid+"', OrderStatus='Completed',Terminal='" + System.Environment.MachineName.ToString() + "',GSTtype='" + gsttype + "',GST='" + lblgst.Text + "',gstperc='" + gstperc + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + total.ToString().Trim() + "',servicecharges='" + servc + "'  where id='" + saleid + "'";
                    objCore.executeQuery(q);
                    updatebilltype(saleid.ToString(), total.ToString().Trim());
                }
                else
                {
                    //if (txtdiscount.Text == "100")
                    //{

                    //    string q = "update sale1 set OrderStatus='Completed', BillType='" + billtype + "',GST='" + lblgst.Text + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + txtnettotal.Text.Trim() + "',servicecharges='" + servc + "' ,BillStatus='Paid' where id='" + saleid + "'";
                    //    objCore.executeQuery(q);
                    //    q = "update sale set OrderStatus='Completed',BillType='" + billtype + "',GST='" + lblgst.Text + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + txtnettotal.Text.Trim() + "',Terminal='" + System.Environment.MachineName.ToString() + "' ,BillStatus='Paid',servicecharges='" + txtservice.Text + "' where id='" + saleid + "'";
                    //    objCore.executeQuery(q);
                    //}
                    //else
                    {
                        double total = 0;
                        string net = "0", advance = "0";
                        advance = txtadvanc.Text;
                        net = txtnettotal.Text;
                        if (net == "")
                        {
                            net = "0";
                        }
                        if (advance == "")
                        {
                            advance = "0";
                        }
                        try
                        {
                            total = Convert.ToDouble(net) + Convert.ToDouble(advance);
                        }
                        catch (Exception ex)
                        {


                        }
                        Random rnd=new Random();
                        string token = "";
                        for (int i = 0; i < 9; i++)
                        {
                            token = token + rnd.Next(1, 9);
                        }
                        //shiftid = textBox2.Text;
                        string q = "update sale set Token='" + token + "',branchid='" + branchid + "',Shiftid='" + shiftid + "',GSTtype='" + gsttype + "', Terminal='" + System.Environment.MachineName.ToString() + "', OrderStatus='Completed', BillType='" + billtype + "',GST='" + lblgst.Text + "',GSTPerc='" + gstperc + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + total.ToString().Trim() + "' ,BillStatus='Paid',servicecharges='" + servc + "' where id='" + saleid + "'";
                        objCore.executeQuery(q);
                        discountid = "0";
                        try
                        {
                            q = "delete from  VoucherTrack where saleid ='" + saleid + "'";
                            objCore.executeQuery(q);
                            if (voucheramount > 0)
                            {
                                q = "insert into VoucherTrack (saleid, VoucherId,amount) values ('" + saleid + "','" + voucherid + "','" + txtdiscountamount.Text + "')";
                                objCore.executeQuery(q);
                                voucherid = "0";
                                voucheramount = 0;
                            }
                        }
                        catch (Exception ex)
                        {


                        }
                        //updatebilltype(saleid.ToString(), total.ToString().Trim());
                    }
                }
                editsale = string.Empty;

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            string qr = "delete from advancecash where saleid='" + saleid + "'";
            objCore.executeQuery(qr);
        }
        public void updatesalesDS(string saleid, string billtype, string gsttype)
        {
            if (branchid == "")
            {
                getbranchid();
            }

            DataSet dsgst = new DataSet();
            try
            {
                dsgst = new DataSet();
                dsgst = objCore.funGetDataSet("select top(1) * from ShiftStart where date='" + date + "' and status='Open' and Terminal='" + System.Environment.MachineName.ToString() + "'  order by id desc");
                if (dsgst.Tables[0].Rows.Count > 0)
                {
                    shiftid = dsgst.Tables[0].Rows[0]["shiftid"].ToString();

                }
            }
            catch (Exception ex)
            {

                // MessageBox.Show(ex.Message);
            }
            finally
            {
                dsgst.Dispose();
            }
            string servc = "0";
            servc = txtservice.Text;
            if (servc == "")
            {
                servc = "0";
            }
            try
            {
                double total = 0;
                string net = "0", advance = "0";
                advance = txtadvanc.Text;
                net = txtnettotal.Text;
                if (net == "")
                {
                    net = "0";
                }
                if (advance == "")
                {
                    advance = "0";
                }
                try
                {
                    total = Convert.ToDouble(net) + Convert.ToDouble(advance);
                }
                catch (Exception ex)
                {


                }
                Random rnd = new Random();
                string token = "";
                for (int i = 0; i < 9; i++)
                {
                    token = token + rnd.Next(1, 9);
                }
                //shiftid = textBox2.Text;
                string q = "update DSsale set Token='" + token + "',branchid='" + branchid + "',Shiftid='" + shiftid + "',GSTtype='" + gsttype + "', Terminal='" + System.Environment.MachineName.ToString() + "', OrderStatus='Completed', BillType='" + billtype + "',GST='" + lblgst.Text + "',GSTPerc='" + gstperc + "', TotalBill='" + txttotal.Text.Trim() + "',Discount='" + txtdiscount.Text.Trim() + "',DiscountAmount='" + discountamount + "',NetBill='" + total.ToString().Trim() + "' ,BillStatus='Paid',servicecharges='" + servc + "' where id='" + saleid + "'";
                objCore.executeQuery(q);
                discountid = "0";

                editsale = string.Empty;

            }
            catch (Exception ex)
            {

               
            }
           
        }
        public string discountid = "0", voucherid = "0";
        public float voucheramount = 0;
        protected void updatedetails(string id)
        {
            //string q = "select * from DiscountIndividual where Saleid='"+id+"'";
            //DataSet dsq = new DataSet();
            //dsq = objCore.funGetDataSet(q);
            //for (int i = 0; i < dsq.Tables[0].Rows.Count; i++)
            //{
            //    q = "select Itemdiscount from saledetails where id='" + dsq.Tables[0].Rows[i]["Saledetailsid"].ToString() + "'";
            //    DataSet dsdet = new DataSet();
            //    dsdet = objCore.funGetDataSet(q);
            //    if (dsdet.Tables[0].Rows.Count > 0)
            //    {
            //        string temp = dsdet.Tables[0].Rows[0][0].ToString();
            //        if (temp == "")
            //        {
            //            temp = "0";
            //        }
            //        double dided = Convert.ToDouble(temp);
            //        temp = dsq.Tables[0].Rows[i]["Discount"].ToString();
            //        if (temp == "")
            //        {
            //            temp = "0";
            //        }
            //        dided = dided + Convert.ToDouble(temp);
            //        q = "update saledetails set Itemdiscount='" + dided + "' where id='" + dsq.Tables[0].Rows[i]["Saledetailsid"].ToString() + "'";
            //        objCore.executeQuery(q);
            //    }

            //}
        }
        public void updatebilltype(string id, string total)
        {
            DataSet dstyp = new DataSet();
            try
            {
                string q = "select * from billtype where saleid='" + id + "'";

                dstyp = objCore.funGetDataSet(q);
                if (dstyp.Tables[0].Rows.Count > 0)
                {
                    if (dstyp.Tables[0].Rows.Count > 1)
                    {
                        double cash = 0, visaa = 0; string sid = "";
                        for (int i = 0; i < dstyp.Tables[0].Rows.Count; i++)
                        {
                            if (dstyp.Tables[0].Rows[i]["type"].ToString() == "Cash")
                            {
                                string temp = dstyp.Tables[0].Rows[i]["amount"].ToString();
                                sid = dstyp.Tables[0].Rows[i]["id"].ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                cash = Convert.ToDouble(temp);
                            }
                            else
                            {
                                string temp = dstyp.Tables[0].Rows[i]["amount"].ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                visaa = Convert.ToDouble(temp);
                            }
                        }
                        double rem = (cash + visaa) - Convert.ToDouble(total);
                        cash = cash - rem;
                        q = "update billtype set amount='" + cash + "' where id='" + sid + "'";
                        objCore.executeQuery(q);
                    }
                    else
                    {
                        q = "update billtype set amount='" + total + "' where saleid='" + id + "'";
                        objCore.executeQuery(q);
                    }
                }
            }
            catch (Exception ex)
            {
            }
            finally
            {
                dstyp.Dispose();
            }
        }
        private void vButton2_Click(object sender, EventArgs e)
        {
            CardPayment obj = new CardPayment(this);
            obj.type = "Credit Card";
            obj.Show();
        }
        public void creditcardsale(string cardno)
        {
            try
            {
                if (dataGridView1.Rows.Count <= 0)
                {
                    return;
                }
                //if (editsale == string.Empty && vBtnkot.Enabled == true)
                //{
                //    MessageBox.Show("Please Print KOT first");
                //    return;
                //}
                //if (txtcashrecvd.Text == string.Empty || txtcashrecvd.Text == "0")
                //{
                //    try
                //    {
                //        txtcashrecvd.Text = txtnettotal.Text;
                //        txtchange.Text = "0";
                //    }
                //    catch (Exception ex)
                //    {


                //    }
                //}
                //if (lblordertype.Text == "Din In" && vBtnkot.Enabled == true)
                //{
                //    string type = dataGridView1.Rows[0].Cells["SaleType"].Value.ToString();
                //    if (type.ToLower() == "new")
                //    {
                //        MessageBox.Show("Please Send to KDS first");
                //        return;
                //    }

                //}
                dtcopy = new DataTable();
                dtcopy = dt.Copy();
                string ordertype = "Order Type";
                string total = txttotal.Text.Trim();
                string nettotal = txtnettotal.Text.Trim();
                string discount = txtdiscount.Text.Trim();
                string gst = lblgst.Text.Trim();
                sale("", "Order Type", "");
                //if (vBtnkot.Enabled == false)
                {
                    //if (lblordertype.Text == "Delivery")
                    //{
                    //    //sale("", lblordertype.Text);
                    //    updatedelivery(saleid);
                    //   // recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Car Hope")
                    //{
                    //    //sale("", lblordertype.Text);
                    //    updatecarhope(saleid);
                    //    //recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Take Away")
                    //{
                    //   // sale("", lblordertype.Text);

                    //    updatetakeaway(saleid);
                    //    //recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Din In")
                    //{
                    //    //sale("", lblordertype.Text);

                    //    updateDinin(saleid);
                    //}

                }
                //System.Threading.Thread thdupdatesales = new System.Threading.Thread(() => updatesales(saleid.ToString(), "Credit Card"));
                //thdupdatesales.IsBackground = true;
                //thdupdatesales.Start();
                string gsttype = "";
                try
                {
                    if (rdcard.Checked == true)
                    {
                        
                        gsttype = "Card";
                    }
                    else
                    {
                       
                        gsttype = "Cash";
                    }

                }
                catch (Exception ex)
                {


                }
                updatesales(saleid.ToString(), "Credit Card",gsttype);

                //System.Threading.Thread thdbilltype = new System.Threading.Thread(() => billtype(saleid.ToString(), "Credit Card", txtnettotal.Text.Trim()));
                //thdbilltype.IsBackground = true;
                //thdbilltype.Start();
                billtype(saleid.ToString(), "Credit Card", txtnettotal.Text.Trim(), "0");


                //System.Threading.Thread thdbinreport = new System.Threading.Thread(() => bindreport("Credit Card", saleid.ToString(), "", lblordertype.Text, txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text));
                //thdbinreport.IsBackground = true;
                //thdbinreport.Start();
                //updatesales(saleid.ToString(), "Credit Card");  //skipped for threading
                //billtype(saleid.ToString(), "Credit Card", txtnettotal.Text.Trim()); //skipped for threading
                ////recalsale(saleid.ToString());
                //bindreport("Credit Card", saleid.ToString(), "", lblordertype.Text, txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text);
                System.GC.Collect();
                //bindreport("Credit Card", saleid.ToString(), "", ordertype, total, nettotal, discount, gst);
                string custid = getcustomerid(saleid.ToString());
                //  if (lblordertype.Text != "Din In")
                {

                    //System.Threading.Thread kotThread = new System.Threading.Thread(() => bindreportkitchen(saleid.ToString(), "",lblordertype.Text,custid));
                    //// Start the thread
                    //kotThread.Start();
                    bindreportkitchen(saleid.ToString(), "", "Order Type", custid);
                }
                if (tablettableno != "")
                {
                    updatetabletorder();
                    tablettableno = "";
                }
                SaleMessage obj = new SaleMessage(this);
                obj.Islbltotal = txtnettotal.Text;
                //obj.Islblreceived = txtcashrecvd.Text;
                //obj.Islblchange = txtchange.Text;
                obj.Show();
                //lblordertype.Text = "Not Selected";
                dt.Rows.Clear();
                dataGridView1.Refresh();
                clear();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                editsale = string.Empty;

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void vButton3_Click(object sender, EventArgs e)
        {
            CardPayment obj = new CardPayment(this);
            obj.type = "Master Card";
            obj.Show();
        }
        public void mastercardsale(string cardno)
        {
            try
            {
                if (dataGridView1.Rows.Count <= 0)
                {
                    return;
                }

                //if (editsale == string.Empty && vBtnkot.Enabled == true)
                //{
                //    MessageBox.Show("Please Print KOT first");
                //    return;
                //}
                //if (txtcashrecvd.Text == string.Empty || txtcashrecvd.Text == "0")
                //{
                //    txtcashrecvd.Text = txtnettotal.Text;
                //    txtchange.Text = "0";
                //}
                //if (lblordertype.Text == "Din In" && vBtnkot.Enabled == true)
                //{
                //    string type = dataGridView1.Rows[0].Cells["SaleType"].Value.ToString();
                //    if (type.ToLower() == "new")
                //    {
                //        MessageBox.Show("Please Send to KDS first");
                //        return;
                //    }

                //}
                string ordertype = "Order Type";
                string total = txttotal.Text.Trim();
                string nettotal = txtnettotal.Text.Trim();
                string discount = txtdiscount.Text.Trim();
                string gst = lblgst.Text.Trim();
                dtcopy = new DataTable();
                dtcopy = dt.Copy();
                sale("", "Order Type", "");
                //if (vBtnkot.Enabled == false)
                {
                    //if ("Order Type" == "Delivery")
                    //{
                    //   // sale("", lblordertype.Text);
                    //    updatedelivery(saleid);
                    //   // recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Car Hope")
                    //{
                    //    //sale("", lblordertype.Text);
                    //    updatecarhope(saleid);
                    //    //recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Take Away")
                    //{
                    //    //sale("", lblordertype.Text);

                    //    updatetakeaway(saleid);
                    //  //  recalsale(saleid.ToString());
                    //}
                    //if (lblordertype.Text == "Din In")
                    //{
                    //    //sale("", lblordertype.Text);

                    //    updateDinin(saleid);
                    //   // recalsale(saleid.ToString());
                    //}

                }

                //System.Threading.Thread thdupdatesales = new System.Threading.Thread(() => updatesales(saleid.ToString(), "Master Card"));
                //thdupdatesales.IsBackground = true;
                //thdupdatesales.Start();
                string gsttype = "";
                try
                {
                    if (rdcard.Checked == true)
                    {
                       
                        gsttype = "Card";
                    }
                    else
                    {
                      
                        gsttype = "Cash";
                    }

                }
                catch (Exception ex)
                {


                }
                updatesales(saleid.ToString(), "Master Card", gsttype);

                //System.Threading.Thread thdbilltype = new System.Threading.Thread(() => billtype(saleid.ToString(), "Master Card", txtnettotal.Text.Trim()));
                //thdbilltype.IsBackground = true;
                //thdbilltype.Start();
                billtype(saleid.ToString(), "Master Card", txtnettotal.Text.Trim(), "0");


                //System.Threading.Thread thdbinreport = new System.Threading.Thread(() => bindreport("Master Card", saleid.ToString(), "", lblordertype.Text, txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text));
                //thdbinreport.IsBackground = true;
                //thdbinreport.Start();
                System.GC.Collect();
                //bindreport("Master Card", saleid.ToString(), "", ordertype, total, nettotal, discount, gst);
                //updatesales(saleid.ToString(), "Master Card");
                //billtype(saleid.ToString(), "Master Card", txtnettotal.Text.Trim());
                //// recalsale(saleid.ToString());
                //bindreport("Master Card", saleid.ToString(),cardno);
                string custid = getcustomerid(saleid.ToString());
                // if (lblordertype.Text != "Din In")
                {

                    //System.Threading.Thread kotThread = new System.Threading.Thread(() => bindreportkitchen(saleid.ToString(), "", lblordertype.Text, takeawayid));
                    //// Start the thread
                    //kotThread.Start();
                    bindreportkitchen(saleid.ToString(), "", "Order Type", custid);
                }
                if (tablettableno != "")
                {
                    updatetabletorder();
                    tablettableno = "";
                }
                SaleMessage obj = new SaleMessage(this);
                obj.Islbltotal = txtnettotal.Text;
                //obj.Islblreceived = txtcashrecvd.Text;
                //obj.Islblchange = txtchange.Text;
                //obj.Show();
                //lblordertype.Text = "Not Selected";
                dt.Rows.Clear();
                dataGridView1.Refresh();
                clear();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                editsale = string.Empty;

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void vButton5_Click(object sender, EventArgs e)
        {
            this.TopMost = false;
            // RestAllowDiscount ob = new RestAllowDiscount(this);
            DuplicaeBill ob = new DuplicaeBill(this);
            ob.id = userid;
            ob.date = date;
            //ob.editmode = "Duplicate";


            //this.Enabled = false;
            ob.Show();
        }
        public void voidall(string ssaleid)
        {
            try
            {
                string q = "update Saledetails set status='Void' where saleid='" + ssaleid + "'";
                objCore.executeQuery(q);
                //bindreportvoid("", ssaleid);
                bindreportvoid("", saleid.ToString(), "", "Order Type", txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text);
                recalsale(ssaleid, "yes");

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            //saleid = 0;
        }
        public void Waste(string ssaleid)
        {
            try
            {
                string q = "update Saledetails set status='Waste' where saleid='" + ssaleid + "'";
                objCore.executeQuery(q);
                //bindreportwaste("", ssaleid);
                bindreportwaste("", saleid.ToString(), "", "Order Type", txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text);
                //recalsale(ssaleid);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
            //saleid = 0;
        }
        public void voidone(string menuitemid, string saleid)
        {
            try
            {
                string q = "update Saledetails set status='Void' where MenuItemId='" + menuitemid + "' and saleid='" + saleid + "'";
                objCore.executeQuery(q);
                recalsale(saleid, "yes");
                //DataSet dss = new DataSet();
                //dss = objCore.funGetDataSet("select * from Saledetails where id='" + saleDetailid + "'");
                //if (dss.Tables[0].Rows.Count > 0)
                //{
                //    recalsale(dss.Tables[0].Rows[0]["saleid"].ToString());
                //}
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void vButton6_Click(object sender, EventArgs e)
        {
            int count = tabControl1.TabCount;
            TabPage page = tabControl1.SelectedTab;
            var controls = page.Controls;
            foreach (var control in controls)
            {
                if (control is DataGridView)
                {
                    DataGridView grid = control as DataGridView;
                    DataTable tbl = grid.DataSource as DataTable;

                    if (tabControl1.SelectedTab.Name == "Previous")
                    {
                        tbl.Rows.Clear();
                    }
                    else
                    {
                        if (grid.Rows.Count >= 1)
                        {
                            neworder(count.ToString());
                        }
                    }

                }
            }
            //  if (count == 0)
            DataSet dsp = new DataSet();
            try
            {
                {
                    string id = "";
                    string q = "select top " + previousbillcount + "  id,Customer,BillType from sale where billstatus='Paid' and date='" + date + "' and Shiftid='" + shiftid + "' order by id desc";

                    dsp = objCore.funGetDataSet(q);
                    if (dsp.Tables[0].Rows.Count > 0)
                    {
                        if (dsp.Tables[0].Rows[dsp.Tables[0].Rows.Count - 1][2].ToString().ToLower().Contains("cash"))
                        {
                            rdcash.Checked = true;
                            rdcard.Checked = false;
                        }
                        else
                        {
                            rdcash.Checked = false;
                            rdcard.Checked = true;
                        }
                        id = dsp.Tables[0].Rows[dsp.Tables[0].Rows.Count - 1][0].ToString();
                        tabControl1.SelectedTab.Name = "Previous";
                        tabControl1.SelectedTab.Text = "PR-" + dsp.Tables[0].Rows[dsp.Tables[0].Rows.Count - 1][1].ToString();
                        recalsaleprevious(id, "no");
                        //recalsale(id, "no");
                        previousbillcount++;
                    }
                    q = "select (id) from sale where  billstatus='Paid' and date='" + date + "' and Shiftid='" + shiftid + "' ";
                    DataSet dscount = new DataSet();
                    dscount = objCore.funGetDataSet(q);
                    if (dscount.Tables[0].Rows.Count > 0)
                    {
                        if (previousbillcount > dscount.Tables[0].Rows.Count)
                        {
                            previousbillcount = 1;
                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsp.Dispose();
            }

            gettotal();
        }
        int previousbillcount = 1;
        private void timer2_Tick(object sender, EventArgs e)
        {

        }
        public void neworder(string custmername)
        {
            int count = tabControl1.TabCount;
            //if (count == 1 && dataGridView1.Rows.Count == 0)
            //{
            //    TabPage tabPage = tabControl1.SelectedTab;
            //    tabPage.Text = custmername;
            //    DataTable dttab = new DataTable();
            //    dttab.Columns.Add("Id", typeof(string));
            //    dttab.Columns.Add("MdId", typeof(string));
            //    dttab.Columns.Add("Qty", typeof(string));
            //    dttab.Columns.Add("Item", typeof(string));
            //    dttab.Columns.Add("Price", typeof(string));
            //    dttab.Columns.Add("SaleType", typeof(string));
            //    dttab.Columns.Add("SaleDetailid", typeof(string));
            //    dttab.Columns.Add("flavourid", typeof(string));
            //    dttab.Columns.Add("comments", typeof(string));
            //    dttab.Columns.Add("runtimeflavourid", typeof(string));
            //    dttab.Columns.Add("kdsid", typeof(string));

            //    TabPage page = tabControl1.SelectedTab;
            //    var controls = page.Controls;
            //    foreach (var control in controls)
            //    {
            //        if (control is DataGridView)
            //        {
            //            DataGridView grid = control as DataGridView;
            //            grid.DataSource = dttab;

            //            try
            //            {
            //                grid.Columns[0].Visible = false;
            //                grid.Columns[1].Visible = false;
            //                grid.Columns[5].Visible = false;
            //                grid.Columns[6].Visible = false;
            //                grid.Columns[7].Visible = false;
            //                grid.Columns[8].Visible = false;
            //                grid.Columns[9].Visible = false;
            //                grid.Columns[10].Visible = false;
            //            }
            //            catch (Exception ex)
            //            {


            //            }
            //        }
            //    }

            //}
            //else
            {
               // if (count < 25)
                {
                    DataTable dttab = new DataTable();
                    dttab.Columns.Add("Id", typeof(string));
                    dttab.Columns.Add("MdId", typeof(string));
                    dttab.Columns.Add("Qty", typeof(string));
                    dttab.Columns.Add("Item", typeof(string));
                    dttab.Columns.Add("Price", typeof(string));
                    dttab.Columns.Add("SaleType", typeof(string));
                    dttab.Columns.Add("SaleDetailid", typeof(string));
                    dttab.Columns.Add("flavourid", typeof(string));
                    dttab.Columns.Add("comments", typeof(string));
                    dttab.Columns.Add("runtimeflavourid", typeof(string));
                    dttab.Columns.Add("kdsid", typeof(string));

                    dttab.Columns.Add("extraid", typeof(string));
                    dttab.Columns.Add("atid", typeof(string));
                    dttab.Columns.Add("code", typeof(string));
                    TabPage tabPage = new TabPage();
                    tabPage.Text = "";
                    DataGridView grid = new DataGridView();
                    grid.ContextMenuStrip = contextMenuStrip1;
                    //grid.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
                    grid.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
                    grid.BackColor = System.Drawing.Color.White;
                    grid.AllowUserToAddRows = true;
                    grid.RowsDefaultCellStyle.ForeColor = Color.Green;
                    grid.RowsDefaultCellStyle.SelectionForeColor = Color.Red;
                    grid.RowsDefaultCellStyle.SelectionBackColor = Color.White;
                    using (Font font = new Font(grid.DefaultCellStyle.Font.FontFamily, 10, FontStyle.Bold))
                    {
                        grid.RowsDefaultCellStyle.Font = font;
                    }
                    Padding newPadding = new Padding(4, 4, 4, 4);
                    grid.RowsDefaultCellStyle.Padding = newPadding;
                    grid.CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal; ;
                    grid.Dock = DockStyle.Fill;
                    foreach (DataGridViewColumn dc in grid.Columns)
                    {
                        if (dc.Index.Equals(4) || dc.Index.Equals(2))
                        {
                            dc.ReadOnly = false;
                        }
                        else
                        {
                            dc.ReadOnly = true;
                        }
                    }
                    grid.DataSource = dttab;
                    tabPage.Controls.Add(grid);
                    tabControl1.Controls.Add(tabPage);
                    tabPage.Focus();
                    tabControl1.SelectedTab = tabPage;
                    try
                    {
                        grid.Columns[0].Visible = false;
                        grid.Columns[1].Visible = false;
                        grid.Columns[5].Visible = false;
                        grid.Columns[6].Visible = false;
                        grid.Columns[7].Visible = false;
                        grid.Columns[8].Visible = false;
                        grid.Columns[9].Visible = false;
                        grid.Columns[10].Visible = false;
                        grid.Columns[13].Visible = false;
                    }
                    catch (Exception ex)
                    {


                    }


                    foreach (DataGridViewColumn dc in grid.Columns)
                    {
                        if (dc.Index.Equals(4) || dc.Index.Equals(2))
                        {
                            dc.ReadOnly = false;
                        }
                        else
                        {
                            dc.ReadOnly = true;
                        }
                    }


                }
            }
            takeawayid = "";
            //txtcashrecvd.Text = "0";
            txttotal.Text = "0";
            txtnettotal.Text = "0";
            txtadvanc.Text = "";
            //txtchange.Text = "0";
            txtdiscount.Text = "0";
            txtdiscountamount.Text = "0";
            //dt.Clear();
            //dataGridView1.Refresh();
            editsale = string.Empty;
            try
            {
                obcustomerdisplay.clear();
            }
            catch (Exception ex)
            {


            }
            clear();
            discountcompaign();
        }
        public string newordertype = "";
        public string getselectordertype()
        {
            string type = "";
            DataSet dstype = new DataSet();
            try
            {
                string q = "select selecttype from selecttype";

                dstype = objCore.funGetDataSet(q);
                if (dstype.Tables[0].Rows.Count > 0)
                {
                    type = dstype.Tables[0].Rows[0]["selecttype"].ToString();
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dstype.Dispose();
            }
            return type;
        }
        public void callneworder()
        {
            redeemcode = "";
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                }
            }
            catch (Exception ex)
            {


            }
            voucheramount = 0;
            voucherid = "0";
            this.TopMost = false;

            try
            {
                previousbillcount = 1;
                if (daystatus == "Day Start")
                {
                    MessageBox.Show("Please Start Day First");
                    return;
                }

                int index = 0;
                getorders("new");
                tabControl1.TabPages.Clear();
                int count = tabControl1.TabCount;
                // if (count < 25)
                {
                    saleid = 0;

                    newordertype = "";
                    neworder(count.ToString());

                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }


        }
        private void vButton7_Click(object sender, EventArgs e)
        {
            callneworder();
        }
        public void updatedelivery(int salid)
        {
            try
            {
                string q = "update delivery set Saleid='" + salid + "' where id='" + deliveryid + "'";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void updatetakeaway(int salid)
        {
            try
            {
                string q = "update TakeAway set Saleid='" + salid + "' where id='" + takeawayid + "'";
                objCore.executeQuery(q);

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void updatecarhope(int salid)
        {
            try
            {
                string q = "update carhope set Saleid='" + salid + "' where id='" + carhopeid + "'";
                objCore.executeQuery(q);
                carhopeid = "";
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void updateDinin(int salid)
        {
            try
            {
                int id = 0;
                ds = new DataSet();
                ds = objCore.funGetDataSet("select id from DinInTables where saleid='" + salid + "'");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    return;
                }
                ds = new DataSet();
                ds = objCore.funGetDataSet("select max(id) as id from DinInTables");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string i = ds.Tables[0].Rows[0][0].ToString();
                    if (i == string.Empty)
                    {
                        i = "0";
                    }
                    id = Convert.ToInt32(i) + 1;
                }
                else
                {
                    id = 1;
                }


                string q = "insert into DinInTables (id,TableNo,Saleid,Date,time,Status,WaiterId) values('" + id + "','" + tableno + "','" + salid + "','" + date + "','" + DateTime.Now.ToShortTimeString() + "','Pending','" + waiterid + "')";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void vButton12_Click(object sender, EventArgs e)
        {

        }
        public static string kotprintername = ""; int kotprints = 1;
        DataSet dsprintmk = new DataSet();
        public void getmainkotdetails()
        {
            try
            {

                dsprintmk = new DataSet();
                objCore = new classes.Clsdbcon();
                string qr = "select * from Printers where type='Main KOT'";
                dsprintmk = objCore.funGetDataSet(qr);
                if (dsprintmk.Tables[0].Rows.Count > 0)
                {
                    string temp = dsprintmk.Tables[0].Rows[0]["Prints"].ToString();
                    if (temp == "")
                    {
                        temp = "1";
                    }
                    kotprints = Convert.ToInt32(temp);
                    kotprintername = dsprintmk.Tables[0].Rows[0]["Name"].ToString();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {

            }
        }
        public void bindreportkitchenMain(string sid, string ordertype, string takid)
        {
            try
            {
                // DataSet dskds = new DataSet();
                //string q = "SELECT DISTINCT dbo.MenuItem.KDSId  FROM         dbo.Saledetails INNER JOIN                      dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'";
                // dskds = objCore.funGetDataSet(q);
                // for (int i = 0; i < dskds.Tables[0].Rows.Count; i++)
                {
                    DataSet dsprintmkk = new DataSet();
                    SqlConnection conn = new SqlConnection(cs);
                    if (dtcopy.Rows.Count > 0)
                    {

                        // objCore = new classes.Clsdbcon();
                        string qr = "select * from Printers where type='Main KOT'";
                        if (dsprintmk.Tables[0].Rows.Count > 0)
                        {
                            POSRestaurant.Reports.Kotrpt rptDoc = new Reports.Kotrpt();
                            POSRestaurant.Reports.dskitchen dsrpt = new Reports.dskitchen();
                            // .xsd file name
                            DataTable dt = new DataTable();
                            int print = 1;

                            // Just set the name of data table
                            dt.TableName = "Crystal Report";
                            dt = getAllOrderskitchenmain(sid, ordertype, takid);
                            if (dt.Rows.Count > 0)
                            {
                                dsrpt.Tables[0].Merge(dt);
                                rptDoc.SetDataSource(dsrpt);
                                rptDoc.SetParameterValue("kot", "Main KOT");
                                rptDoc.PrintOptions.PrinterName = kotprintername;
                                rptDoc.PrintToPrinter(kotprints, false, 0, 0);
                            }
                        }
                        else
                        {
                            //MessageBox.Show("Kitchen Printer Name is not Defined");
                        }
                    }
                }



            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public DataTable getAllOrderskitchenmain(string siid, string ordertype, string takidmain)
        {

            DataTable dtrptkcnmain = new DataTable();
            try
            {
                dtrptkcnmain.Columns.Add("QTY", typeof(string));
                dtrptkcnmain.Columns.Add("ItemName", typeof(string));

                dtrptkcnmain.Columns.Add("Cashier", typeof(string));
                dtrptkcnmain.Columns.Add("CName", typeof(string));
                dtrptkcnmain.Columns.Add("CAddress", typeof(string));
                dtrptkcnmain.Columns.Add("CPhone", typeof(string));

                dtrptkcnmain.Columns.Add("Invoice", typeof(string));
                dtrptkcnmain.Columns.Add("Date", typeof(string));
                dtrptkcnmain.Columns.Add("Time", typeof(string));
                dtrptkcnmain.Columns.Add("type", typeof(string));
                dtrptkcnmain.Columns.Add("TableNo", typeof(string));
                dtrptkcnmain.Columns.Add("status", typeof(string));



                foreach (DataRow dr in dtcopy.Rows)
                {
                    try
                    {
                        if (dr["Id"].ToString() != string.Empty)
                        {
                            if (dr["SaleType"].ToString() == "New" || dr["Qty"].ToString() == "-1")
                            {
                                string tb = "";
                                if (ordertype == "Din In")
                                {
                                    tb = "Table No: " + tableno;
                                }
                                if (ordertype == "Take Away")
                                {
                                    tb = "Customer Id: " + takidmain;
                                }
                                string qnty = "";
                                //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                                //{
                                //    qnty = "";
                                //}
                                //else
                                {
                                    qnty = dr["Qty"].ToString();
                                }
                                //if (dr.Cells["kdsid"].Value.ToString() == kdsid)
                                string stats = dr["SaleType"].ToString();

                                {
                                    dtrptkcnmain.Rows.Add(qnty, dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb, stats);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            return dtrptkcnmain;
        }
        public void getcompany1()
        {

            objCore = new classes.Clsdbcon();
            dsinfo1 = objCore.funGetDataSet("select * from CompanyInfo");
            if (dsinfo1.Tables[0].Rows.Count > 0)
            {
                cname = dsinfo1.Tables[0].Rows[0]["Name"].ToString();
                caddress = dsinfo1.Tables[0].Rows[0]["Address"].ToString();
                cphone = dsinfo1.Tables[0].Rows[0]["Phone"].ToString();
                logo = dsinfo1.Tables[0].Rows[0]["logo"].ToString();
            }
        }
        public static string cname = "", caddress = "", cphone = "", logo;
        DataSet dsinfo1 = new DataSet();
        DataTable dtcopy = new DataTable();
        string cs = POSRestaurant.Properties.Settings.Default.ConnectionString.ToString();
        public void bindreportkitchen(string sid, string kds, string ordertype, string takeawyid)
        {
            DataSet dskot = new DataSet();
            string qr = "select * from DeviceSetting where Device='KOT'";
            dskot = objCore.funGetDataSet(qr);
            if (dskot.Tables[0].Rows.Count > 0)
            {
                if (dskot.Tables[0].Rows[0]["Status"].ToString() == "Enabled")
                {
                    DataSet dskds = new DataSet();
                    try
                    {
                        SqlConnection con = new SqlConnection(cs);

                        string q = "SELECT DISTINCT dbo.MenuItem.KDSId  FROM         dbo.Saledetails INNER JOIN                      dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'";
                        try
                        {


                            if (con.State == ConnectionState.Open)
                            { con.Close(); }
                            con.Open();
                            SqlCommand com = new SqlCommand(q, con);
                            SqlDataAdapter da = new SqlDataAdapter(com);
                            da.Fill(dskds);
                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            con.Close();
                        }
                        list = new List<String>();
                        //objCore = new classes.Clsdbcon();
                        //dskds = objCore.funGetDataSet(q);
                        for (int i = 0; i < dskds.Tables[0].Rows.Count; i++)
                        {
                            //if (dataGridView1.Rows.Count > 0)
                            if (dtcopy.Rows.Count > 0)
                            {
                                DataSet dsprint1 = new DataSet();
                                objCore = new classes.Clsdbcon();
                                q = "select * from KDS where id='" + dskds.Tables[0].Rows[i][0].ToString() + "'";
                                // dsprint1 = objCore.funGetDataSet();
                                try
                                {


                                    if (con.State == ConnectionState.Open)
                                    { con.Close(); }
                                    con.Open();
                                    SqlCommand com = new SqlCommand(q, con);
                                    SqlDataAdapter da = new SqlDataAdapter(com);
                                    da.Fill(dsprint1);
                                }
                                catch (Exception ex)
                                {

                                }
                                finally
                                {
                                    con.Close();
                                }

                                if (dsprint1.Tables[0].Rows.Count > 0)
                                {
                                    //ReportDocument rptDoc = new ReportDocument();
                                    POSRestaurant.Reports.Kotrpt rptDoc = new Reports.Kotrpt();
                                    POSRestaurant.Reports.dskitchen dsrpt = new Reports.dskitchen();
                                    dsrpt.Clear();
                                    // .xsd file name
                                    DataTable dt1 = new DataTable();
                                    // Just set the name of data table
                                    dt1.TableName = "Crystal Report";
                                    string printername = "";

                                    printername = dsprint1.Tables[0].Rows[0]["Printer"].ToString();
                                    dt1 = getAllOrderskitchen(sid, dskds.Tables[0].Rows[i][0].ToString(), ordertype, takeawyid);
                                    if (dt1.Rows.Count > 0)
                                    {

                                        dsrpt.Tables[0].Merge(dt1);
                                        rptDoc.SetDataSource(dsrpt);
                                        rptDoc.SetParameterValue("kot", dsprint1.Tables[0].Rows[0]["name"].ToString() + " KOT");
                                        rptDoc.PrintOptions.PrinterName = printername;
                                        rptDoc.PrintToPrinter(1, false, 0, 0);
                                        rptDoc.Dispose();
                                        System.GC.Collect();
                                    }

                                }
                                else
                                {
                                    //MessageBox.Show("Kitchen Printer Name is not Defined");
                                }

                            }
                        }
                        bindreportkitchenmodifier(sid, kds, ordertype, takeawyid);
                        bindreportkitchenruntimemodifier(sid, kds, ordertype, takeawyid);
                        bindreportkitchenmodifierflavour(sid, kds, ordertype, takeawyid);


                    }
                    catch (Exception ex)
                    {

                        MessageBox.Show(ex.Message);
                    }

                }
            }
            bindreportkitchenMain(sid, ordertype, takeawyid);
        }
        List<String> list = new List<String>();
        public DataTable getAllOrderskitchen(string siid, string kdsid, string ordertype, string takid)
        {

            DataTable dtrptkchn = new DataTable();
            try
            {
                dtrptkchn.Columns.Add("QTY", typeof(string));
                dtrptkchn.Columns.Add("ItemName", typeof(string));

                dtrptkchn.Columns.Add("Cashier", typeof(string));
                dtrptkchn.Columns.Add("CName", typeof(string));
                dtrptkchn.Columns.Add("CAddress", typeof(string));
                dtrptkchn.Columns.Add("CPhone", typeof(string));

                dtrptkchn.Columns.Add("Invoice", typeof(string));
                dtrptkchn.Columns.Add("Date", typeof(string));
                dtrptkchn.Columns.Add("Time", typeof(string));
                dtrptkchn.Columns.Add("type", typeof(string));
                dtrptkchn.Columns.Add("TableNo", typeof(string));
                dtrptkchn.Columns.Add("status", typeof(string));



                foreach (DataRow dr in dtcopy.Rows)
                {
                    try
                    {
                        if (dr["Id"].ToString() != string.Empty)
                        {
                            if (dr["SaleType"].ToString() == "New" || dr["Qty"].ToString() == "-1")
                            {
                                string tb = "";
                                if (ordertype == "Din In")
                                {
                                    tb = "Table No: " + tableno;
                                }
                                if (ordertype == "Take Away")
                                {
                                    //string cusid = getcustomerid(siid);
                                    tb = "Customer Id: " + takid;
                                }
                                string qnty = "";
                                //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                                //{
                                //    qnty = "";
                                //}
                                //else
                                {
                                    qnty = dr["Qty"].ToString();
                                }
                                int rmid = 0;
                                string rmkds = "";
                                string val = dr["runtimeflavourid"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                rmid = Convert.ToInt32(val);
                                int flvid = 0;
                                string flvkds = "";
                                val = dr["flavourid"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                flvid = Convert.ToInt32(val);

                                int modid = 0;
                                string modkds = "";
                                val = dr["MdId"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                modid = Convert.ToInt32(val);

                                DataSet dscheck = new DataSet();
                                if (flvid > 0)
                                {
                                    SqlConnection con = new SqlConnection(cs);

                                    string q = "SELECT     Id, MenuItemId, name, price, branchid, kdsid FROM         ModifierFlavour where id='" + flvid + "'";
                                    try
                                    {


                                        if (con.State == ConnectionState.Open)
                                        { con.Close(); }
                                        con.Open();
                                        SqlCommand com = new SqlCommand(q, con);
                                        SqlDataAdapter da = new SqlDataAdapter(com);
                                        da.Fill(dscheck);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    finally
                                    {
                                        con.Close();
                                    }
                                    //dscheck = objCore.funGetDataSet(q);
                                    if (dscheck.Tables[0].Rows.Count > 0)
                                    {
                                        if (dscheck.Tables[0].Rows[0]["kdsid"].ToString() == "")
                                        {
                                            flvid = 0;
                                        }
                                        else
                                        {
                                            flvkds = dscheck.Tables[0].Rows[0]["kdsid"].ToString();
                                        }
                                    }
                                    else
                                    {
                                        flvid = 0;
                                    }
                                }
                                dscheck = new DataSet();
                                if (rmid > 0)
                                {
                                    string q = "SELECT     id, name, Itemid, price, Quantity, status, branchid, kdsid FROM         RuntimeModifier where id='" + rmid + "'";
                                    SqlConnection con = new SqlConnection(cs);
                                    try
                                    {
                                        if (con.State == ConnectionState.Open)
                                        { con.Close(); }
                                        con.Open();
                                        SqlCommand com = new SqlCommand(q, con);
                                        SqlDataAdapter da = new SqlDataAdapter(com);
                                        da.Fill(dscheck);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    finally
                                    {
                                        con.Close();
                                    }
                                    // dscheck = objCore.funGetDataSet(q);
                                    if (dscheck.Tables[0].Rows.Count > 0)
                                    {
                                        if (dscheck.Tables[0].Rows[0]["kdsid"].ToString() == "")
                                        {
                                            rmid = 0;
                                        }
                                        else
                                        {
                                            rmkds = dscheck.Tables[0].Rows[0]["kdsid"].ToString();
                                        }
                                    }
                                    else
                                    {
                                        rmid = 0;
                                    }
                                }
                                dscheck = new DataSet();
                                if (modid > 0)
                                {
                                    string q = "SELECT     Id, MenuGroupId, MenuItemId, RawItemId, Name, Price, Quantity, uploadstatus, branchid, kdsid FROM         Modifier where id='" + modid + "'";
                                    SqlConnection con = new SqlConnection(cs);
                                    try
                                    {


                                        if (con.State == ConnectionState.Open)
                                        { con.Close(); }
                                        con.Open();
                                        SqlCommand com = new SqlCommand(q, con);
                                        SqlDataAdapter da = new SqlDataAdapter(com);
                                        da.Fill(dscheck);
                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                    finally
                                    {
                                        con.Close();
                                    }
                                    //  dscheck = objCore.funGetDataSet(q);
                                    if (dscheck.Tables[0].Rows.Count > 0)
                                    {
                                        if (dscheck.Tables[0].Rows[0]["kdsid"].ToString() == "")
                                        {
                                            modid = 0;
                                        }
                                        else
                                        {
                                            modkds = dscheck.Tables[0].Rows[0]["kdsid"].ToString();
                                        }
                                    }
                                    else
                                    {
                                        modid = 0;
                                    }
                                }
                                string temp = dr["kdsid"].ToString();
                                string temp1 = dr["Item"].ToString();

                                if (dr["kdsid"].ToString() == kdsid || kdsid == modkds || kdsid == flvkds || kdsid == rmkds)
                                {
                                    list.Add(dr["kdsid"].ToString());

                                    string stats = dr["SaleType"].ToString();
                                    dtrptkchn.Rows.Add((qnty), dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb, stats);
                                }
                                //if (dr["kdsid"].ToString() == kdsid && rmid == 0 && flvid == 0 && modid == 0)
                                //{

                                //    string stats = dr["SaleType"].ToString();


                                //    dtrptkchn.Rows.Add((qnty), dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb,stats);
                                //}
                            }
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            return dtrptkchn;
        }

        public void bindreportkitchenruntimemodifier(string sid, string kds, string ordertype, string takeawyid)
        {
            DataSet dskds = new DataSet();
            try
            {
                SqlConnection con = new SqlConnection(cs);

                string q = "";// "SELECT DISTINCT dbo.MenuItem.KDSId  FROM         dbo.Saledetails INNER JOIN                      dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'";
                q = "SELECT DISTINCT dbo.RuntimeModifier.kdsid FROM         dbo.KDS INNER JOIN                      dbo.RuntimeModifier ON dbo.KDS.Id = dbo.RuntimeModifier.kdsid INNER JOIN                      dbo.Saledetails ON dbo.RuntimeModifier.id = dbo.Saledetails.RunTimeModifierId where dbo.Saledetails.saleid='" + sid + "'";
                try
                {


                    if (con.State == ConnectionState.Open)
                    { con.Close(); }
                    con.Open();
                    SqlCommand com = new SqlCommand(q, con);
                    SqlDataAdapter da = new SqlDataAdapter(com);
                    da.Fill(dskds);
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    con.Close();
                }

                //objCore = new classes.Clsdbcon();
                //dskds = objCore.funGetDataSet(q);
                for (int i = 0; i < dskds.Tables[0].Rows.Count; i++)
                {
                    //if (dataGridView1.Rows.Count > 0)
                    if (dtcopy.Rows.Count > 0)
                    {
                        DataSet dsprint2 = new DataSet();
                        objCore = new classes.Clsdbcon();
                        q = "select * from KDS where id='" + dskds.Tables[0].Rows[i][0].ToString() + "'";
                        // dsprint1 = objCore.funGetDataSet();
                        try
                        {


                            if (con.State == ConnectionState.Open)
                            { con.Close(); }
                            con.Open();
                            SqlCommand com = new SqlCommand(q, con);
                            SqlDataAdapter da = new SqlDataAdapter(com);
                            da.Fill(dsprint2);
                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            con.Close();
                        }

                        if (dsprint2.Tables[0].Rows.Count > 0)
                        {
                            //ReportDocument rptDoc = new ReportDocument();
                            POSRestaurant.Reports.Kotrpt rptDoc = new Reports.Kotrpt();
                            POSRestaurant.Reports.dskitchen dsrpt = new Reports.dskitchen();
                            dsrpt.Clear();
                            // .xsd file name
                            DataTable dt4 = new DataTable();
                            // Just set the name of data table
                            dt4.TableName = "Crystal Report";
                            string printername = "";

                            printername = dsprint2.Tables[0].Rows[0]["Printer"].ToString();
                            dt4 = getAllOrderskitchenruntimemodifier(sid, dskds.Tables[0].Rows[i][0].ToString(), ordertype, takeawyid);
                            if (dt.Rows.Count > 0)
                            {

                                dsrpt.Tables[0].Merge(dt4);
                                rptDoc.SetDataSource(dsrpt);
                                rptDoc.SetParameterValue("kot", dsprint2.Tables[0].Rows[0]["name"].ToString() + " KOT");
                                rptDoc.PrintOptions.PrinterName = printername;
                                rptDoc.PrintToPrinter(1, false, 0, 0);
                                rptDoc.Dispose();
                                System.GC.Collect();
                            }
                        }
                        else
                        {
                            //MessageBox.Show("Kitchen Printer Name is not Defined");
                        }

                    }
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public DataTable getAllOrderskitchenruntimemodifier(string siid, string kdsid, string ordertype, string takid)
        {

            DataTable dtrptkchn = new DataTable();
            try
            {
                dtrptkchn.Columns.Add("QTY", typeof(string));
                dtrptkchn.Columns.Add("ItemName", typeof(string));

                dtrptkchn.Columns.Add("Cashier", typeof(string));
                dtrptkchn.Columns.Add("CName", typeof(string));
                dtrptkchn.Columns.Add("CAddress", typeof(string));
                dtrptkchn.Columns.Add("CPhone", typeof(string));

                dtrptkchn.Columns.Add("Invoice", typeof(string));
                dtrptkchn.Columns.Add("Date", typeof(string));
                dtrptkchn.Columns.Add("Time", typeof(string));
                dtrptkchn.Columns.Add("type", typeof(string));
                dtrptkchn.Columns.Add("TableNo", typeof(string));
                dtrptkchn.Columns.Add("status", typeof(string));




                foreach (DataRow dr in dtcopy.Rows)
                {
                    try
                    {
                        if (dr["Id"].ToString() != string.Empty)
                        {
                            if (dr["SaleType"].ToString() == "New" || dr["Qty"].ToString() == "-1")
                            {
                                string tb = "";
                                if (ordertype == "Din In")
                                {
                                    tb = "Table No: " + tableno;
                                }
                                if (ordertype == "Take Away")
                                {
                                    //string cusid = getcustomerid(siid);
                                    tb = "Customer Id: " + takid;
                                }
                                string qnty = "";
                                //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                                //{
                                //    qnty = "";
                                //}
                                //else
                                {
                                    qnty = dr["Qty"].ToString();
                                }
                                int rmid = 0;
                                string val = dr["runtimeflavourid"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                rmid = Convert.ToInt32(val);
                                bool chk = true;
                                if (dr["kdsid"].ToString() == kdsid && rmid > 0)
                                {
                                    foreach (string no in list)
                                    {
                                        if (no == dr["kdsid"].ToString())
                                        {
                                            chk = false;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    if (chk == true)
                                    {
                                        string stats = dr["SaleType"].ToString();
                                        dtrptkchn.Rows.Add((qnty), dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb, stats);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            return dtrptkchn;
        }

        public void bindreportkitchenmodifierflavour(string sid, string kds, string ordertype, string takeawyid)
        {
            DataSet dskds = new DataSet();
            try
            {
                SqlConnection con = new SqlConnection(cs);

                string q = "";// "SELECT DISTINCT dbo.MenuItem.KDSId  FROM         dbo.Saledetails INNER JOIN                      dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'";
                // q = "SELECT DISTINCT dbo.RuntimeModifier.kdsid FROM         dbo.KDS INNER JOIN                      dbo.RuntimeModifier ON dbo.KDS.Id = dbo.RuntimeModifier.kdsid INNER JOIN                      dbo.Saledetails ON dbo.RuntimeModifier.id = dbo.Saledetails.RunTimeModifierId where dbo.Saledetails.saleid='" + sid + "'";
                q = "SELECT DISTINCT dbo.ModifierFlavour.kdsid FROM         dbo.ModifierFlavour INNER JOIN                      dbo.Saledetails ON dbo.ModifierFlavour.Id = dbo.Saledetails.Flavourid where dbo.Saledetails.saleid='" + sid + "'";
                try
                {


                    if (con.State == ConnectionState.Open)
                    { con.Close(); }
                    con.Open();
                    SqlCommand com = new SqlCommand(q, con);
                    SqlDataAdapter da = new SqlDataAdapter(com);
                    da.Fill(dskds);
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    con.Close();
                }

                //objCore = new classes.Clsdbcon();
                //dskds = objCore.funGetDataSet(q);
                for (int i = 0; i < dskds.Tables[0].Rows.Count; i++)
                {
                    //if (dataGridView1.Rows.Count > 0)
                    if (dtcopy.Rows.Count > 0)
                    {
                        DataSet dsprint3 = new DataSet();
                        objCore = new classes.Clsdbcon();
                        q = "select * from KDS where id='" + dskds.Tables[0].Rows[i][0].ToString() + "'";
                        // dsprint1 = objCore.funGetDataSet();
                        try
                        {


                            if (con.State == ConnectionState.Open)
                            { con.Close(); }
                            con.Open();
                            SqlCommand com = new SqlCommand(q, con);
                            SqlDataAdapter da = new SqlDataAdapter(com);
                            da.Fill(dsprint3);
                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            con.Close();
                        }

                        if (dsprint3.Tables[0].Rows.Count > 0)
                        {
                            //ReportDocument rptDoc = new ReportDocument();
                            POSRestaurant.Reports.Kotrpt rptDoc = new Reports.Kotrpt();
                            POSRestaurant.Reports.dskitchen dsrpt = new Reports.dskitchen();
                            dsrpt.Clear();
                            // .xsd file name
                            DataTable dt3 = new DataTable();
                            // Just set the name of data table
                            dt3.TableName = "Crystal Report";
                            string printername = "";

                            printername = dsprint3.Tables[0].Rows[0]["Printer"].ToString();
                            dt3 = getAllOrderskitchenmodifierflavour(sid, dskds.Tables[0].Rows[i][0].ToString(), ordertype, takeawyid);
                            if (dt3.Rows.Count > 0)
                            {

                                dsrpt.Tables[0].Merge(dt3);
                                rptDoc.SetDataSource(dsrpt);
                                rptDoc.SetParameterValue("kot", dsprint3.Tables[0].Rows[0]["name"].ToString() + " KOT");
                                rptDoc.PrintOptions.PrinterName = printername;
                                rptDoc.PrintToPrinter(1, false, 0, 0);
                                rptDoc.Dispose();
                                System.GC.Collect();
                            }
                        }
                        else
                        {
                            //MessageBox.Show("Kitchen Printer Name is not Defined");
                        }

                    }
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public DataTable getAllOrderskitchenmodifierflavour(string siid, string kdsid, string ordertype, string takid)
        {

            DataTable dtrptkchn = new DataTable();
            try
            {
                dtrptkchn.Columns.Add("QTY", typeof(string));
                dtrptkchn.Columns.Add("ItemName", typeof(string));

                dtrptkchn.Columns.Add("Cashier", typeof(string));
                dtrptkchn.Columns.Add("CName", typeof(string));
                dtrptkchn.Columns.Add("CAddress", typeof(string));
                dtrptkchn.Columns.Add("CPhone", typeof(string));

                dtrptkchn.Columns.Add("Invoice", typeof(string));
                dtrptkchn.Columns.Add("Date", typeof(string));
                dtrptkchn.Columns.Add("Time", typeof(string));
                dtrptkchn.Columns.Add("type", typeof(string));
                dtrptkchn.Columns.Add("TableNo", typeof(string));
                dtrptkchn.Columns.Add("status", typeof(string));




                foreach (DataRow dr in dtcopy.Rows)
                {
                    try
                    {
                        if (dr["Id"].ToString() != string.Empty)
                        {
                            if (dr["SaleType"].ToString() == "New" || dr["Qty"].ToString() == "-1")
                            {
                                string tb = "";
                                if (ordertype == "Din In")
                                {
                                    tb = "Table No: " + tableno;
                                }
                                if (ordertype == "Take Away")
                                {
                                    //string cusid = getcustomerid(siid);
                                    tb = "Customer Id: " + takid;
                                }
                                string qnty = "";
                                //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                                //{
                                //    qnty = "";
                                //}
                                //else
                                {
                                    qnty = dr["Qty"].ToString();
                                }
                                int flvid = 0;
                                string val = dr["flavourid"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                flvid = Convert.ToInt32(val);
                                bool chk = true;
                                if (dr["kdsid"].ToString() == kdsid && flvid > 0)
                                {
                                    foreach (string no in list)
                                    {
                                        if (no == dr["kdsid"].ToString())
                                        {
                                            chk = false;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    if (chk == true)
                                    {
                                        string stats = dr["SaleType"].ToString();
                                        dtrptkchn.Rows.Add((qnty), dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb, stats);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            return dtrptkchn;
        }

        public void bindreportkitchenmodifier(string sid, string kds, string ordertype, string takeawyid)
        {
            DataSet dskds = new DataSet();
            try
            {
                SqlConnection con = new SqlConnection(cs);

                string q = "";// "SELECT DISTINCT dbo.MenuItem.KDSId  FROM         dbo.Saledetails INNER JOIN                      dbo.MenuItem ON dbo.Saledetails.MenuItemId = dbo.MenuItem.Id where dbo.Saledetails.saleid='" + sid + "'";
                // q = "SELECT DISTINCT dbo.RuntimeModifier.kdsid FROM         dbo.KDS INNER JOIN                      dbo.RuntimeModifier ON dbo.KDS.Id = dbo.RuntimeModifier.kdsid INNER JOIN                      dbo.Saledetails ON dbo.RuntimeModifier.id = dbo.Saledetails.RunTimeModifierId where dbo.Saledetails.saleid='" + sid + "'";
                q = "SELECT DISTINCT dbo.Modifier.kdsid FROM         dbo.Saledetails INNER JOIN                      dbo.Modifier ON dbo.Saledetails.ModifierId = dbo.Modifier.Id where dbo.Saledetails.saleid='" + sid + "'";
                try
                {


                    if (con.State == ConnectionState.Open)
                    { con.Close(); }
                    con.Open();
                    SqlCommand com = new SqlCommand(q, con);
                    SqlDataAdapter da = new SqlDataAdapter(com);
                    da.Fill(dskds);
                }
                catch (Exception ex)
                {

                }
                finally
                {
                    con.Close();
                }

                //objCore = new classes.Clsdbcon();
                //dskds = objCore.funGetDataSet(q);
                for (int i = 0; i < dskds.Tables[0].Rows.Count; i++)
                {
                    //if (dataGridView1.Rows.Count > 0)
                    if (dtcopy.Rows.Count > 0)
                    {
                        DataSet dsprint4 = new DataSet();
                        objCore = new classes.Clsdbcon();
                        q = "select * from KDS where id='" + dskds.Tables[0].Rows[i][0].ToString() + "'";
                        // dsprint1 = objCore.funGetDataSet();
                        try
                        {


                            if (con.State == ConnectionState.Open)
                            { con.Close(); }
                            con.Open();
                            SqlCommand com = new SqlCommand(q, con);
                            SqlDataAdapter da = new SqlDataAdapter(com);
                            da.Fill(dsprint4);
                        }
                        catch (Exception ex)
                        {

                        }
                        finally
                        {
                            con.Close();
                        }

                        if (dsprint4.Tables[0].Rows.Count > 0)
                        {
                            //ReportDocument rptDoc = new ReportDocument();
                            POSRestaurant.Reports.Kotrpt rptDoc = new Reports.Kotrpt();
                            POSRestaurant.Reports.dskitchen dsrpt = new Reports.dskitchen();
                            dsrpt.Clear();
                            // .xsd file name
                            DataTable dt4 = new DataTable();
                            // Just set the name of data table
                            dt4.TableName = "Crystal Report";
                            string printername = "";

                            printername = dsprint4.Tables[0].Rows[0]["Printer"].ToString();
                            dt4 = getAllOrderskitchenmodifier(sid, dskds.Tables[0].Rows[i][0].ToString(), ordertype, takeawyid);
                            if (dt4.Rows.Count > 0)
                            {

                                dsrpt.Tables[0].Merge(dt4);
                                rptDoc.SetDataSource(dsrpt);
                                rptDoc.SetParameterValue("kot", dsprint4.Tables[0].Rows[0]["name"].ToString() + " KOT");
                                rptDoc.PrintOptions.PrinterName = printername;
                                rptDoc.PrintToPrinter(1, false, 0, 0);
                                rptDoc.Dispose();
                                System.GC.Collect();
                            }
                        }
                        else
                        {
                            //MessageBox.Show("Kitchen Printer Name is not Defined");
                        }

                    }
                }

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }
        public DataTable getAllOrderskitchenmodifier(string siid, string kdsid, string ordertype, string takid)
        {

            DataTable dtrptkchn = new DataTable();
            try
            {
                dtrptkchn.Columns.Add("QTY", typeof(string));
                dtrptkchn.Columns.Add("ItemName", typeof(string));

                dtrptkchn.Columns.Add("Cashier", typeof(string));
                dtrptkchn.Columns.Add("CName", typeof(string));
                dtrptkchn.Columns.Add("CAddress", typeof(string));
                dtrptkchn.Columns.Add("CPhone", typeof(string));

                dtrptkchn.Columns.Add("Invoice", typeof(string));
                dtrptkchn.Columns.Add("Date", typeof(string));
                dtrptkchn.Columns.Add("Time", typeof(string));
                dtrptkchn.Columns.Add("type", typeof(string));
                dtrptkchn.Columns.Add("TableNo", typeof(string));
                dtrptkchn.Columns.Add("status", typeof(string));




                foreach (DataRow dr in dtcopy.Rows)
                {
                    try
                    {
                        if (dr["Id"].ToString() != string.Empty)
                        {
                            if (dr["SaleType"].ToString() == "New" || dr["Qty"].ToString() == "-1")
                            {
                                string tb = "";
                                if (ordertype == "Din In")
                                {
                                    tb = "Table No: " + tableno;
                                }
                                if (ordertype == "Take Away")
                                {
                                    //string cusid = getcustomerid(siid);
                                    tb = "Customer Id: " + takid;
                                }
                                string qnty = "";
                                //if (dr["flavourid"].ToString().Trim() != "" || dr["MdId"].ToString().Trim() != "")
                                //{
                                //    qnty = "";
                                //}
                                //else
                                {
                                    qnty = dr["Qty"].ToString();
                                }


                                int modid = 0;
                                string val = dr["MdId"].ToString();
                                if (val == "")
                                {
                                    val = "0";
                                }
                                modid = Convert.ToInt32(val);
                                bool chk = true;
                                if (dr["kdsid"].ToString() == kdsid && modid > 0)
                                {
                                    foreach (string no in list)
                                    {
                                        if (no == dr["kdsid"].ToString())
                                        {
                                            chk = false;
                                        }
                                        else
                                        {

                                        }
                                    }
                                    if (chk == true)
                                    {
                                        string stats = dr["SaleType"].ToString();
                                        dtrptkchn.Rows.Add((qnty), dr["Item"].ToString(), label3.Text, cname, caddress, cphone, siid, date, DateTime.Now.ToShortTimeString(), ordertype, tb, stats);
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {


                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

            return dtrptkchn;
        }

        private void vButton8_Click(object sender, EventArgs e)
        {
            try
            {
                if (daystatus == "Day Start")
                {
                    MessageBox.Show("Please Start Day First");
                    return;
                }
                if (dataGridView1.Rows.Count > 0)
                {
                    MessageBox.Show("Please sale already added items");
                    return;



                }
                takeawayid = "";
                //txtcashrecvd.Text = "0";
                txttotal.Text = "0";
                txtnettotal.Text = "0";
                txtadvanc.Text = "";
                //txtchange.Text = "0";
                txtdiscount.Text = "0";
                txtdiscountamount.Text = "0";
                dt.Clear();
                dataGridView1.Refresh();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                clear();
                editsale = string.Empty;
                //lblordertype.Text = "Delivery";
                POSRestaurant.Sale.Delivery ob = new Delivery(this);
                //this.Enabled = false;
                ob.id = userid;
                ob.Show();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void vButton4_Click(object sender, EventArgs e)
        {
            if (txtdiscount.Enabled == false)
            {
                
                POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
                ob.editmode = "Discount";

                // this.Enabled = false;
                ob.Show();
            }
        }
        public void cleartables()
        {
            //lblordertype.Text = "Not Selected";
            tableno = "";
            waiterid = "";
            //vtableno.Text = "";
        }
        private void vButton9_Click(object sender, EventArgs e)
        {
            try
            {
                if (daystatus == "Day Start")
                {
                    MessageBox.Show("Please Start Day First");
                    return;
                }
                if (dataGridView1.Rows.Count > 0)
                {
                    MessageBox.Show("Please sale already added items");
                    return;
                    // if (vBtnkot.Enabled == false)
                    //{
                    //    if (lblordertype.Text == "Delivery")
                    //    {
                    //        sale("", lblordertype.Text);
                    //        updatedelivery(saleid);
                    //        recalsale(saleid.ToString());
                    //    }
                    //    if (lblordertype.Text == "Take Away")
                    //    {
                    //        sale("", lblordertype.Text);

                    //        updatetakeaway(saleid);
                    //        recalsale(saleid.ToString());
                    //    }
                    //    if (lblordertype.Text == "Din In")
                    //    {
                    //        sale("", lblordertype.Text);

                    //        updateDinin(saleid);
                    //        recalsale(saleid.ToString());
                    //    }

                    //}

                }
                //txtcashrecvd.Text = "0";
                txttotal.Text = "0";
                txtnettotal.Text = "0";
                txtadvanc.Text = "";
                //txtchange.Text = "0";
                txtdiscount.Text = "0";
                txtdiscountamount.Text = "0";
                dt.Clear();
                dataGridView1.Refresh();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                clear();
                clear();
                editsale = string.Empty;
                //lblordertype.Text = "Din In";
                POSRestaurant.Sale.Table ob = new Table(this);
                //  this.Enabled = false;
                ob.Show();

            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void clear()
        {
            try
            {
                //txtcashrecvd.Text = "";
                txttotal.Text = "";
                txtnettotal.Text = "";
                txtadvanc.Text = "";
                //txtchange.Text = "";
                txtdiscount.Text = "";
                //vtableno.Text = "";
            }
            catch (Exception ex)
            {

                throw;
            }
        }
        private void vButton14_Click(object sender, EventArgs e)
        {
            POSRestaurant.Sale.BillRecall ob = new BillRecall(this);
            ob.id = userid;
            // this.Enabled = false;
            ob.Show();
        }

        private void tabletorders_Click(object sender, EventArgs e)
        {
            // lblordertype.Text = "Din In";
            //POSRestaurant.Sale.TabltOrders ob = new TabltOrders(this);

            //ob.Show();
        }
        public string GetDefaultPrinter()
        {
            PrinterSettings settings = new PrinterSettings();
            foreach (string printer in PrinterSettings.InstalledPrinters)
            {
                settings.PrinterName = printer;
                if (settings.IsDefaultPrinter)
                    return printer;
            }
            return string.Empty;
        }
        private void vButton17_Click(object sender, EventArgs e)
        {
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "CashDrawer";

            ob.Show();


        }

        private void vButton19_Click(object sender, EventArgs e)
        {
            try
            {
                bool chk = false;
                DataSet dsdayend = new DataSet();
                dsdayend = objCore.funGetDataSet("select id from sale where billstatus='pending' and date='" + date + "' and userid='" + userid + "'");
                if (dsdayend.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < dsdayend.Tables[0].Rows.Count; i++)
                    {
                        ds = new DataSet();
                        ds = objCore.funGetDataSet("select Status from saledetails where saleid='" + dsdayend.Tables[0].Rows[i]["id"].ToString() + "'");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                            {
                                if (ds.Tables[0].Rows[j]["Status"].ToString() == "Not Void")
                                {
                                    chk = true;
                                }
                            }
                        }
                    }
                    if (chk == true)
                    {
                        MessageBox.Show("There are Pending Bills. Please Clear Pending Orders Before Logout");
                        return;
                    }
                }
                DialogResult msg = MessageBox.Show("Are you sure you want Logout?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);

                if (msg == DialogResult.Yes)
                {
                    Application.Exit();
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public string getordertype()
        {
            string type = "";
            //DataSet dstype = new DataSet();
            SqlDataReader dr = null;
            try
            {
                string q = "select OrderType from sale where id='" + saleid + "'";
                dr = objCore.funGetDataReader1(q);
                //dstype = objCore.funGetDataSet(q);
                if (dr.Read())
                {
                    type = dr[0].ToString();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                //dstype.Dispose();
            }
            return type;
        }
        BackgroundWorker bg3 = new BackgroundWorker();
        DataTable datatableprint = new DataTable();
        string cname1 = "", date1 = "", cashr1 = "", recvd1 = "0", ordertype1 = "", chng1 = "0", saletype1 = "", total1 = "0", gst1 = "", net1 = "0", otype1 = "", discountamount1 = "", nettotal1 = "", discount1 = "";
        double advance1 = 0;
        private void myBGWorker3_DoWork(object sender, DoWorkEventArgs e)
        {
            // PrintReceipt(datatableprint, cname1, date1, cashr1, Convert.ToDouble(recvd1) + advance1, Convert.ToDouble(chng1), saleid.ToString(), saletype1, total1, gst1, txtdiscountamount.Text, gstperc, txtdiscount.Text, net1.ToString(), otype1);
            //  sale("", "", "ali");            
            // PrintReceiptThreading(printerglobal, datatableprint, cname, date, cashr, Convert.ToDouble("0") + 0, Convert.ToDouble("0"), saleid.ToString(), saletype, "100", "19", txtdiscountamount.Text, gstperc, txtdiscount.Text, "1100", "");
        }
        public string threading()
        {
            string type = "";
            SqlDataReader dr = null;
            try
            {
                string q = "select status from Threading where terminal='" + System.Environment.MachineName.ToString() + "'";
                dr = objCore.funGetDataReader1(q);
                if (dr.Read())
                {
                    type = dr[0].ToString();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {

            }
            if (type == "")
            {
                type = "no";
            }
            return type;
        }

        // OPOSPOSPrinter printerglobal = new OPOSPOSPrinter();
        public static bool isThreadRunning = false;
        Button billnobtn;
        private void vButton12_Click_1(object sender, EventArgs e)
        {
            string path = Path.GetDirectoryName(Application.ExecutablePath);
           // PrintClass.Printt(path);
            //testprint o = new testprint();
            //o.Show();
            //return;
            //try
            //{
            //    float.Parse("ee");
            //}
            //catch (Exception ex)
            //{
                
            //    throw;
            //}

            qrcode = "";
            //this.TopMost = false;
            if (tabControl1.SelectedTab.Name == "Previous")
            {

            }
            else
            {
                if (saleid > 0)
                {

                }
                else
                {
                    return;
                }
            }
            string otype = getordertype(), recvd = "0", chng = "0";
            TabPage page = tabControl1.SelectedTab;
            var controls1 = page.Controls;
            bool checknew = false;
            foreach (var control in controls1)
            {
                if (control is DataGridView)
                {
                    DataGridView grid = control as DataGridView;
                    //if (grid.Rows.Count > 0)
                    //{
                    //    foreach (DataGridViewRow dgr in grid.Rows)
                    //    {
                    //        if (dgr.Cells["SaleType"].Value.ToString().ToLower() == "new")
                    //        {
                    //            checknew = true;
                    //        }
                    //    }
                    //}
                    //if (checknew == true)
                    {
                        if (addon == "new")
                        {
                            sale("Cash", otype, tabControl1.SelectedTab.Text);

                            if (PrintKitchen == "Enabled")
                            {
                                sendtokot("kitchen");
                            }
                            if (printmain == "Enabled")
                            {
                                sendtokot("main");
                            }

                            if (tabControl1.SelectedTab.Name == "Previous Bill")
                            {
                                recalsaleprevious(saleid.ToString(), "no");
                            }
                            else
                            {
                                recalsale(saleid.ToString(), "no");
                            }
                        }
                    }
                }
            }
            {
                string invoiceno = "";
                if (printinvoiceno.Trim() == "yes")
                {
                    invoiceno = getinvoicenopaid(saleid.ToString());
                }
                string ordertype = otype;
                string total = txttotal.Text.Trim();
                string nettotal = txtnettotal.Text.Trim();
                string discount = txtdiscount.Text.Trim();
                string discountamount = txtdiscountamount.Text.Trim();
                string gst = lblgst.Text.Trim();
                string adv = txtadvanc.Text;
                if (adv == "")
                {
                    adv = "0";
                }
                double advance = 0;
                try
                {
                    advance = Convert.ToDouble(adv);
                }
                catch (Exception ex)
                {


                }
                string sid1 = saleid.ToString();
                cname1 = cashr; date1 = date; cashr1 = cashr; recvd1 = recvd; chng1 = chng; saletype1 = saletype; total1 = total; gst1 = gst; discount1 = discount; nettotal1 = nettotal.ToString(); otype1 = otype; discountamount1 = discountamount;
                advance1 = advance;
                Thread salethread;
                double net = 0;
                net = Convert.ToDouble(nettotal) + advance;
                int count = tabControl1.TabCount;

                string cname = page.Text;
                var controls = page.Controls;
                string type = printtype();
                if (type == "")
                {
                    type = "opos";
                }
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        dtcopy = new DataTable();
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count <= 0)
                        {
                            return;
                        }

                        DataTable tbl = grid.DataSource as DataTable;
                        datatableprint = new DataTable();
                        datatableprint = tbl;

                        if (type == "opos")
                        {
                            // for (int i = 0; i < totalprints(); i++)
                            if (threading().ToLower() == "yes")
                            {
                                //OPOSPOSPrinter printer = new OPOSPOSPrinter();   

                                if (isThreadRunning == false)
                                {
                                    salethread = new Thread(() => PrintReceiptThreading(datatableprint, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net.ToString(), otype));
                                    salethread.IsBackground = true;
                                    salethread.Start();
                                }

                                //{
                                //BackgroundWorker bg2 = new BackgroundWorker();
                                //bg2.DoWork += new DoWorkEventHandler(myBGWorker_DoWork);
                                //bg2.ProgressChanged += new ProgressChangedEventHandler(bg2_ProgressChanged);
                                //bg2.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bg2_completed);
                                //bg2.WorkerReportsProgress = true;
                                // m_WorkersWithData.Add(bg2);
                                //bg2.WorkerSupportsCancellation = true;
                                //bg2.RunWorkerAsync();
                                //}

                            }
                            else
                            {
                                PrintReceipt(tbl, cname, date, cashr, Convert.ToDouble(recvd) + advance, Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, net.ToString(), otype,invoiceno);
                            }
                        }
                        else if (type == "generic")
                        {
                            // for (int i = 0; i < totalprints(); i++)
                            {
                                Print(printername("generic"), saleid.ToString(), cashr, cname, saletype, "", tbl, recvd, chng, total, txtdiscountamount.Text, gst, "", ordertype, date.ToString(), invoiceno);

                            }
                        }
                        else if (type == "rdlc")
                        {
                            int print = 1;
                            string printername = "";
                            DataSet dsprint = new DataSet();
                            string q = "select * from Printers where type='Receipt'";
                            //SqlDataReader dr = objCore.funGetDataReader1(q);

                            //try
                            //{
                            //    if (dr.Read())
                            //    {
                            //        printername = dr["name"].ToString();
                            //        string temp = dr["Prints"].ToString();
                            //        if (temp == "")
                            //        {
                            //            temp = "1";
                            //        }
                            //        print = Convert.ToInt32(temp);
                            //    }
                            //}
                            //catch (Exception ex)
                            //{
                            //}
                            getcompany();
                            string customermsg = "";
                            string customermsg2 = "";
                            try
                            {
                                customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                                customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                            }
                            catch (Exception ex)
                            {
                                MessageBox.Show("company info not defined");
                            }
                            string svschrgs = txtservice.Text;
                            string info = "";// getdeliveryinfo(saleid.ToString());
                            if (ordertype == "Dine In")
                            {
                                string tblno = gettbleno(saleid.ToString());
                                info = "Table No: " + tblno;
                            }
                            else if (ordertype == "Take Away")
                            {
                                string cusid = getcustomerid(saleid.ToString());
                                 info = "Customer Id: " + cusid;
                            }
                            else
                            {

                                info = getdeliveryinfo(saleid.ToString());
                            }
                            if (pointsurl == "")
                            {
                                try
                                {
                                    string value;
                                    value = CacheClass.Cache["pointsurl"] as string;
                                    if (null == value)
                                    {

                                    }
                                    else
                                    {
                                        pointsurl = value;
                                    }
                                }
                                catch (Exception ex)
                                {


                                }
                            }
                            string billtitle = "Pre Sale Bill";

                            if (page.Name == "Previous")
                            {
                                billtitle = "Duplicate Bill";
                                q = "select FBRcode from sale where id='" + sid1 + "'";
                                

                                try
                                {
                                    SqlDataReader dr = objCore.funGetDataReader1(q);
                                    if (dr.Read())
                                    {
                                        qrcode = dr["FBRcode"].ToString();
                                        
                                    }
                                }
                                catch (Exception ex)
                                {
                                }
                            }
                            //////////////////////////////////////////////////////////////////////////////////////////////

                            salethread = new Thread(() => PrintClass.Printt(path, datatableprint, saletype, sid1.ToString(), "", ordertype, total1, nettotal1, discount1, gstperc, (Convert.ToDouble(recvd) + advance).ToString(), chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs, cname1, date1, "", this, qrcode, pointsurl, invoiceno,billtitle));
                            salethread.IsBackground = true;
                            salethread.Start();

                            try
                            {
                               
                                q = "insert into log (Name, Time, Description,userid) values ('Bill Print','" + DateTime.Now + "','" + sid1.ToString() + "','" + userid + "')";
                                objCore.executeQuery(q);
                                billnobtn.BackColor = Color.Red;
                                billnobtn.ForeColor = Color.White;
                            }
                            catch (Exception ex)
                            {

                            }

                           // qrcode = "";
                        }
                        else
                        {
                            int print = 1;
                            string printername = "";
                            DataSet dsprint = new DataSet();
                            string q = "select * from Printers where type='Receipt'";
                            SqlDataReader dr = objCore.funGetDataReader1(q);

                            try
                            {
                                if (dr.Read())
                                {
                                    printername = dr["name"].ToString();
                                    string temp = dr["Prints"].ToString();
                                    if (temp == "")
                                    {
                                        temp = "1";
                                    }
                                    print = Convert.ToInt32(temp);
                                }
                            }
                            catch (Exception ex)
                            {
                            }
                            getcompany();
                            string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                            string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                            string svschrgs = txtservice.Text;
                            string info = getdeliveryinfo(saleid.ToString());

                            salethread = new Thread(() => bindreport(datatableprint, saletype, sid1.ToString(), "", ordertype, total1, nettotal1, discount1, gst1, "0", chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs));
                            salethread.IsBackground = true;
                            salethread.Start();
                            //bindreport(tbl, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng, printername, info,print);
                        }

                        #region MyRegion
                        //if (tabControl1.SelectedIndex.ToString() == "0")
                        //{
                        //    dtcopy = dt.Clone();

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }
                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "1")
                        //{
                        //    dtcopy = new DataTable();


                        //    if (type == "opos")
                        //    {
                        //        for (int i = 0; i < totalprints(); i++)
                        //        {
                        //            PrintReceipt(dt2, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //        }
                        //    }
                        //    else
                        //    {
                        //        bindreport(dt2, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //    }



                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "2")
                        //{
                        //    dtcopy = new DataTable();


                        //    if (type == "opos")
                        //    {
                        //        for (int i = 0; i < totalprints(); i++)
                        //        {
                        //            PrintReceipt(dt3, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //        }
                        //    }
                        //    else
                        //    {
                        //        bindreport(dt3, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //    }




                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "3")
                        //{
                        //    dtcopy = new DataTable();

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt4, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt4, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "4")
                        //{
                        //    dtcopy = new DataTable();

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt5, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt5, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }

                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "5")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt6, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt6, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "6")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt7, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt7, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "7")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt8, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt8, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "8")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt9, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt9, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "9")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt10, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt10, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}

                        //if (tabControl1.SelectedIndex.ToString() == "10")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt11, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt11, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "11")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt12, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt12, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "12")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt13, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt13, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "13")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt14, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt14, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "14")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt15, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt15, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "15")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt16, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt16, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }

                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "16")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt17, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt17, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "17")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt18, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt18, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "18")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt19, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt19, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "19")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt20, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt20, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "20")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt21, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt21, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "21")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt22, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt22, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "22")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt23, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt23, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "23")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt24, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt24, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //}
                        //if (tabControl1.SelectedIndex.ToString() == "24")
                        //{

                        //    {
                        //        if (type == "opos")
                        //        {
                        //            for (int i = 0; i < totalprints(); i++)
                        //            {
                        //                PrintReceipt(dt25, cname, date, cashr, Convert.ToDouble(recvd), Convert.ToDouble(chng), saleid.ToString(), saletype, total, gst, txtdiscountamount.Text, gstperc, txtdiscount.Text, nettotal, otype);
                        //            }
                        //        }
                        //        else
                        //        {
                        //            bindreport(dt25, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng);
                        //        }

                        //    }


                        //} 
                        #endregion
                    }
                }
            }
        }
        public void dayend(string uid, string status)
        {
            try
            {
                if (status == "Day Start")
                {

                    int id = 1;
                    DataSet dsdayend = new DataSet();
                    dsdayend = objCore.funGetDataSet("select max(id) as id from dayend ");
                    if (dsdayend.Tables[0].Rows.Count > 0)
                    {
                        string i = dsdayend.Tables[0].Rows[0][0].ToString();
                        if (i == string.Empty)
                        {
                            i = "0";
                        }
                        id = Convert.ToInt32(i) + 1;

                    }
                    else
                    {

                    }
                    date = DateTime.Now.ToString("yyyy-MM-dd");
                    string q = "Insert into dayend (Id,Date,DayStatus,UserId) values ('" + id + "','" + DateTime.Now.ToString("yyyy-MM-dd") + "','Open','" + uid + "')";
                    objCore.executeQuery(q);
                    MessageBox.Show("Day Started Successfully");
                    daystatus = "Day End";
                }
                if (status == "Day End")
                {
                    string q = "update dayend set DayStatus='Close' where userid='" + uid + "'";
                    objCore.executeQuery(q);
                    MessageBox.Show("Day Ended Successfully");
                    Application.Exit();
                    daystatus = "Day Start";
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        private void vBtnday_Click(object sender, EventArgs e)
        {
            bool chk = false;
            DataSet dsdayend = new DataSet();
            dsdayend = objCore.funGetDataSet("select id from sale where billstatus='pending' and date='" + date + "' and userid='" + userid + "'");
            if (dsdayend.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < dsdayend.Tables[0].Rows.Count; i++)
                {
                    ds = new DataSet();
                    ds = objCore.funGetDataSet("select Status from saledetails where saleid='" + dsdayend.Tables[0].Rows[i]["id"].ToString() + "'");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                        {
                            if (ds.Tables[0].Rows[j]["Status"].ToString() == "Not Void")
                            {
                                chk = true;
                            }
                        }
                    }
                }
                if (chk == true)
                {
                    MessageBox.Show("There are Pending Bills. Please Clear Pending Orders Before Logout");
                    return;
                }
            }
            DialogResult res = MessageBox.Show("Are You Sure to Continue ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (res == DialogResult.Yes)
            {
                POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
                ob.editmode = daystatus;
                ob.id = userid;
                ob.Show();
            }
        }

        private void vButton10_Click(object sender, EventArgs e)
        {
            if (saleid > 0)
            {
                POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
                ob.editmode = "disI";
                ob.id = userid;
                ob.datee = date;
                // this.Enabled = false;
                ob.Show();
            }
        }
        private void vButton18_Click(object sender, EventArgs e)
        {
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "SaleReport";
            ob.id = userid;
            ob.cashrr = cashr;
            ob.datee = date;
            // this.Enabled = false;
            ob.Show();
            //POSRestaurant.Reports.RptUserSale obj = new Reports.RptUserSale();
            //obj.cashiername = cashr;
            //obj.date = date;
            //obj.userid = userid;
            //obj.Show();
        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void richTextBox1_TextChanged(object sender, EventArgs e)
        {

        }

        private void txttotal_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

            //if (txtcashrecvd.Text == string.Empty)
            //{ }
            //else
            //{
            //    float Num;
            //    bool isNum = float.TryParse(txtcashrecvd.Text.ToString(), out Num); //c is your variable
            //    if (isNum)
            //    {

            //    }
            //    else
            //    {

            //        MessageBox.Show("Invalid Value. Only Nymbers are allowed");
            //        return;
            //    }
            //}
            //try
            //{
            //    txtchange.Text = ((Convert.ToDouble(txtcashrecvd.Text.Trim()) - (Convert.ToDouble(txtnettotal.Text.Trim())))).ToString();
            //    obcustomerdisplay.changtext(txtcashrecvd.Text);
            //}
            //catch (Exception ex)
            //{

            //    //MessageBox.Show(ex.Message);
            //}
        }

        private void textBox1_TextChanged_1(object sender, EventArgs e)
        {
            if (txtdiscount.Text.Trim() == string.Empty)
            {
                txtdiscount.Text = "0";
            }
            if (float.Parse(txtdiscount.Text.Trim()) > 100)
            {
                txtdiscount.Text = "100";
            }
            if (txtdiscount.Text == string.Empty)
            { }
            else
            {
                float Num;
                bool isNum = float.TryParse(txtdiscount.Text.ToString(), out Num); //c is your variable
                if (isNum)
                {

                }
                else
                {

                    MessageBox.Show("Invalid Discount Value. Only Nymbers are allowed");
                    return;
                }
            }
            // gettotal();
            try
            {
                obcustomerdisplay.changtxtdscount(txtdiscount.Text);
            }
            catch (Exception ex)
            {


            }
        }

        private void txtcashrecvd_Enter(object sender, EventArgs e)
        {
            focusedTextbox = (TextBox)sender;
        }

        private void txtdiscount_Enter(object sender, EventArgs e)
        {
            focusedTextbox = (TextBox)sender;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            if (focusedTextbox.Text != null)
            {
                focusedTextbox.Text = focusedTextbox.Text.Substring(0, focusedTextbox.Text.Length - 1);
                if (focusedTextbox.Text == string.Empty)
                {
                    focusedTextbox.Text = "0";
                }
            }
        }

        private void button51_Click(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            focusedTextbox = null;
            txtdiscount.Text = "0";
            //txtcashrecvd.Text = "0";
        }

        private void vButton13_Click(object sender, EventArgs e)
        {
            //bindreportsample("Cash", saleid.ToString());
            bindreportsample("Cash", saleid.ToString(), "", "Order Type", txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text);
        }

        private void vButton11_Click(object sender, EventArgs e)
        {
            //n GenerateMyQCCode("1234");
            string q = "select id,kdsid from menuitem where name like 'Open Item'";
            DataSet dsm = new DataSet();
            dsm = objCore.funGetDataSet(q);
            if (dsm.Tables[0].Rows.Count > 0)
            {
                string id = dsm.Tables[0].Rows[0][0].ToString();
                openitem obj = new openitem(this);
                obj.id = id;
                obj.kdid = dsm.Tables[0].Rows[0][1].ToString();
                obj.Show();
            }
        }

        private void tableLayoutPanelmenugroup_Paint(object sender, PaintEventArgs e)
        {

        }

        private void tableLayoutPanelmenuitem_Paint(object sender, PaintEventArgs e)
        {
            this.DoubleBuffered = true;

        }

        private void vButton16_Click(object sender, EventArgs e)
        {
            Members obj = new Members(this);
            obj.Show();
        }

        private void txtchange_TextChanged(object sender, EventArgs e)
        {

        }

        private void vButton15_Click_1(object sender, EventArgs e)
        {


            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "Cash Transaction";
            ob.id = date;
            ob.Show();

        }

        private void vButton20_Click(object sender, EventArgs e)
        {

            //TabltOrders obj = new TabltOrders(this);
            //obj.Show();
        }

        private void vButton28_Click(object sender, EventArgs e)
        {
            try
            {
                vButton btn = (sender) as vButton;
                if (focusedTextbox != null)
                {
                    if (focusedTextbox.Text == "0")
                    {
                        focusedTextbox.Text = btn.Text;
                    }
                    else
                    {
                        focusedTextbox.Text = focusedTextbox.Text + btn.Text;
                    }
                    return;
                }
                if (quantity == 0)
                {
                    calculateqty = btn.Text;
                }
                else
                {
                    calculateqty = quantity.ToString() + btn.Text;

                }
                quantity = Convert.ToInt32(calculateqty);
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }

        private void vButton31_Click(object sender, EventArgs e)
        {
            focusedTextbox = null;
            txtdiscount.Text = "0";
            //txtcashrecvd.Text = "0";
        }

        private void vButton32_Click(object sender, EventArgs e)
        {
            if (focusedTextbox.Text != null)
            {
                focusedTextbox.Text = focusedTextbox.Text.Substring(0, focusedTextbox.Text.Length - 1);
                if (focusedTextbox.Text == string.Empty)
                {
                    focusedTextbox.Text = "0";
                }
            }
        }
        DataTable tblvoidlist = new DataTable();
        private void vButton13_Click_1(object sender, EventArgs e)
        {
            tblvoidlist = new DataTable();
            tblvoidlist.Columns.Add("id",typeof(string));
            this.TopMost = false;
            bool chk = false;
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        foreach (DataGridViewRow r in grid.SelectedRows)
                        {
                            int indx = r.Index;
                            string Id = r.Cells[0].Value.ToString();
                            string type = r.Cells[5].Value.ToString();
                            if (type == "New")
                            {

                                string temp = r.Cells["qty"].Value.ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                float qnty = float.Parse(temp);
                                temp = r.Cells["price"].Value.ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                double price = double.Parse(temp);
                                if (qnty > 1)
                                {
                                    if (qnty > 0)
                                    {
                                        price = price / qnty;
                                    }
                                    qnty = qnty - 1;
                                    if (qnty >= 1)
                                    {
                                        price = price * qnty;

                                        tbl.Rows[indx]["price"] = price;
                                    }
                                    tbl.Rows[indx]["qty"] = qnty.ToString();
                                    tbl.Rows[indx]["price"] = price;
                                }
                                else
                                {
                                    DataRow dgr = tbl.Rows[indx];
                                    dgr.Delete();
                                }

                            }
                            else
                            {
                                string sid = r.Cells["SaleDetailid"].Value.ToString();
                                tblvoidlist.Rows.Add(sid);
                                chk = true;
                            }
                        }
                        if (chk == true)
                        {
                            RestAllowDiscount obj = new RestAllowDiscount(this);
                            obj.editmode = "void";
                           
                            obj.Show();
                        }
                        //int indx = grid.CurrentCell.RowIndex;
                        //string Id = grid.Rows[indx].Cells[0].Value.ToString();
                        //string type = grid.Rows[indx].Cells[5].Value.ToString();
                        //if (type == "New")
                        //{

                        //    string temp = grid.Rows[indx].Cells["qty"].Value.ToString();
                        //    if (temp == "")
                        //    {
                        //        temp = "0";
                        //    }
                        //    float qnty = float.Parse(temp);
                        //    temp = grid.Rows[indx].Cells["price"].Value.ToString();
                        //    if (temp == "")
                        //    {
                        //        temp = "0";
                        //    }
                        //    double price = double.Parse(temp);
                        //    if (qnty > 1)
                        //    {
                        //        if (qnty > 0)
                        //        {
                        //            price = price / qnty;
                        //        }
                        //        qnty = qnty - 1;
                        //        if (qnty >= 1)
                        //        {
                        //            price = price * qnty;

                        //            tbl.Rows[indx]["price"] = price;
                        //        }
                        //        tbl.Rows[indx]["qty"] = qnty.ToString();
                        //        tbl.Rows[indx]["price"] = price;
                        //    }
                        //    else
                        //    {
                        //        DataRow dgr = tbl.Rows[indx];
                        //        dgr.Delete();
                        //    }

                        //if (dr.Cells["id"].Value.ToString() == Id)
                        //{
                        //    dgr.Delete();
                        //}
                        //}
                        //else
                        //{
                        //    string sid = grid.Rows[indx].Cells["SaleDetailid"].Value.ToString();
                        //    RestAllowDiscount obj = new RestAllowDiscount(this);
                        //    obj.editmode = "void";
                        //    obj.id = sid;
                        //    obj.Show();
                        //}


                    }
                }

            }
            catch (Exception ex)
            {


            }
            gettotal();
        }
        public void callvoiditems(string reason)
        {
            foreach (DataRow dr in tblvoidlist.Rows)
            {
                voiditems(dr[0].ToString(), reason);
            }
        }
        protected string getreopentime(string id)
        {
            DataSet dds = new DataSet();
            string time = "";
            try
            {
                string q = "select top 1 * from ReopenLog where saleid='" + id + "' order by id desc";


                dds = objCore.funGetDataSet(q);
                if (dds.Tables[0].Rows.Count > 0)
                {
                    time = dds.Tables[0].Rows[0]["time"].ToString();
                }
            }
            catch (Exception ex)
            {

            }
            finally
            {
                dds.Dispose();
            }
            return time;
        }
        public void voiditems(string sid, string reason)
        {
            try
            {
                TabPage page = tabControl1.SelectedTab;
                
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        int i = 0;
                        foreach (DataGridViewRow dr in grid.Rows)
                        {
                            try
                            {
                                DataRow dgr = tbl.Rows[i];
                                if (dr.Cells["SaleDetailid"].Value.ToString() == sid)
                                {
                                    DataTable dtkitchn = new DataTable();
                                    dtkitchn.Columns.Add("id", typeof(string));
                                    dtkitchn.Columns.Add("name", typeof(string));
                                    dtkitchn.Columns.Add("price", typeof(string));
                                    dtkitchn.Columns.Add("qty", typeof(string));
                                    dtkitchn.Columns.Add("SaleType", typeof(string));
                                    
                                    string temp = dr.Cells["qty"].Value.ToString();

                                    if (temp == "")
                                    {
                                        temp = "0";
                                    }
                                    float qnty = float.Parse(temp);
                                    temp = dr.Cells["price"].Value.ToString();
                                    if (temp == "")
                                    {
                                        temp = "0";
                                    }
                                    double price = double.Parse(temp);
                                    if (qnty > 1)
                                    {
                                        dtkitchn.Rows.Add(dr.Cells["id"].Value.ToString(), dr.Cells["Item"].Value.ToString(), dr.Cells["price"].Value.ToString(), "1", "Void");


                                        if (qnty > 0)
                                        {
                                            price = price / qnty;
                                        }
                                        qnty = qnty - 1;
                                        if (qnty >= 1)
                                        {
                                            price = price * qnty;

                                            dr.Cells["price"].Value = price;
                                        }
                                        dr.Cells["qty"].Value = qnty.ToString();
                                        dr.Cells["price"].Value = price;

                                        string q = "";

                                        q = "INSERT INTO Saledetailsrefund (Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) SELECT     Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId,Quantity- (Quantity-1),round( (Price/Quantity),2), BarnchCode, Status, comments, Orderstatus, branchid,  round( (Itemdiscount/Quantity),2),                       ItemdiscountPerc,  round( (ItemGst/Quantity),2), ItemGstPerc FROM         Saledetails WHERE     (id = '" + sid + "')";

                                        objCore.executeQuery(q);
                                        q = "update sale set uploadstatusserver='Pending',uploadstatus='Pending',uploadstatusbilltype='Pending',uploadstatusrefund='Pending' where id='" + saleid + "'";
                                        objCore.executeQuery(q);
                                        

                                        string type = "";
                                        if (page.Name == "Previous")
                                        {
                                            try
                                            {
                                                q = "select * from Saledetails WHERE     (id = '" + sid + "')";
                                                DataSet dsrevs = new DataSet();
                                                dsrevs = objCore.funGetDataSet(q);
                                                if (dsrevs.Tables[0].Rows.Count > 0)
                                                {
                                                    if (dsrevs.Tables[0].Rows[0]["Flavourid"].ToString() == "0")
                                                    {
                                                        if (dsrevs.Tables[0].Rows[0]["ModifierId"].ToString() == "0")
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -1,"");
                                                            }
                                                            else
                                                            {
                                                                recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), -1, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -1,"");
                                                            }
                                                            else
                                                            {
                                                                recipiemodifier(dsrevs.Tables[0].Rows[0]["ModifierId"].ToString(), -1);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), -1, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {


                                            }


                                            type = "Refund";
                                        }
                                        else
                                        {
                                            type = "Void";
                                        }
                                        DateTime reopentime = DateTime.Now.AddHours(1);

                                        try
                                        {
                                            reopentime = Convert.ToDateTime(getreopentime(saleid.ToString()));
                                        }
                                        catch (Exception ex)
                                        {


                                        }
                                        if (reopentime < DateTime.Now)
                                        {
                                            type = "Refund";
                                        }
                                        q = "update Saledetailsrefund set reason='" + reason + "',date='" + date + "',type='" + type + "',time='" + DateTime.Now + "' where id='" + sid + "'";
                                        objCore.executeQuery(q);
                                        gettotal();
                                        sale("Cash", "", tabControl1.SelectedTab.Text);
                                        //q = "update  Saledetails set quantity=quantity-1,price='" + price + "'  where id='" + sid + "'";
                                        //objCore.executeQuery(q);
                                        q = "select saleid from Saledetails where id='" + sid + "'";
                                        DataSet dsss = new DataSet();
                                        dsss = objCore.funGetDataSet(q);
                                        if (dsss.Tables[0].Rows.Count > 0)
                                        {
                                            string gsttype = "";
                                            try
                                            {
                                                if (rdcard.Checked == true)
                                                {
                                                    gst = gstvisa;
                                                    gstperc = gstpercvisa;
                                                    gsttype = "Card";
                                                }
                                                else
                                                {
                                                    gst = gstcash;
                                                    gstperc = gstperccash;
                                                    gsttype = "Cash";
                                                }

                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                            updatesales(dsss.Tables[0].Rows[0][0].ToString(), "previous",gsttype);
                                        }
                                        q = "delete from DiscountIndividual where Saledetailsid='" + sid + "'";
                                        objCore.executeQuery(q);
                                        sendtokotrefund("Kitchen", dtkitchn);
                                    }
                                    else
                                    {
                                        dtkitchn.Rows.Add(dr.Cells["id"].Value.ToString(), dr.Cells["Item"].Value.ToString(), dr.Cells["price"].Value.ToString(), dr.Cells["qty"].Value.ToString(), "Void");


                                        dgr.Delete();
                                        string q = "INSERT INTO Saledetailsrefund (Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) SELECT     Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount,                       ItemdiscountPerc, ItemGst, ItemGstPerc FROM         Saledetails WHERE     (id = '" + sid + "')";
                                        objCore.executeQuery(q);
                                        q = "update sale set uploadstatusserver='Pending',uploadstatus='Pending',uploadstatusbilltype='Pending',uploadstatusrefund='Pending' where id='" + saleid + "'";
                                        objCore.executeQuery(q);
                                        //q = "update Saledetailsrefund set reason='" + reason + "',date='" + date + "' where id='" + sid + "'";
                                        string type = "";
                                        if (page.Name == "Previous")
                                        {
                                            type = "Refund";
                                        }
                                        else
                                        {
                                            type = "Void";
                                        }
                                        DateTime reopentime = DateTime.Now.AddHours(1);

                                        try
                                        {
                                            reopentime = Convert.ToDateTime(getreopentime(saleid.ToString()));
                                        }
                                        catch (Exception ex)
                                        {


                                        }
                                        if (reopentime < DateTime.Now)
                                        {
                                            type = "Refund";
                                        }
                                        q = "update Saledetailsrefund set reason='" + reason + "',date='" + date + "',type='" + type + "',time='" + DateTime.Now + "' where id='" + sid + "'";
                                        objCore.executeQuery(q);
                                        gettotal();
                                        q = "select saleid from Saledetails where id='" + sid + "'";
                                        DataSet dsss = new DataSet();
                                        dsss = objCore.funGetDataSet(q);
                                        if (dsss.Tables[0].Rows.Count > 0)
                                        {
                                            string gsttype = "";
                                            try
                                            {
                                                if (rdcard.Checked == true)
                                                {
                                                    gst = gstvisa;
                                                    gstperc = gstpercvisa;
                                                    gsttype = "Card";
                                                }
                                                else
                                                {
                                                    gst = gstcash;
                                                    gstperc = gstperccash;
                                                    gsttype = "Cash";
                                                }

                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                            updatesales(dsss.Tables[0].Rows[0][0].ToString(), "previous",gsttype);
                                        }

                                        if (page.Name == "Previous")
                                        {
                                            try
                                            {
                                                q = "select * from Saledetails WHERE     (id = '" + sid + "')";
                                                DataSet dsrevs = new DataSet();
                                                dsrevs = objCore.funGetDataSet(q);
                                                if (dsrevs.Tables[0].Rows.Count > 0)
                                                {
                                                    if (dsrevs.Tables[0].Rows[0]["Flavourid"].ToString() == "0")
                                                    {
                                                        if (dsrevs.Tables[0].Rows[0]["ModifierId"].ToString() == "0")
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -1,"");
                                                            }
                                                            else
                                                            {
                                                                recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), -1, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -1,"");
                                                            }
                                                            else
                                                            {
                                                                recipiemodifier(dsrevs.Tables[0].Rows[0]["ModifierId"].ToString(), -1);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), Convert.ToInt32(dsrevs.Tables[0].Rows[0]["Quantity"].ToString()) * -1, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                            type = "Refund";
                                        }
                                        
                                        q = "delete from Saledetails where id='" + sid + "'";
                                        objCore.executeQuery(q);
                                        q = "delete from DiscountIndividual where Saledetailsid='" + sid + "'";
                                        objCore.executeQuery(q);
                                        sendtokotrefund("Kitchen", dtkitchn);
                                    }

                                }

                            }
                            catch (Exception ex)
                            {

                            }
                            i++;
                        }
                    }
                }

            }
            catch (Exception ex)
            {


            }
            gettotal();
        }
        public void voidAllitems(string sid, string reason)
        {
            try
            {
                TabPage page = tabControl1.SelectedTab;

                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        int i = 0;
                        foreach (DataGridViewRow dr in grid.Rows)
                        {
                            try
                            {
                                DataRow dgr = tbl.Rows[i];
                                if (dr.Cells["SaleDetailid"].Value.ToString() == sid)
                                {
                                    DataTable dtkitchn = new DataTable();
                                    dtkitchn.Columns.Add("id", typeof(string));
                                    dtkitchn.Columns.Add("name", typeof(string));
                                    dtkitchn.Columns.Add("price", typeof(string));
                                    dtkitchn.Columns.Add("qty", typeof(string));
                                    dtkitchn.Columns.Add("SaleType", typeof(string));
                                    dtkitchn.Rows.Add(dr.Cells["id"].Value.ToString(), dr.Cells["Item"].Value.ToString(), dr.Cells["price"].Value.ToString(), dr.Cells["qty"].Value.ToString(), "Void");

                                    string temp = dr.Cells["qty"].Value.ToString();

                                    if (temp == "")
                                    {
                                        temp = "0";
                                    }
                                    float qnty = float.Parse(temp);
                                    temp = dr.Cells["price"].Value.ToString();
                                    if (temp == "")
                                    {
                                        temp = "0";
                                    }
                                    double price = double.Parse(temp);
                                    
                                        dgr.Delete();
                                        string q = "INSERT INTO Saledetailsrefund (Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount, ItemdiscountPerc, ItemGst, ItemGstPerc) SELECT     Id, saleid, MenuItemId, Flavourid, ModifierId, RunTimeModifierId, Quantity, Price, BarnchCode, Status, comments, Orderstatus, branchid, Itemdiscount,                       ItemdiscountPerc, ItemGst, ItemGstPerc FROM         Saledetails WHERE     (id = '" + sid + "')";
                                        objCore.executeQuery(q);
                                        q = "update sale set uploadstatusserver='Pending',uploadstatus='Pending',uploadstatusbilltype='Pending',uploadstatusrefund='Pending' where id='" + saleid + "'";
                                        objCore.executeQuery(q);
                                        //q = "update Saledetailsrefund set reason='" + reason + "',date='" + date + "' where id='" + sid + "'";
                                        string type = "";
                                        if (page.Name == "Previous")
                                        {
                                            type = "Refund";
                                        }
                                        else
                                        {
                                            type = "Void";
                                        }
                                        DateTime reopentime = DateTime.Now.AddHours(1);

                                        try
                                        {
                                            reopentime = Convert.ToDateTime(getreopentime(saleid.ToString()));
                                        }
                                        catch (Exception ex)
                                        {


                                        }
                                        if (reopentime < DateTime.Now)
                                        {
                                            type = "Refund";
                                        }
                                        q = "update Saledetailsrefund set reason='" + reason + "',date='" + date + "',type='" + type + "',time='" + DateTime.Now + "' where id='" + sid + "'";
                                        objCore.executeQuery(q);
                                        gettotal();
                                        q = "select saleid from Saledetails where id='" + sid + "'";
                                        DataSet dsss = new DataSet();
                                        dsss = objCore.funGetDataSet(q);
                                        if (dsss.Tables[0].Rows.Count > 0)
                                        {
                                            string gsttype = "";
                                            try
                                            {
                                                if (rdcard.Checked == true)
                                                {
                                                    gst = gstvisa;
                                                    gstperc = gstpercvisa;
                                                    gsttype = "Card";
                                                }
                                                else
                                                {
                                                    gst = gstcash;
                                                    gstperc = gstperccash;
                                                    gsttype = "Cash";
                                                }

                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                            updatesales(dsss.Tables[0].Rows[0][0].ToString(), "previous", gsttype);
                                        }

                                        if (page.Name == "Previous")
                                        {
                                            try
                                            {
                                                q = "select * from Saledetails WHERE     (id = '" + sid + "')";
                                                DataSet dsrevs = new DataSet();
                                                dsrevs = objCore.funGetDataSet(q);
                                                if (dsrevs.Tables[0].Rows.Count > 0)
                                                {
                                                    if (dsrevs.Tables[0].Rows[0]["Flavourid"].ToString() == "0")
                                                    {
                                                        if (dsrevs.Tables[0].Rows[0]["ModifierId"].ToString() == "0")
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -qnty,"");
                                                            }
                                                            else
                                                            {
                                                                recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), -qnty, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString() != "0")
                                                            {
                                                                recipiemodifierruntime(dsrevs.Tables[0].Rows[0]["RunTimeModifierId"].ToString(), -qnty,"");
                                                            }
                                                            else
                                                            {
                                                                recipiemodifier(dsrevs.Tables[0].Rows[0]["ModifierId"].ToString(), -qnty);
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {

                                                        recipie(dsrevs.Tables[0].Rows[0]["MenuItemId"].ToString(), Convert.ToInt32(dsrevs.Tables[0].Rows[0]["Quantity"].ToString()) * -qnty, dsrevs.Tables[0].Rows[0]["Flavourid"].ToString(), "");
                                                    }
                                                }
                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                            type = "Refund";
                                        }

                                        q = "delete from Saledetails where id='" + sid + "'";
                                        objCore.executeQuery(q);
                                        q = "delete from DiscountIndividual where Saledetailsid='" + sid + "'";
                                        objCore.executeQuery(q);
                                        sendtokotrefund("Kitchen", dtkitchn);
                                    }
                            }
                            catch (Exception ex)
                            {

                            }
                            i++;
                        }
                    }
                }

            }
            catch (Exception ex)
            {


            }
            gettotal();
        }
        public void partialreport(string type, string cardno)
        {
            // bindreport(type, saleid.ToString(), cardno);
            //bindreport("Cash", saleid.ToString(), cardno, "Order Type", txttotal.Text.Trim(), txtnettotal.Text.Trim(), txtdiscount.Text.Trim(), lblgst.Text);
        }
        public void calbilltype(string type, string amount)
        {
            billtype(saleid.ToString(), type, amount, "0");
        }
        public void partialsale()
        {
            try
            {

                //if (txtcashrecvd.Text == string.Empty || txtcashrecvd.Text == "0")
                //{
                //    txtcashrecvd.Text = txtnettotal.Text;
                //    txtchange.Text = "0";
                //}
                sale("", "Order Type", "");

                {


                }
                string gsttype = "";
                try
                {
                    if (rdcard.Checked == true)
                    {
                        gst = gstvisa;
                        gstperc = gstpercvisa;
                        gsttype = "Card";
                    }
                    else
                    {
                        gst = gstcash;
                        gstperc = gstperccash;
                        gsttype = "Cash";
                    }

                }
                catch (Exception ex)
                {


                }
                updatesales(saleid.ToString(), "Cash",gsttype);

                //recalsale(saleid.ToString());
                //bindreport("Cash", saleid.ToString(), "");
                dtcopy = new DataTable();
                dtcopy = dt.Copy();
                // if (lblordertype.Text != "Din In")
                {

                    System.Threading.Thread kotThread = new System.Threading.Thread(() => bindreportkitchen(saleid.ToString(), "", "Order Type", takeawayid));
                    // Start the thread
                    kotThread.Start();
                    //bindreportkitchen(saleid.ToString(), "");
                }
                if (tablettableno != "")
                {
                    updatetabletorder();
                    tablettableno = "";
                }

                //lblordertype.Text = "Not Selected";
                dt.Rows.Clear();
                dataGridView1.Refresh();
                clear();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }


            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void partialclear()
        {
            string gsttype = "";
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                    gsttype = "Card";
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                    gsttype = "Cash";
                }

            }
            catch (Exception ex)
            {


            }
            updatesales(editsale, "Cash",gsttype);
            //lblordertype.Text = "Not Selected";
            dt.Rows.Clear();
            dataGridView1.Refresh();
            clear();
            try
            {
                obcustomerdisplay.clear();
            }
            catch (Exception ex)
            {


            }
            editsale = string.Empty;
        }
        private void vButton15_Click_2(object sender, EventArgs e)
        {
            TabletOrders obj = new TabletOrders(this);
            obj.Show();
            //try
            //{
            //    if (dataGridView1.Rows.Count <= 0)
            //    {
            //        return;
            //    }
            //    PartialPayment obj = new PartialPayment(this);
            //    obj.total = Convert.ToDouble(txtnettotal.Text);
            //    obj.Show();
            //}
            //catch (Exception ex)
            //{

            //    MessageBox.Show(ex.Message);
            //}
        }
        private void vButton18_Click_1(object sender, EventArgs e)
        {
            this.TopMost = false;
            if (chkruntime == true)
            {
                if (runtimeremaining < Convert.ToInt32(modifiercount))
                {
                    MessageBox.Show("Please Add Total " + modifiercount + " Drinks/Modifier");
                    return;
                }
            }
            string gsttype = "";
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                    gsttype = "Card";
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                    gsttype = "Cash";
                }
                
            }
            catch (Exception ex)
            {


            }
            // gettotal();
            if (saleid == 0)
            {
                string saletype = "";
                if (editsale == string.Empty)
                {
                    saletype = "New";
                    //vButton9.Enabled = false;
                }
                else
                {
                    saletype = "Old";
                }
                if (saleid == 0)
                {
                    saletype = "New";

                }
                else
                {
                    saletype = "Old";
                }
                if (saletype == "New")
                {
                    if (tabControl1.SelectedTab.Name.Contains("tab") || tabControl1.SelectedTab.Name == "")
                    {
                        saletype = "New";
                    }
                    else
                    {

                        saletype = "Old";
                        saleid = Convert.ToInt32(tabControl1.SelectedTab.Name.ToString());
                        // arraysalid(saleid.ToString());
                    }
                }

            }
            if (saleid == 0)
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            //if (txtdiscount.Text == "100")
                            //{
                            //    DialogResult dr = MessageBox.Show("Do you want to proceed with 100 % Discount", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            //    if (dr == DialogResult.Yes)
                            //    {
                            //        POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
                            //        obj.total = txtnettotal.Text;
                            //        obj.Show();
                            //    }
                            //}
                            //else
                            {


                                if (getselectordertype().ToLower() == "yes")
                                {
                                    NewBillTypenew obj = new Sale.NewBillTypenew(this);
                                    obj.total = txtnettotal.Text;
                                    obj.saleid = saleid.ToString();
                                    obj.advance = txtadvanc.Text;
                                    obj.name = tabControl1.SelectedTab.Text;
                                    obj.date = date;
                                    obj.Show();
                                }
                                else if (getselectordertype().ToLower() == "never")
                                {
                                    Sale.SaleAfter ob = new Sale.SaleAfter(this);
                                    ob.total = txtnettotal.Text;
                                    ob.gsttype = gsttype;
                                    ob.id = saleid.ToString();
                                    ob.advance = txtadvanc.Text;
                                    ob.name = tabControl1.SelectedTab.Text;
                                    ob.type = getordertype();
                                    string btype="";
                                    if(rdcard.Checked==true)
                                    {
                                        btype="card";
                                    }
                                    else
                                    {
                                        btype="cash";
                                    }
                                    ob.billtype = btype;
                                    ob.phone = getphone();
                                    ob.Show();
                                }
                                else
                                {
                                    POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
                                    obj.total = txtnettotal.Text;
                                    obj.Show();
                                }
                            }
                        }
                        else
                        {
                            return;
                        }

                    }
                }
            }
            else
            {
                //vButton18.Text = "Please Wait";
                //vButton18.Enabled = false;
                try
                {
                    bool checknew = false;
                    int count = tabControl1.TabCount;
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;
                            if (grid.Rows.Count > 0)
                            {
                                if (addon == "new")
                                {
                                    checknew = true;
                                }
                                //foreach (DataGridViewRow dgr in grid.Rows)
                                //{
                                //    if (dgr.Cells["SaleType"].Value.ToString().ToLower() == "new")
                                //    {
                                //        checknew = true;
                                //    }
                                //}
                            }
                            if (checknew == true)
                            {
                                updateorder("");
                                addon = "Old";
                            }
                            else
                            {
                                if (shiftid == "" || shiftid == "0")
                                {
                                    DataSet dsgst = new DataSet();
                                    try
                                    {
                                        dsgst = new DataSet();
                                        dsgst = objCore.funGetDataSet("select top(1) * from ShiftStart where date='" + date + "' and status='Open' and Terminal='" + System.Environment.MachineName.ToString() + "'  order by id desc");
                                        if (dsgst.Tables[0].Rows.Count > 0)
                                        {
                                            shiftid = dsgst.Tables[0].Rows[0]["shiftid"].ToString();

                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                        // MessageBox.Show(ex.Message);
                                    }
                                    finally
                                    {
                                        dsgst.Dispose();
                                    }
                                }
                                if (shiftid.Trim().ToString() == "" || shiftid == "0")
                                {
                                    MessageBox.Show("Please Start Shift First");
                                    return;
                                }

                                try
                                {
                                    if (tabControl1.SelectedTab.Name == "Previous")
                                    {
                                        return;
                                    }

                                    {
                                        DataSet dsbill = new DataSet();
                                        try
                                        {
                                            string q = "select BillStatus from sale where id='" + saleid + "' and billstatus='Paid'";

                                            dsbill = objCore.funGetDataSet(q);
                                            if (dsbill.Tables[0].Rows.Count > 0)
                                            {

                                                if (tabControl1.TabCount > 1)
                                                {
                                                    saleid = 0;
                                                    tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                                                }
                                                else
                                                {
                                                    //TabPage page1 = tabControl1.SelectedTab;
                                                    //var controls1 = page1.Controls;
                                                    //foreach (var control in controls1)
                                                    {
                                                        //if (control is DataGridView)
                                                        {
                                                            tabControl1.SelectedTab.Name = "";
                                                            tabControl1.SelectedTab.Text = "";

                                                            DataTable tbl = grid.DataSource as DataTable;
                                                            tbl.Clear();
                                                            saleid = 0;
                                                        }
                                                    };
                                                }
                                                return;
                                            }
                                        }
                                        catch (Exception ex)
                                        {


                                        }
                                        finally
                                        {
                                            dsbill.Dispose();
                                        }
                                    }
                                    int count1 = 0;
                                    string term = "";
                                    try
                                    {
                                        DataSet dscashout = new DataSet();
                                        string q = "select status from Cashout where terminal='" + System.Environment.MachineName.ToString() + "'";
                                        dscashout = objCore.funGetDataSet(q);
                                        count1 = dscashout.Tables[0].Rows.Count;
                                        term = dscashout.Tables[0].Rows[0][0].ToString();
                                    }
                                    catch (Exception ex)
                                    {


                                    }

                                    if (count1 > 0)
                                    {
                                        if (term == "no")
                                        {
                                            MessageBox.Show("You Can not Cash out from this terminal");
                                            return;
                                        }
                                        else
                                        {
                                            Sale.SaleAfter obj = new Sale.SaleAfter(this);
                                            obj.total = txtnettotal.Text;
                                            obj.gsttype = gsttype;
                                            obj.id = saleid.ToString();
                                            obj.advance = txtadvanc.Text;
                                            obj.name = tabControl1.SelectedTab.Text;
                                            obj.type = getordertype();
                                            obj.phone = getphone();
                                            string btype = "";
                                            if (rdcard.Checked == true)
                                            {
                                                btype = "card";
                                            }
                                            else
                                            {
                                                btype = "cash";
                                            }
                                            obj.billtype = btype;
                                            obj.Show();
                                        }
                                    }
                                    else
                                    {
                                        Sale.SaleAfter obj = new Sale.SaleAfter(this);
                                        obj.total = txtnettotal.Text;
                                        obj.gsttype = gsttype;
                                        obj.id = saleid.ToString();
                                        obj.advance = txtadvanc.Text;
                                        obj.name = tabControl1.SelectedTab.Text;
                                        obj.type = getordertype();
                                        string btype = "";
                                        if (rdcard.Checked == true)
                                        {
                                            btype = "card";
                                        }
                                        else
                                        {
                                            btype = "cash";
                                        }

                                        try
                                        {
                                            DataSet dsDelv = new DataSet();
                                            string qs = "select deliveryAmt from Sale where Id=" + saleid;
                                            dsDelv = objCore.funGetDataSet(qs);


                                            if (dsDelv.Tables[0].Rows.Count > 0)
                                            {
                                             double   DelvAmt = Convert.ToDouble(dsDelv.Tables[0].Rows[0]["deliveryAmt"]);
                                                if (DelvAmt > 0)
                                                {

                                                    obj.total = (Convert.ToDouble(txtnettotal.Text) + Convert.ToDouble(DelvAmt)).ToString();

                                                }
                                            }
                                        }
                                        catch (Exception ex)
                                        {

                                        }
//                                        try
//                                        {
//                                       DataSet dsdelv = new DataSet();
//                                        string qs = "select deliveryamt from sale where id=" + saleid;
//                                        dsdelv = objcore.fungetdataset(qs);


//                                            if (dsdelv.tables[0].rows.count > 0)
//                                            {
//                                               double delvamt = convert.todouble(dsdelv.tables[0].rows[0]["deliveryamt"]);
//                                                if (delvamt > 0)
//                                                {
//                                                    obj.total = (convert.todouble(txtnettotal.text) + convert.todouble(delvamt)).ToString();
//;

//                                                    //string q = "select sale set deliveryamt = " + delvamt + "  where id=" + saleid;
//                                                    //objcore.executequery(q);

//                                                }
//                                            }
//                                        }
//                                        catch (exception ex)
//                                        {

//                                        }


                                        obj.billtype = btype;
                                        obj.phone = getphone();
                                        obj.Show();
                                    }
                                }
                                catch (Exception ex)
                                {


                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {


                }
            }
            vButton18.Enabled = true;
            vButton18.Text = "Cash Tender";
            //old
            //if (saleid == 0)
            //{
            //    int count = tabControl1.TabCount;
            //    TabPage page = tabControl1.SelectedTab;
            //    var controls = page.Controls;
            //    foreach (var control in controls)
            //    {
            //        if (control is DataGridView)
            //        {
            //            DataGridView grid = control as DataGridView;
            //            if (grid.Rows.Count > 0)
            //            {
            //                if (txtdiscount.Text == "100")
            //                {
            //                    DialogResult dr = MessageBox.Show("Do you want to proceed with 100 % Discount", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            //                    if (dr == DialogResult.Yes)
            //                    {
            //                        POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
            //                        obj.total = txtnettotal.Text;
            //                        obj.Show();
            //                    }
            //                }
            //                else
            //                {
            //                    if (getselectordertype().ToLower() == "yes")
            //                    {
            //                        NewBillType obj = new Sale.NewBillType(this);
            //                        obj.total = txtnettotal.Text;
            //                        obj.saleid = saleid.ToString();
            //                        obj.advance = txtadvanc.Text;
            //                        obj.name = tabControl1.SelectedTab.Text;
            //                        obj.Show();
            //                    }
            //                    else
            //                    {
            //                        POSRestaurant.forms.NewOrder obj = new forms.NewOrder(this);
            //                        obj.total = txtnettotal.Text;
            //                        obj.Show();
            //                    }
            //                }
            //            }
            //            else
            //            {
            //                return;
            //            }

            //        }
            //    }
            //}
            //else
            //{
            //    try
            //    {
            //        string q = "select BillStatus from sale where id='" + saleid + "' and billstatus='Paid'";
            //        DataSet dsbill = new DataSet();
            //        dsbill = objCore.funGetDataSet(q);
            //        if (dsbill.Tables[0].Rows.Count > 0)
            //        {
            //            if (tabControl1.TabCount > 1)
            //            {
            //                saleid = 0;
            //                tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
            //            }
            //            else
            //            {
            //                TabPage page1 = tabControl1.SelectedTab;
            //                var controls1 = page1.Controls;
            //                foreach (var control in controls1)
            //                {
            //                    if (control is DataGridView)
            //                    {
            //                        tabControl1.SelectedTab.Name = "";
            //                        tabControl1.SelectedTab.Text = "";
            //                        DataGridView grid = control as DataGridView;
            //                        DataTable tbl = grid.DataSource as DataTable;
            //                        tbl.Clear();
            //                        saleid = 0;
            //                    }
            //                };
            //            }
            //            return;
            //        }
            //    }
            //    catch (Exception ex)
            //    {


            //    }
            //}
        }

        //end Tander
        private void vBtnkot_Click(object sender, EventArgs e)
        {
            try
            {
                //if (lblordertype.Text == "Din In" || lblordertype.Text=="Not Selected")
                //{

                //}
                //else
                //{
                //    MessageBox.Show("Only DIN IN Orders are sent to KDS. Remaining orders are sent to kds automatically.");
                //    return;
                //}
                if (dataGridView1.Rows.Count <= 0)
                {
                    return;
                }
                //if (txtcashrecvd.Text == string.Empty || txtcashrecvd.Text == "0")
                //{
                //    txtcashrecvd.Text = txtnettotal.Text;
                //    txtchange.Text = "0";
                //}
                dtcopy = new DataTable();
                dtcopy = dt.Copy();
                sale("", "Order Type", "");
                //if (vBtnkot.Enabled == false)
                {
                    //if (lblordertype.Text == "Din In")
                    //{
                    //    // sale("", lblordertype.Text);

                    //    updateDinin(saleid);
                    //    // recalsale(saleid.ToString());
                    //}

                }

                //updatesales(editsale, "Cash");
                //billtype(saleid.ToString(), "Cash", txtnettotal.Text.Trim());
                //recalsale(saleid.ToString());
                //bindreport("Cash", saleid.ToString(), "");
                bindreportkitchen(saleid.ToString(), "", "Order Type", takeawayid);
                //SaleMessage obj = new SaleMessage(this);
                //obj.Islbltotal = txtnettotal.Text;
                //obj.Islblreceived = txtcashrecvd.Text;
                //obj.Islblchange = txtchange.Text;
                //obj.Show();
                if (tablettableno != "")
                {
                    updatetabletorder();
                    tablettableno = "";
                }
                //lblordertype.Text = "Not Selected";
                dt.Rows.Clear();
                dataGridView1.Refresh();
                clear();
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                editsale = string.Empty;
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void vButton33_Click(object sender, EventArgs e)
        {
            try
            {
                if (daystatus == "Day Start")
                {
                    MessageBox.Show("Please Start Day First");
                    return;
                }
                if (dataGridView1.Rows.Count > 0)
                {
                    MessageBox.Show("Please sale already added items");
                    return;

                }
                //txtcashrecvd.Text = "0";
                txttotal.Text = "0";
                txtnettotal.Text = "0";
                txtadvanc.Text = "";
                //txtchange.Text = "0";
                txtdiscount.Text = "0";
                txtdiscountamount.Text = "0";
                dt.Clear();
                dataGridView1.Refresh();
                editsale = string.Empty;
                try
                {
                    obcustomerdisplay.clear();
                }
                catch (Exception ex)
                {


                }
                clear();
                //lblordertype.Text = "Car Hope";
                POSRestaurant.Sale.CustomerId ob = new CustomerId(this);
                ob.id = userid;
                ob.type = "carhope";
                // this.Enabled = false;
                ob.Show();
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void vButton34_Click(object sender, EventArgs e)
        {
            if (dataGridView1.Rows.Count > 0)
            {
                bindreportsample("", saleid.ToString(), "", "Order Type", txttotal.Text, txtnettotal.Text, txtdiscountamount.Text, lblgst.Text);
                dt.Clear();
                clear();
            }
        }

        private void RestSale_FormClosed(object sender, FormClosedEventArgs e)
        {
            updateuser(userid);
        }
        public void updateuser(string id)
        {
            try
            {
                string q = "update Users set status='false' where id='" + id + "'";
                objCore.executeQuery(q);
            }
            catch (Exception ex)
            {


            }
        }

        private void dataGridView1_Sorted(object sender, EventArgs e)
        {

        }

        private void dataGridView1_ColumnAdded(object sender, DataGridViewColumnEventArgs e)
        {
            dataGridView1.Columns[e.Column.Index].SortMode = DataGridViewColumnSortMode.NotSortable;
        }
        string[,] array;
        public void setlocation()
        {

            //int x = 3, y = 3;
            //int xval = 0, yval = 0;

            //array = new string[1, 2];
            //var loc = panel3.PointToScreen(Point.Empty);
            //x = loc.X;
            //y = loc.Y;
            //array[0, 0] = "0";// x.ToString();
            //array[0, 1] = "0";// y.ToString();
            //int i = 0;

        }
        private void vVScrollBar1_Scroll(object sender, ScrollEventArgs e)
        {
            //setlocation();
            //int x = 3, y = 3, i = 0;
            //var loc = tableLayoutPanelmenugroup.PointToScreen(Point.Empty);
            //x = loc.X;
            //y = loc.Y;
            //x = Convert.ToInt32(array[0, 0]);
            //y = Convert.ToInt32(array[0, 1]);
            //x = 0;// x / 4;
            //int val = vVScrollBar1.Value;
            //y = y - val;
            //tableLayoutPanelmenugroup.Location = new Point(x, y);
        }

        private void vVScrollBar2_Scroll(object sender, ScrollEventArgs e)
        {
            //setlocation();
            //int x = 3, y = 3, i = 0;
            //var loc = tableLayoutPanelmenugroup.PointToScreen(Point.Empty);
            //x = loc.X;
            //y = loc.Y;
            //x = Convert.ToInt32(array[0, 0]);
            //y = Convert.ToInt32(array[0, 1]);
            //x = 0;// x / 4;
            //int val = vVScrollBar2.Value;
            //y = y - val;
            //tableLayoutPanelmenuitem.Location = new Point(x, y);
        }

        private void tabControl1_SelectedIndexChanged(object sender, EventArgs e)
        {
            try
            {
                int indx = tabControl1.SelectedIndex;
                string val = "";
                try
                {
                    val = tabsarray[indx].ToString();
                }
                catch (Exception ex)
                {

                }
                if (val == "")
                {
                    val = "0";

                }
                txtdiscount.Text = val;
                string id = "";
                try
                {
                    id = tabsarraysaleid[indx].ToString();
                }
                catch (Exception ex)
                {


                }
                if (tabControl1.SelectedTab.Name.Contains("tab") || tabControl1.SelectedTab.Name == "")
                {
                    saleid = 0;
                }
                else
                {
                    saleid = Convert.ToInt32(tabControl1.SelectedTab.Name.ToString());
                }
                label4.Text = saleid.ToString();
            }
            catch (Exception ex)
            {


            }
            //if (id == "")
            //{
            //    saleid = 0;
            //}
            //else
            //{
            //    saleid = Convert.ToInt32(id);
            //}
            gettotal();
        }
        public string sizechk = "";
        private void btnsmall_Click(object sender, EventArgs e)
        {
            vButton btn = sender as vButton;
            sizechk = btn.Text;
            //DataSet dsgetsize = new DataSet();
            //string q = "select * from ModifierFlavour where name='"+btn.Text+"'";
            //dsgetsize = objCore.funGetDataSet(q);
            //if (dsgetsize.Tables[0].Rows.Count > 0)
            //{
            //    size = btn.Text.Substring(0, 1)+"'";
            //    sizeid = dsgetsize.Tables[0].Rows[0]["id"].ToString();
            //    string val=dsgetsize.Tables[0].Rows[0]["price"].ToString();
            //    if (val == "")
            //    {
            //        val = "0";
            //    }

            //    sizeprice = float.Parse(val);
            //}

        }

        private void btnmodify_Click(object sender, EventArgs e)
        {
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control1 in controls)
                {
                    if (control1 is DataGridView)
                    {
                        DataGridView grid = control1 as DataGridView;
                        if (grid.Rows.Count > 0)
                        { }
                        else
                        {
                            return;
                        }
                    }
                }

                AddModifier obj = new AddModifier(this);
                DataTable dtm = new DataTable();
                dtm.Columns.Add("id", typeof(string));
                dtm.Columns.Add("Name", typeof(string));
                dtm.Columns.Add("Quantity", typeof(string));
                dtm.Columns.Add("Price", typeof(string));
                dtm.Columns.Add("mdid", typeof(string));
                dtm.Columns.Add("index", typeof(string));
                try
                {

                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;

                            foreach (DataGridViewRow dgr in grid.SelectedRows)
                            {
                                int indx = dgr.Index;
                                string Id = dgr.Cells[0].Value.ToString();
                                string name = dgr.Cells["Item"].Value.ToString();
                                string price = dgr.Cells["Price"].Value.ToString();
                                string q = dgr.Cells["Qty"].Value.ToString();
                                dtm.Rows.Add(Id, name, q, price, "", indx.ToString());
                            }

                        }
                    }

                }
                catch (Exception ex)
                {
                }
                obj.dtmodify = dtm;
                obj.gs = gstperc;
                obj.Show();
            }
            catch (Exception ex)
            {


            }
        }

        private void vButton3_Click_1(object sender, EventArgs e)
        {
            //this.Close();
            forms.NewLogIn obj = new forms.NewLogIn(this);
            obj.chk = "yes";
            obj.Show();
        }

        private void vButton2_Click_1(object sender, EventArgs e)
        {
            this.TopMost = false;
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "Employee";
            ob.useridd = userid;
            ob.datee = date;
            ob.shiftid = shiftid;
            // this.Enabled = false;
            ob.Show();

        }

        private void dataGridView1_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {

        }

        private void vLabel1_Click(object sender, EventArgs e)
        {

        }
        protected int getruntimecount(string id)
        {
            int count = 0;
            try
            {
                string q = "select modifiercount FROM            MenuItem where id=" + id;
                DataSet dscount = new DataSet();
                dscount = objCore.funGetDataSet(q);
                if (dscount.Tables[0].Rows.Count > 0)
                {
                    string temp = dscount.Tables[0].Rows[0][0].ToString();
                    if (temp == "")
                    {
                        temp = "1";
                    }
                    count = int.Parse(temp);
                }
            }
            catch (Exception ex)
            {


            }
            return count;
        }
        private void vButton8_Click_1(object sender, EventArgs e)
        {
            try
            {
                string txtToltal = txttotal.Text;
                bool isNew = true;
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
              
                   

                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        //int indx = grid.CurrentCell.RowIndex;
                        int index = grid.SelectedRows[0].Index;
                        int rowcount = 0;
                        foreach (DataGridViewRow dgr in grid.SelectedRows)
                        {
                            // if (dgr.Cells["SaleType"].Value.ToString() == "New")
                            {

                                int rowscount = getruntimecount(dgr.Cells[0].Value.ToString());
                                int menuqtyy = 0;
                                string temp = dgr.Cells[9].Value.ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                if (Convert.ToInt32(temp) > 0)
                                {
                                    int ridqty = 0;// Convert.ToInt32(dgr.Cells[2].Value.ToString());
                                    if (rowscount > 0)
                                    {
                                        bool chk = true;
                                        string rid = temp;
                                        string mid = dgr.Cells[0].Value.ToString();
                                        int totalindx = dgr.Index - 1;
                                        bool chktotal = true;
                                        for (int i = dgr.Index; i < grid.Rows.Count; i++)
                                        {
                                            if (chktotal == true)
                                            {
                                                string temprid = grid.Rows[i].Cells[9].Value.ToString();
                                                if (temprid == "")
                                                {
                                                    temprid = "0";
                                                }
                                                if (temprid == "0")
                                                {
                                                    chktotal = false;
                                                }
                                                else
                                                {
                                                    totalindx++;
                                                }
                                            }
                                        }
                                        for (int i = totalindx; i >= 0; i--)
                                        {
                                            if (chk == true)
                                            {

                                                string temprid = grid.Rows[i].Cells[9].Value.ToString();
                                                if (temprid == "")
                                                {
                                                    temprid = "0";
                                                }
                                                if (temprid == "0" && mid == grid.Rows[i].Cells[0].Value.ToString())
                                                {
                                                    menuqtyy = Convert.ToInt32(grid.Rows[i].Cells[2].Value.ToString());
                                                    chk = false;
                                                }
                                                else
                                                {
                                                    ridqty = ridqty + Convert.ToInt32(grid.Rows[i].Cells[2].Value.ToString());
                                                }
                                            }

                                        }

                                        if (menuqtyy > 0)
                                        {
                                            int qnty = Convert.ToInt32(grid.Rows[dgr.Index - 1].Cells[2].Value.ToString());
                                            qnty = qnty * rowscount;
                                            if (ridqty >= qnty)
                                            {
                                                MessageBox.Show("You can not add more than " + qnty.ToString() + " Drinks/Items");
                                                return;
                                            }
                                            runtimeremaining++;
                                        }
                                    }
                                }
                                else
                                {

                                }

                                temp = dgr.Cells[4].Value.ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                double price = Convert.ToDouble(temp);
                                int qty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
                                if (qty > 0)
                                {
                                    price = price / qty;
                                }
                                
                                qty = qty + 1;
                                price = price * qty;
                                dgr.Cells[2].Value = qty;
                                dgr.Cells[4].Value = price;
                                dgr.Cells["SaleType"].Value = "New";
                                addon = "new";
                                
                                gettotal();
                                try
                                {
                                    obcustomerdisplay.changeqty(index, qty, price.ToString());
                                }
                                catch (Exception ex)
                                {


                                }
                                string q="";
                                if (saleid > 0)
                                {
                                    dgr.Cells["SaleType"].Value = "Old";
                                   // vButton9.Enabled = false;

                                    //q = "select *from sale where id=" + saleid;
                                }
                                //else {
                                //    string oldSId = getOldsaleid();
                                //     q = "select *from sale where id=" + oldSId;
                                //}
                                //DataSet saleDS = new DataSet();
                                //saleDS = objCore.funGetDataSet(q);
                                //if (saleDS != null)
                                //{
                                //    if (saleDS.Tables[0].Rows.Count > 0)
                                //    {
                                //        //string Total = dgr.Cells[4].Value.ToString();

                                //        string TotalAmt = saleDS.Tables[0].Rows[0][4].ToString();
                                //        if (TotalAmt == txtToltal)
                                //        {
                                //            dgr.Cells["SaleType"].Value = "Old";

                                //        }
                                //        //saleid = "0";
                                      
                                //    }

                                //}


                                if (rowscount > 0)
                                {
                                    modifiercount = (Convert.ToInt32(qty) * rowscount).ToString();
                                }
                            }

                        }

                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void vButton9_Click_1(object sender, EventArgs e)
        {
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        //int indx = grid.CurrentCell.RowIndex;
                        int index = grid.SelectedRows[0].Index;
                        foreach (DataGridViewRow dgr in grid.SelectedRows)
                        {
                            if (dgr.Cells["SaleType"].Value.ToString() == "New")
                            {

                                int rowscount = getruntimecount(dgr.Cells[0].Value.ToString());
                                int menuqtyy = 0;
                                string temp = dgr.Cells[9].Value.ToString();
                                if (temp == "")
                                {
                                    temp = "0";
                                }
                                if (Convert.ToInt32(temp) > 0)
                                {
                                    int ridqty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
                                    if (rowscount > 0)
                                    {

                                        if (runtimeremaining > 0)
                                        {
                                            runtimeremaining--;
                                        }
                                    }
                                }
                                else
                                {

                                }


                                double price = Convert.ToDouble(dgr.Cells[4].Value.ToString());
                                int qty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
                                if (qty > 0)
                                {
                                    price = price / qty;
                                }
                                qty = qty - 1;
                                if (qty >= 1)
                                {
                                    price = price * qty;
                                    dgr.Cells[2].Value = qty;
                                    dgr.Cells[4].Value = price;
                                    gettotal();
                                    try
                                    {
                                        obcustomerdisplay.changeqty(index, qty, price.ToString());
                                    }
                                    catch (Exception ex)
                                    {


                                    }
                                    if (rowscount > 0)
                                    {
                                        modifiercount = (Convert.ToInt32(qty) * rowscount).ToString();
                                    }
                                }
                            }
                            else {
                                MessageBox.Show("Bill is Tender Negtive is not Allowed Please Delete");

                            //    POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
                            //    ob.editmode = "SaleModify";
                            //    ob.Show();
                            //    bool textBoxValue = ob.IsValid;
                            //    if (vButton9.Enabled)
                            //    {

                            //        int rowscount = getruntimecount(dgr.Cells[0].Value.ToString());
                            //        int menuqtyy = 0;
                            //        string temp = dgr.Cells[9].Value.ToString();
                            //        if (temp == "")
                            //        {
                            //            temp = "0";
                            //        }
                            //        if (Convert.ToInt32(temp) > 0)
                            //        {
                            //            int ridqty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
                            //            if (rowscount > 0)
                            //            {

                            //                if (runtimeremaining > 0)
                            //                {
                            //                    runtimeremaining--;
                            //                }
                            //            }
                            //        }
                            //        else
                            //        {

                            //        }


                            //        double price = Convert.ToDouble(dgr.Cells[4].Value.ToString());
                            //        int qty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
                            //        if (qty > 0)
                            //        {
                            //            price = price / qty;
                            //        }
                            //        qty = qty - 1;
                            //        if (qty >= 1)
                            //        {
                            //            price = price * qty;
                            //            dgr.Cells[2].Value = qty;
                            //            dgr.Cells[4].Value = price;
                            //            gettotal();
                            //            try
                            //            {
                            //                obcustomerdisplay.changeqty(index, qty, price.ToString());
                            //            }
                            //            catch (Exception ex)
                            //            {


                            //            }
                            //            if (rowscount > 0)
                            //            {
                            //                modifiercount = (Convert.ToInt32(qty) * rowscount).ToString();
                            //            }
                            //        }
                                
                                
                            //    }
                            
                            }
                        }

                    }
                }

            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }
        }

        private void toolTip1_Popup(object sender, PopupEventArgs e)
        {

        }

        private void txttotal_TextChanged_1(object sender, EventArgs e)
        {

        }
        public void updatecomplmntry(int index, DataTable dtcmpb, String Narration)
        {
            DisNarration = Narration;
            foreach (DataRow dr in dtcmpb.Rows)
            {
                try
                {
                    if (dr["price"].ToString() == "0")
                    {
                        string q = "update saledetails set price='0',Itemdiscount='0',ItemGst='0' where id='" + dr["saledetailid"].ToString() + "'";
                        objCore.executeQuery(q);
                    }
                }
                catch (Exception  ex)
                {
                    
                   
                }
            }
            try
            {
                if (saleid > 0 && DisNarration.Trim().Length > 0)
                {
                    string q = "update Sale set DiscountNaration='" + DisNarration + "' where id='" + saleid + "'";
                    objCore.executeQuery(q);
                }
                
            }
            catch (Exception ex)
            {


            }


            TabPage page = tabControl1.SelectedTab;
            var controls = page.Controls;
            foreach (var control in controls)
            {
                if (control is DataGridView)
                {
                    DataTable dtcmp = new DataTable();
                    DataGridView grid = control as DataGridView;
                    dtcmp = grid.DataSource as DataTable;

                    dtcmp = dtcmpb;

                }
            }


            gettotal();
        }
        public void calcomp()
        {
            DataTable dtcmp = new DataTable();

            TabPage page = tabControl1.SelectedTab;
            var controls = page.Controls;
            foreach (var control in controls)
            {
                if (control is DataGridView)
                {
                    DataGridView grid = control as DataGridView;
                    if (grid.Rows.Count > 0)
                    {
                        dtcmp = grid.DataSource as DataTable;
                        complimentry obj = new complimentry(this);
                        obj.dt = dtcmp;
                        obj.indx = tabControl1.SelectedIndex;
                        obj.Show();
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
        public void caldis(string userid)
        {
            DataTable dtcmp = new DataTable();

            TabPage page = tabControl1.SelectedTab;
            var controls = page.Controls;
            foreach (var control in controls)
            {
                if (control is DataGridView)
                {
                    DataGridView grid = control as DataGridView;
                    if (grid.Rows.Count > 0)
                    {
                        dtcmp = grid.DataSource as DataTable;
                        DiscountIndividual obj = new DiscountIndividual(this);
                        obj.dt = dtcmp;
                        obj.indx = tabControl1.SelectedIndex;
                        obj.userid = userid;
                        obj.saleid = saleid.ToString();
                        obj.Show();
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }
        private void vButton16_Click_1(object sender, EventArgs e)
        {
            
            
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "Complimentry Discount";
            ob.id = userid;
            ob.datee = date;
            ob.Show();
        }
        public string checkprint(string type)
        {
            string print = "Disabled";
            string q = "select * from DeviceSetting where device='" + type + "'";
            DataSet dsd = new DataSet();
            dsd = objCore.funGetDataSet(q);
            if (dsd.Tables[0].Rows.Count > 0)
            {
                print = dsd.Tables[0].Rows[0]["Status"].ToString();
                if (print == "")
                {
                    print = "Enabled";
                }
            }
            return print;
        }
        public string checkkitchenbell(string type)
        {
            string print = "Disabled";
            string q = "select * from DeviceSetting where device='" + type + "'";
            DataSet dsd = new DataSet();
            dsd = objCore.funGetDataSet(q);
            if (dsd.Tables[0].Rows.Count > 0)
            {
                print = dsd.Tables[0].Rows[0]["Status"].ToString();
                if (print == "")
                {
                    print = "Disabled";
                }
            }
            return print;
        }
        public void updatepreviousorder()
        {
            string otype = "";
            if (tablettableno == "")
            {
                otype = "Take Away";
            }
            else
            {
                otype = "Tablet";
            }

            sale("Cash", otype, tabControl1.SelectedTab.Text);
            DataSet dsp = new DataSet();
            try
            {
                string q = "select * from billtype where saleid='" + saleid + "'";
                objCore.executeQuery(q);
                dsp = objCore.funGetDataSet(q);
                if (dsp.Tables[0].Rows.Count > 0)
                {
                    string id = dsp.Tables[0].Rows[0]["id"].ToString();
                    q = "update billtype set amount='" + txtnettotal.Text + "' where id='" + id + "'";
                    objCore.executeQuery(q);
                }
            }
            catch (Exception ex)
            {


            }
            finally
            {
                dsp.Dispose();
            }
            //if (checkprint("Print Kitchen") == "Enabled")
            //{
            //    //sendtokot("kitchen");
            //}
            //if (checkprint("Print Main") == "Enabled")
            //{
            //    //sendtokot("main");
            //}
            if (tabControl1.SelectedTab.Name == "Previous")
            {
                try
                {
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            DataGridView grid = control as DataGridView;
                            DataTable tbl = grid.DataSource as DataTable;
                            tbl.Clear();
                        }
                    }
                }
                catch (Exception ex)
                {


                }


                recalsaleprevious(saleid.ToString(), "no");
            }
            else
            {
                recalsale(saleid.ToString(), "no");
            }
        }
        public static string PrintKitchen = "", printmain = "", kitchenbell = "", kitchenbellkot = "";
        public void updateorder(string call)
        {
            if (saleid == 0)
            {
                return;
            }
            //gettotal();
            if (tabControl1.SelectedTab.Name == "Previous")
            {
                RestAllowDiscount obj = new RestAllowDiscount(this);
                obj.editmode = "Update Previous";
                obj.Show();
                return;
            }
            //try
            //{
            //    TabPage page = tabControl1.SelectedTab;
            //    var controls = page.Controls;
            //    foreach (var control in controls)
            //    {
            //        if (control is DataGridView)
            //        {
            //            DataGridView grid = control as DataGridView;
            //            if (grid.Rows.Count <= 0)
            //            {

            //                return;
            //            }
            //        }
            //    }
            //}
            //catch (Exception ex)
            //{

            //    // throw;
            //}
            //if (saleid == 0)
            //{
            //    string saletype = "";
            //    if (editsale == string.Empty)
            //    {
            //        saletype = "New";
            //    }
            //    else
            //    {
            //        saletype = "Old";
            //    }
            //    if (saleid == 0)
            //    {
            //        saletype = "New";

            //    }
            //    else
            //    {
            //        saletype = "Old";
            //    }
            //    if (saletype == "New")
            //    {
            //        if (tabControl1.SelectedTab.Name.Contains("tab") || tabControl1.SelectedTab.Name == "")
            //        {
            //            saletype = "New";
            //        }
            //        else
            //        {

            //            saletype = "Old";
            //            saleid = Convert.ToInt32(tabControl1.SelectedTab.Name.ToString());
            //            arraysalid(saleid.ToString());
            //        }
            //    }
            //    if (saletype == "New")
            //    {
            //        return;
            //    }
            //}
            string q = "update sale set uploadstatusserver='Pending',UploadStatus='Pending',uploadstatusbilltype='Pending',uploadstatusrefund='Pending' where id='" + saleid + "'";
            objCore.executeQuery(q);
          
            
            //vButton17.Text = "Please Wait";
            sale("Cash", ordertype1, tabControl1.SelectedTab.Text);
            if (call == "")
            {
                if (PrintKitchen == "Enabled")
                {
                    sendtokot("kitchen");
                }
                if (printmain == "Enabled")
                {
                    sendtokot("main kot");
                }
                if (kitchenbell == "Enabled")
                {
                    ringbell();
                }
            }
            
            if (tabControl1.SelectedTab.Name == "Previous Bill")
            {
                recalsaleprevious(saleid.ToString(), "no");
            }
            else
            {
                recalsale(saleid.ToString(), "no");
            }

        }
        private void vButton17_Click_1(object sender, EventArgs e)
        {
            //this.TopMost = false;
            gettotal();
            if (tabControl1.SelectedTab.Name == "Previous")
            {
                RestAllowDiscount obj = new RestAllowDiscount(this);
                obj.editmode = "Update Previous";
                obj.Show();
                return;
            }
            try
            {
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count <= 0)
                        {

                            return;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                // throw;
            }
            if (saleid == 0)
            {
                string saletype = "";
                if (editsale == string.Empty)
                {
                    saletype = "New";
                }
                else
                {
                    saletype = "Old";
                }
                if (saleid == 0)
                {
                    saletype = "New";

                }
                else
                {
                    saletype = "Old";
                }
                if (saletype == "New")
                {
                    if (tabControl1.SelectedTab.Name.Contains("tab") || tabControl1.SelectedTab.Name == "")
                    {
                        saletype = "New";
                    }
                    else
                    {

                        saletype = "Old";
                        saleid = Convert.ToInt32(tabControl1.SelectedTab.Name.ToString());
                        arraysalid(saleid.ToString());
                    }
                }
                if (saletype == "New")
                {
                    return;
                }
            }
            string otype = "";
            if (tablettableno == "")
            {
                otype = "Take Away";
            }
            else
            {
                otype = "Tablet";
            }
            //vButton17.Text = "Please Wait";
            sale("Cash", otype, tabControl1.SelectedTab.Text);

            if (PrintKitchen == "Enabled")
            {
                sendtokot("kitchen");
            }
            if (printmain == "Enabled")
            {
                sendtokot("main");
            }
            if (tabControl1.SelectedTab.Name == "Previous Bill")
            {
                recalsaleprevious(saleid.ToString(), "no");
            }
            else
            {
                recalsale(saleid.ToString(), "no");
            }
            //vButton17.Text = "Update Order";
        }

        private void vButton19_Click_1(object sender, EventArgs e)
        {
            this.TopMost = false;
            BillRecallold ob = new BillRecallold(this);
            ob.date = date;
            // this.Enabled = false;
            ob.Show();

        }
        private const string CACHE_date = "cachedate";
        private const string CACHE_shiftid = "cacheshiftid";
        private const string CACHE_pointsurl = "pointsurl";
        
        private void vButton20_Click_1(object sender, EventArgs e)
        {


            //try
            //{
            //    int count = tabControl1.TabCount;
            //    TabPage page = tabControl1.SelectedTab;
            //    var controls = page.Controls;
            //    foreach (var control in controls)
            //    {
            //        if (control is DataGridView)
            //        {
            //            DataGridView grid = control as DataGridView;
            //            //int indx = grid.CurrentCell.RowIndex;
            //            int index = grid.SelectedRows[0].Index;
            //            foreach (DataGridViewRow dgr in grid.SelectedRows)
            //            {
            //                // if (dgr.Cells["SaleType"].Value.ToString() == "New")
            //                {
            //                    string temp = dgr.Cells[4].Value.ToString();
            //                    if (temp == "")
            //                    {
            //                        temp = "0";
            //                    }
            //                    double price = Convert.ToDouble(temp);
            //                    int qty = Convert.ToInt32(dgr.Cells[2].Value.ToString());
            //                    if (qty > 0)
            //                    {
            //                        price = price / qty;
            //                    }
            //                    string tmp = textBox1.Text;
            //                    if (tmp == "")
            //                    {
            //                        tmp = "0";
            //                    }
            //                    qty =Convert.ToInt32(tmp);
            //                    price = price * qty;
            //                    //tmp = textBox2.Text;
            //                    //if (tmp == "")
            //                    //{
            //                    //    tmp = "0";
            //                    //}

            //                    //price = Convert.ToDouble(tmp);
            //                    dgr.Cells[2].Value = qty;
            //                    dgr.Cells[4].Value = price;
            //                    gettotal();
            //                    try
            //                    {
            //                        obcustomerdisplay.changeqty(index, qty, price.ToString());
            //                    }
            //                    catch (Exception ex)
            //                    {


            //                    }
            //                }
            //            }

            //        }
            //    }

            //}
            //catch (Exception ex)
            //{
            //    MessageBox.Show(ex.Message);
            //}
            //return;
            //gettotal();
            //txtnettotal.Text = "0";
            this.TopMost = false;
            if (tabControl1.SelectedTab.Name == "Previous")
            {
                if (tabControl1.TabCount > 1)
                {
                    saleid = 0;
                    tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                }
                else
                {
                    TabPage page = tabControl1.SelectedTab;
                    var controls = page.Controls;
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            tabControl1.SelectedTab.Name = "";
                            tabControl1.SelectedTab.Text = "";
                            DataGridView grid = control as DataGridView;
                            DataTable tbl = grid.DataSource as DataTable;
                            tbl.Clear();
                            saleid = 0;
                        }
                    };
                }
                previousbillcount = 1;
            }
            else
            {
                try
                {
                    string q = "select BillStatus from sale where id='" + saleid + "' and billstatus='Paid'";
                    DataSet dsbill = new DataSet();
                    dsbill = objCore.funGetDataSet(q);
                    if (dsbill.Tables[0].Rows.Count > 0)
                    {
                        if (tabControl1.TabCount > 1)
                        {
                            saleid = 0;
                            tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                        }
                        else
                        {
                            TabPage page1 = tabControl1.SelectedTab;
                            var controls1 = page1.Controls;
                            foreach (var control in controls1)
                            {
                                if (control is DataGridView)
                                {
                                    tabControl1.SelectedTab.Name = "";
                                    tabControl1.SelectedTab.Text = "";
                                    DataGridView grid = control as DataGridView;
                                    DataTable tbl = grid.DataSource as DataTable;
                                    tbl.Clear();
                                    saleid = 0;
                                }
                            };
                        }
                        return;
                    }
                }
                catch (Exception ex)
                {


                }
            }
            return;
            try
            {
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        tbl.Clear();
                    }
                }
            }
            catch (Exception ex)
            {


            }
            try
            {

                int indx = tabControl1.SelectedIndex;
                tabsarraysaleid[indx] = "0";

            }
            catch (Exception ex)
            {


            }
            for (int i = tabControl1.SelectedIndex; i < tabsarraysaleid.Length; i++)
            {
                if ((i + 1) < tabsarraysaleid.Length)
                {
                    tabsarraysaleid[i] = tabsarraysaleid[i + 1];
                }
            }
            try
            {
                if (tabControl1.TabCount > 1)
                {
                    tabControl1.TabPages.RemoveAt(tabControl1.SelectedIndex);
                }
                else
                {
                    //dt.Clear();
                    gettotal();
                    tabControl1.SelectedTab.Text = "";
                    tabControl1.SelectedTab.Name = "";
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void vButton21_Click(object sender, EventArgs e)
        {
            Comments obj = new Comments(this);
            obj.Show();

        }
        public void comments(string coment)
        {
            try
            {
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {

                            DataTable dtGridSource = (DataTable)grid.DataSource;
                            dtGridSource.Rows[grid.CurrentCell.RowIndex]["comments"] = coment;
                            dtGridSource.Rows[grid.CurrentCell.RowIndex]["Item"] = dtGridSource.Rows[grid.CurrentCell.RowIndex]["Item"].ToString() + " " + coment;
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }

        private void vButton22_Click(object sender, EventArgs e)
        {
            try
            {
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            Loyalitycard obj = new Loyalitycard(this);
                            obj.Show();
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }
        }
        public void cahangetext(string text)
        {
            tabControl1.SelectedTab.Text = text;
        }
        public void reopenbill()
        {
            try
            {
                string q = "update sale set billstatus='Pending',uploadstatusserver='Pending',UploadStatus='Pending',uploadstatusbilltype='Pending',uploadstatusrefund='Pending' where id='" + saleid + "'";
                POSRestaurant.classes.Clsdbcon objcore = new classes.Clsdbcon();
                objcore.executeQuery(q);
                callrecipe("Reverse");
                q = "insert into ReopenLog ( Time, Saleid) values ('" + DateTime.Now + "','" + saleid + "')";
                objcore.executeQuery(q);
                int count = tabControl1.TabCount;

                if (tabControl1.SelectedTab.Name == "Previous")
                {
                    
                    previousbillcount = 1;
                }
                // neworder(count.ToString());

                recalsale(saleid.ToString(), "no");
            }
            catch (Exception ex)
            {

            }
        }
        private void vButton23_Click(object sender, EventArgs e)
        {


            {
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            RestAllowDiscount ob = new RestAllowDiscount(this);
                            ob.id = saleid.ToString();
                            ob.name = tabControl1.SelectedTab.Text;
                            ob.editmode = "changebill";
                            ob.Show();


                        }

                    }
                }
            }
        }

        private void button1_Click_2(object sender, EventArgs e)
        {
            string q = "delete from advancecash where saleid='" + saleid + "'";
            objCore.executeQuery(q);
            gettotal();
        }

        private void vButton24_Click(object sender, EventArgs e)
        {
            this.TopMost = false;
            try
            {

                if (daystatus == "Day Start")
                {
                    MessageBox.Show("Please Start Day First");
                    return;
                }
                if (shiftid.Trim() == "")
                {
                    MessageBox.Show("Please Start Shift First");
                    return;
                }


                AddDeals obj = new AddDeals(this);
                DataTable dtm = new DataTable();
                dtm.Columns.Add("id", typeof(string));
                dtm.Columns.Add("Name", typeof(string));
                dtm.Columns.Add("Quantity", typeof(string));
                dtm.Columns.Add("Price", typeof(string));
                dtm.Columns.Add("mdid", typeof(string));
                dtm.Columns.Add("index", typeof(string));
                dtm.Columns.Add("deal", typeof(string));
                dtm.Columns.Add("flid", typeof(string));
                dtm.Columns.Add("del", typeof(string));
                dtm.Columns.Add("Topping", typeof(string));
                dtm.Columns.Add("extraflavourid", typeof(string));
                dtm.Columns.Add("menugrouid", typeof(string));
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control1 in controls)
                {
                    if (control1 is DataGridView)
                    {
                        DataGridView grid = control1 as DataGridView;
                        if (grid.Rows.Count > 0)
                        {
                            string dealid = "", dealname = "";
                            int indx = grid.CurrentCell.RowIndex;
                            string deal = grid.Rows[indx].Cells["atid"].Value.ToString();
                            string menuid = grid.Rows[indx].Cells["id"].Value.ToString();
                            dealid = deal;
                            dealname = grid.Rows[indx].Cells["item"].Value.ToString();
                            if (menuid == "")
                            {
                                bool chkdeal = true;
                                for (int i = indx; i < grid.Rows.Count; i++)
                                {
                                    string id = grid.Rows[i].Cells["id"].Value.ToString();
                                    if (i > indx && id == "")
                                    {
                                        chkdeal = false;
                                    }
                                    if (chkdeal == true)
                                    {
                                        string price = grid.Rows[i].Cells["price"].Value.ToString();
                                        if (price == "")
                                        {
                                            price = "0";
                                        }
                                        if (id == "")
                                        {
                                            dtm.Rows.Add("", grid.Rows[i].Cells["item"].Value.ToString(), grid.Rows[i].Cells["qty"].Value.ToString(), price, grid.Rows[i].Cells["atid"].Value.ToString(), "", grid.Rows[i].Cells["item"].Value.ToString(), grid.Rows[i].Cells["flavourid"].Value.ToString(), "yes", "", "");
                                        }
                                        else
                                        {
                                            dtm.Rows.Add(id, grid.Rows[i].Cells["item"].Value.ToString(), grid.Rows[i].Cells["qty"].Value.ToString(), price, grid.Rows[i].Cells["atid"].Value.ToString(), "", "1", grid.Rows[i].Cells["flavourid"].Value.ToString(), "", "", "");
                                        }
                                    }
                                }
                                int countt = grid.Rows.Count;
                                chkdeal = true;
                                for (int i = indx; i < countt; i++)
                                {
                                    try
                                    {
                                        string id = grid.Rows[indx].Cells["id"].Value.ToString();
                                        if (i > indx && id == "")
                                        {
                                            chkdeal = false;
                                        }
                                        if (chkdeal == true)
                                        {
                                            grid.Rows.RemoveAt(indx);
                                            i = indx;
                                            try
                                            {
                                                obcustomerdisplay.deleteitems(menuid, "", "", grid.Rows[i].Cells["flavourid"].Value.ToString(), 1);
                                            }
                                            catch (Exception ex)
                                            {


                                            }
                                        }
                                    }
                                    catch (Exception exx)
                                    {


                                    }
                                }
                                obj.dtmodify = dtm;
                                obj.callheadclick(dealid);
                                obj.caldealclick(dealid, dealname);
                                obj.Show();
                            }
                            else
                            {
                                obj.dtmodify = dtm;
                                obj.Show();
                            }
                        }
                        else
                        {

                            obj.dtmodify = dtm;
                            obj.Show();
                        }

                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void txtnettotal_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (linedisplay == true)
                {
                    closelinedisplay();
                    openlinedisplay(port);
                    LineDisplay();
                }
                else
                {
                    //obcustomerdisplay.fillgrid(ds.Tables[0].Rows[0]["id"].ToString(), "", ds.Tables[0].Rows[0]["name"].ToString(), prc.ToString(), qntytemp.ToString());
                }
            }
            catch (Exception ex)
            {
            }
        }

        private void vButton25_Click(object sender, EventArgs e)
        {
            kiosk obj = new kiosk();
            obj.date = date;
            obj.Show();
        }

        private void vButton26_Click(object sender, EventArgs e)
        {
            splitbill obj = new splitbill(this);
            obj.date = date;
            obj.Show();
        }

        private void tableLayoutPanel17_Paint(object sender, PaintEventArgs e)
        {

        }

        private void RestSale_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Escape)
                {
                    txtsearch.Text = "";
                    txtsearch.Focus();
                }
            }
            catch (Exception ex)
            {
                
            }
            if (e.Control && e.KeyCode == Keys.P)
            {
                if (tabControl1.SelectedTab.Name == "Previous")
                {

                }
                else
                {
                    if (saleid > 0)
                    {

                    }
                    else
                    {
                        return;
                    }
                }
                string otype = getordertype(), recvd = txtnettotal.Text, chng = "0";
                TabPage page = tabControl1.SelectedTab;
                var controls1 = page.Controls;
                bool checknew = false;
                foreach (var control in controls1)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        
                        {
                            if (addon == "new")
                            {
                                sale("Cash", otype, tabControl1.SelectedTab.Text);

                                if (PrintKitchen == "Enabled")
                                {
                                    sendtokot("kitchen");
                                }
                                if (printmain == "Enabled")
                                {
                                    sendtokot("main");
                                }

                                if (tabControl1.SelectedTab.Name == "Previous Bill")
                                {
                                    recalsaleprevious(saleid.ToString(), "no");
                                }
                                else
                                {
                                    recalsale(saleid.ToString(), "no");
                                }
                            }
                        }
                    }
                }
                {
                    string ordertype = otype;
                    string total = txttotal.Text.Trim();
                    string nettotal = txtnettotal.Text.Trim();
                    string discount = txtdiscount.Text.Trim();
                    string discountamount = txtdiscountamount.Text.Trim();
                    string gst = lblgst.Text.Trim();
                    string adv = txtadvanc.Text;
                    if (adv == "")
                    {
                        adv = "0";
                    }
                    double advance = 0;
                    try
                    {
                        advance = Convert.ToDouble(adv);
                    }
                    catch (Exception ex)
                    {


                    }
                    string sid1 = saleid.ToString();
                    cname1 = cashr; date1 = date; cashr1 = cashr; recvd1 = recvd; chng1 = chng; saletype1 = saletype; total1 = total; gst1 = gst; discount1 = discount; nettotal1 = nettotal.ToString(); otype1 = otype; discountamount1 = discountamount;
                    advance1 = advance;
                    Thread salethread;
                    double net = 0;
                    net = Convert.ToDouble(nettotal) + advance;
                    int count = tabControl1.TabCount;

                    string cname = page.Text;
                    var controls = page.Controls;
                    string type = printtype();
                    if (type == "")
                    {
                        type = "opos";
                    }
                    foreach (var control in controls)
                    {
                        if (control is DataGridView)
                        {
                            dtcopy = new DataTable();
                            DataGridView grid = control as DataGridView;
                            if (grid.Rows.Count <= 0)
                            {
                                return;
                            }

                            DataTable tbl = grid.DataSource as DataTable;
                            datatableprint = new DataTable();
                            datatableprint = tbl.Copy();

                            
                            {
                                int print = 1;
                                string printername = "";
                               
                                getcompany();
                                string customermsg = dscompany.Tables[0].Rows[0]["CustomerMessage"].ToString();
                                string customermsg2 = dscompany.Tables[0].Rows[0]["CustomerMessage2"].ToString();
                                string svschrgs = txtservice.Text;
                                string info = getdeliveryinfo(saleid.ToString());
                                bindreportpreview(datatableprint, saletype, sid1.ToString(), "", ordertype, total1, nettotal1, discount1, gst1, "0", chng1, printername, info, print, discountamount1, gst1, customermsg, customermsg2, svschrgs);
                               
                                //bindreport(tbl, saletype, saleid.ToString(), "", ordertype, total, nettotal, discount, gst, recvd, chng, printername, info,print);
                            }
                        }
                    }
                }
            }
        }

        private void rdcard_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                }
            }
            catch (Exception ex)
            {


            }
            gettotal();
        }

        private void rdcash_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (rdcard.Checked == true)
                {
                    gst = gstvisa;
                    gstperc = gstpercvisa;
                }
                else
                {
                    gst = gstcash;
                    gstperc = gstperccash;
                   
                }
            }
            catch (Exception ex)
            {


            }
            gettotal();
        }
        public void cancelservicecharges()
        {

            string q = "update sale set cancelservicecharges='yes' where id='" + saleid + "'";
            objCore.executeQuery(q);
            gettotal();
        }
        private void button2_Click_1(object sender, EventArgs e)
        {
            POSRestaurant.Sale.RestAllowDiscount ob = new RestAllowDiscount(this);
            ob.editmode = "service charges";

            // this.Enabled = false;
            ob.Show();
        }

        private void txtsearch_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    TextBox txt = sender as TextBox;
                    string name = txt.Text;
                    Button button1 = new Button();
                    button1.Text = name;
                    string id = "";
                    try
                    {
                        id = menulist.Where(x => x.barcode == name).ToList().FirstOrDefault().id.ToString().Trim();
                    }
                    catch (Exception ex)
                    {
                     
                    }
                    if (id.Length == 0)
                    {
                        button1.Name = menulist.Where(x => x.name == name).ToList().FirstOrDefault().id.ToString();
                    }
                    else
                    {
                        button1.Name = id;
                    }
                    clickbuttonevent(button1);
                }
            }
            catch (Exception ex)
            {
                
            }
        }

        private void contextMenuStrip1_Opening(object sender, CancelEventArgs e)
        {
            
        }

        private void deleteAllToolStripMenuItem_Click(object sender, EventArgs e)
        {
            this.TopMost = false;
            try
            {
                int count = tabControl1.TabCount;
                TabPage page = tabControl1.SelectedTab;
                var controls = page.Controls;
                foreach (var control in controls)
                {
                    if (control is DataGridView)
                    {
                        DataGridView grid = control as DataGridView;
                        DataTable tbl = grid.DataSource as DataTable;
                        //foreach (DataGridViewRow r in grid.SelectedRows)
                        //{

                        //}
                        int indx = grid.CurrentCell.RowIndex;
                        string Id = grid.Rows[indx].Cells[0].Value.ToString();
                        string type = grid.Rows[indx].Cells[5].Value.ToString();
                        if (type == "New")
                        {
                            DataRow dgr = tbl.Rows[indx];
                            dgr.Delete();
                            gettotal();
                        }
                        else
                        {
                            string sid = grid.Rows[indx].Cells["SaleDetailid"].Value.ToString();
                            RestAllowDiscount obj = new RestAllowDiscount(this);
                            obj.editmode = "voidall";
                            obj.id = sid;
                            obj.Show();
                        }


                    }
                }

            }
            catch (Exception ex)
            {


            }
           
        }
    }
}
